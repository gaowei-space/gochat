/**
 * @license
 For license information please see main.5216e7a9.js.LICENSE.txt */
'use strict';
!function () {
    /**
     * @param {number} name
     * @return {?}
     */
    function __webpack_require__(name) {
        var m = modules[name];
        if (void 0 !== m) {
            return m.exports;
        }
        var value = modules[name] = {
            id: name,
            loaded: false,
            exports: {}
        };
        return factories[name](value, value.exports, __webpack_require__), value.loaded = true, value.exports;
    }
    var factories = {
        1694: function (dom, e) {
            var msg;
            !function () {
                /**
                 * @return {?}
                 */
                function parser() {
                    /** @type {!Array} */
                    var e = [];
                    /** @type {number} */
                    var i = 0;
                    for (; i < arguments.length; i++) {
                        var value = arguments[i];
                        if (value) {
                            /** @type {string} */
                            var type = typeof value;
                            if ("string" === type || "number" === type) {
                                e.push(value);
                            } else {
                                if (Array.isArray(value)) {
                                    if (value.length) {
                                        var i = parser.apply(null, value);
                                        if (i) {
                                            e.push(i);
                                        }
                                    }
                                } else {
                                    if ("object" === type) {
                                        if (value.toString === Object.prototype.toString) {
                                            var key;
                                            for (key in value) {
                                                if (hasOwnProperty.call(value, key) && value[key]) {
                                                    e.push(key);
                                                }
                                            }
                                        } else {
                                            e.push(value.toString());
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return e.join(" ");
                }
                /** @type {function(this:Object, *): boolean} */
                var hasOwnProperty = {}.hasOwnProperty;
                if (dom.exports) {
                    /** @type {function(): ?} */
                    parser.default = parser;
                    /** @type {function(): ?} */
                    dom.exports = parser;
                } else {
                    if (!(void 0 === (msg = function () {
                        return parser;
                    }.apply(e, [])))) {
                        dom.exports = msg;
                    }
                }
            }();
        },
        908: function (module, metadata, packageSuccess) {
            var DataView = packageSuccess(8136)(packageSuccess(7009), "DataView");
            module.exports = DataView;
        },
        9676: function (module, exports, __webpack_require__) {
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            function self(a) {
                /** @type {number} */
                var j = -1;
                var r_len = null == a ? 0 : a.length;
                this.clear();
                for (; ++j < r_len;) {
                    var obj = a[j];
                    this.set(obj[0], obj[1]);
                }
            }
            var listCacheClear = __webpack_require__(5403);
            var method = __webpack_require__(2747);
            var hashGet = __webpack_require__(6037);
            var has = __webpack_require__(4154);
            var cookie = __webpack_require__(7728);
            self.prototype.clear = listCacheClear;
            self.prototype.delete = method;
            self.prototype.get = hashGet;
            self.prototype.has = has;
            self.prototype.set = cookie;
            /** @type {function(!Object): undefined} */
            module.exports = self;
        },
        8384: function (module, exports, __webpack_require__) {
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            function self(a) {
                /** @type {number} */
                var j = -1;
                var r_len = null == a ? 0 : a.length;
                this.clear();
                for (; ++j < r_len;) {
                    var obj = a[j];
                    this.set(obj[0], obj[1]);
                }
            }
            var listCacheClear = __webpack_require__(3894);
            var method = __webpack_require__(8699);
            var hashGet = __webpack_require__(4957);
            var has = __webpack_require__(7184);
            var cookie = __webpack_require__(7109);
            self.prototype.clear = listCacheClear;
            self.prototype.delete = method;
            self.prototype.get = hashGet;
            self.prototype.has = has;
            self.prototype.set = cookie;
            /** @type {function(!Object): undefined} */
            module.exports = self;
        },
        5797: function (module, metadata, packageSuccess) {
            var Map = packageSuccess(8136)(packageSuccess(7009), "Map");
            module.exports = Map;
        },
        8059: function (module, exports, __webpack_require__) {
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            function self(a) {
                /** @type {number} */
                var j = -1;
                var r_len = null == a ? 0 : a.length;
                this.clear();
                for (; ++j < r_len;) {
                    var obj = a[j];
                    this.set(obj[0], obj[1]);
                }
            }
            var listCacheClear = __webpack_require__(4086);
            var method = __webpack_require__(9255);
            var hashGet = __webpack_require__(9186);
            var has = __webpack_require__(3423);
            var cookie = __webpack_require__(3739);
            self.prototype.clear = listCacheClear;
            self.prototype.delete = method;
            self.prototype.get = hashGet;
            self.prototype.has = has;
            self.prototype.set = cookie;
            /** @type {function(!Object): undefined} */
            module.exports = self;
        },
        8319: function (module, id, require) {
            var Promise = require(8136)(require(7009), "Promise");
            module.exports = Promise;
        },
        3924: function (module, metadata, packageSuccess) {
            var Set = packageSuccess(8136)(packageSuccess(7009), "Set");
            module.exports = Set;
        },
        692: function (module, exports, __webpack_require__) {
            /**
             * @param {!Object} obj
             * @return {undefined}
             */
            function SetCache(obj) {
                /** @type {number} */
                var i = -1;
                var numPoistiveTicks = null == obj ? 0 : obj.length;
                this.__data__ = new MapCache;
                for (; ++i < numPoistiveTicks;) {
                    this.add(obj[i]);
                }
            }
            var MapCache = __webpack_require__(8059);
            var cachePush = __webpack_require__(5774);
            var has = __webpack_require__(1596);
            SetCache.prototype.add = SetCache.prototype.push = cachePush;
            SetCache.prototype.has = has;
            /** @type {function(!Object): undefined} */
            module.exports = SetCache;
        },
        2854: function (module, exports, __webpack_require__) {
            /**
             * @param {!Object} name
             * @return {undefined}
             */
            function Stack(name) {
                var data = this.__data__ = new ListCache(name);
                this.size = data.size;
            }
            var ListCache = __webpack_require__(8384);
            var listCacheClear = __webpack_require__(511);
            var method = __webpack_require__(835);
            var hashGet = __webpack_require__(707);
            var has = __webpack_require__(8832);
            var cookie = __webpack_require__(5077);
            Stack.prototype.clear = listCacheClear;
            Stack.prototype.delete = method;
            Stack.prototype.get = hashGet;
            Stack.prototype.has = has;
            Stack.prototype.set = cookie;
            /** @type {function(!Object): undefined} */
            module.exports = Stack;
        },
        7197: function (mixin, doPost, __webpack_require__) {
            var Symbol = __webpack_require__(7009).Symbol;
            mixin.exports = Symbol;
        },
        6219: function (module, metadata, packageSuccess) {
            var Uint8Array = packageSuccess(7009).Uint8Array;
            module.exports = Uint8Array;
        },
        7091: function (module, metadata, packageSuccess) {
            var WeakMap = packageSuccess(8136)(packageSuccess(7009), "WeakMap");
            module.exports = WeakMap;
        },
        4903: function (mixin) {
            /**
             * @param {!Object} o
             * @param {!Function} fn
             * @return {?}
             */
            mixin.exports = function (o, fn) {
                /** @type {number} */
                var n = -1;
                var lcslen = null == o ? 0 : o.length;
                /** @type {number} */
                var cnt = 0;
                /** @type {!Array} */
                var a = [];
                for (; ++n < lcslen;) {
                    var h = o[n];
                    if (fn(h, n, o)) {
                        a[cnt++] = h;
                    }
                }
                return a;
            };
        },
        7538: function (mixin, doPost, String) {
            var test = String(6478);
            var proceedLogin = String(4963);
            var a = String(3629);
            var isSubsetSum = String(5174);
            var i = String(6800);
            var _includeInThisScope = String(9102);
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} data
             * @param {!Function} obj
             * @return {?}
             */
            mixin.exports = function (data, obj) {
                var samePriority = a(data);
                var lowerPriority = !samePriority && proceedLogin(data);
                var screenSmallerThanEditor = !samePriority && !lowerPriority && isSubsetSum(data);
                var adjustHeight = !samePriority && !lowerPriority && !screenSmallerThanEditor && _includeInThisScope(data);
                var isTestFunc = samePriority || lowerPriority || screenSmallerThanEditor || adjustHeight;
                var rows = isTestFunc ? test(data.length, String) : [];
                var m = rows.length;
                var key;
                for (key in data) {
                    if (!(!obj && !hasOwnProperty.call(data, key) || isTestFunc && ("length" == key || screenSmallerThanEditor && ("offset" == key || "parent" == key) || adjustHeight && ("buffer" == key || "byteLength" == key || "byteOffset" == key) || i(key, m)))) {
                        rows.push(key);
                    }
                }
                return rows;
            };
        },
        1705: function (mixin) {
            /**
             * @param {!Object} value
             * @param {!Object} node
             * @return {?}
             */
            mixin.exports = function (value, node) {
                /** @type {number} */
                var i = -1;
                var L = node.length;
                var count = value.length;
                for (; ++i < L;) {
                    value[count + i] = node[i];
                }
                return value;
            };
        },
        7897: function (mixin) {
            /**
             * @param {!Object} obj
             * @param {!Function} func
             * @return {?}
             */
            mixin.exports = function (obj, func) {
                /** @type {number} */
                var i = -1;
                var numPoistiveTicks = null == obj ? 0 : obj.length;
                for (; ++i < numPoistiveTicks;) {
                    if (func(obj[i], i, obj)) {
                        return true;
                    }
                }
                return false;
            };
        },
        7112: function (blob, name, dselect) {
            var a = dselect(9231);
            /**
             * @param {!Object} key
             * @param {!Function} obj
             * @return {?}
             */
            blob.exports = function (key, obj) {
                var count = key.length;
                for (; count--;) {
                    if (a(key[count][0], obj)) {
                        return count;
                    }
                }
                return -1;
            };
        },
        1986: function (blob, id, require) {
            var extend = require(1705);
            var isArray = require(3629);
            /**
             * @param {!Object} value
             * @param {!Function} fn
             * @param {!Array} handler
             * @return {?}
             */
            blob.exports = function (value, fn, handler) {
                var result = fn(value);
                return isArray(value) ? result : extend(result, handler(value));
            };
        },
        9066: function (mixin, doPost, __webpack_require__) {
            var Symbol = __webpack_require__(7197);
            var getRawTag = __webpack_require__(1587);
            var objectToString = __webpack_require__(3581);
            var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
            /**
             * @param {?} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return null == value ? void 0 === value ? "[object Undefined]" : "[object Null]" : symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
            };
        },
        4906: function (blob, name, n) {
            var h = n(9066);
            var a = n(3141);
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                return a(value) && "[object Arguments]" == h(value);
            };
        },
        1848: function (blob, name, n) {
            var r = n(3355);
            var next = n(3141);
            /**
             * @param {!Object} name
             * @param {!Function} v
             * @param {!Array} a
             * @param {!Array} b
             * @param {!Object} names
             * @return {?}
             */
            blob.exports = function cb(name, v, a, b, names) {
                return name === v || (null == name || null == v || !next(name) && !next(v) ? name !== name && v !== v : r(name, v, a, b, cb, names));
            };
        },
        3355: function (blob, id, require) {
            var Polygon = require(2854);
            var fn = require(5305);
            var debug = require(2206);
            var copy = require(8078);
            var resolve = require(8383);
            var error = require(3629);
            var isBlank = require(5174);
            var parseJSON = require(9102);
            /** @type {string} */
            var i = "[object Arguments]";
            /** @type {string} */
            var undefined = "[object Array]";
            /** @type {string} */
            var block = "[object Object]";
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} data
             * @param {!Object} e
             * @param {number} value
             * @param {!Array} name
             * @param {!Object} callback
             * @param {string} source
             * @return {?}
             */
            blob.exports = function (data, e, value, name, callback, source) {
                var err = error(data);
                var result = error(e);
                var mode = err ? undefined : resolve(data);
                var current = result ? undefined : resolve(e);
                /** @type {boolean} */
                var objIsObj = (mode = mode == i ? block : mode) == block;
                /** @type {boolean} */
                var isActive = (current = current == i ? block : current) == block;
                /** @type {boolean} */
                var hasReferenceDefs = mode == current;
                if (hasReferenceDefs && isBlank(data)) {
                    if (!isBlank(e)) {
                        return false;
                    }
                    /** @type {boolean} */
                    err = true;
                    /** @type {boolean} */
                    objIsObj = false;
                }
                if (hasReferenceDefs && !objIsObj) {
                    return source || (source = new Polygon), err || parseJSON(data) ? fn(data, e, value, name, callback, source) : debug(data, e, mode, value, name, callback, source);
                }
                if (!(1 & value)) {
                    /** @type {boolean} */
                    var err = objIsObj && hasOwnProperty.call(data, "__wrapped__");
                    /** @type {boolean} */
                    var val = isActive && hasOwnProperty.call(e, "__wrapped__");
                    if (err || val) {
                        var str = err ? data.value() : data;
                        var key = val ? e.value() : e;
                        return source || (source = new Polygon), callback(str, key, value, name, source);
                    }
                }
                return !!hasReferenceDefs && (source || (source = new Polygon), copy(data, e, value, name, callback, source));
            };
        },
        6703: function (blob, name, n) {
            var isFunction = n(4786);
            var i = n(257);
            var a = n(8092);
            var next = n(7907);
            /** @type {!RegExp} */
            var undefined = /^\[object .+?Constructor\]$/;
            var funcProto = Function.prototype;
            var ObjProto = Object.prototype;
            /** @type {function(this:!Function): string} */
            var funcToString = funcProto.toString;
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = ObjProto.hasOwnProperty;
            /** @type {!RegExp} */
            var regex = RegExp("^" + funcToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
            /**
             * @param {!Object} key
             * @return {?}
             */
            blob.exports = function (key) {
                return !(!a(key) || i(key)) && (isFunction(key) ? regex : undefined).test(next(key));
            };
        },
        8150: function (mixin, doPost, __webpack_require__) {
            var method = __webpack_require__(9066);
            var eq = __webpack_require__(4635);
            var has = __webpack_require__(3141);
            var mockAgentService = {};
            /** @type {boolean} */
            mockAgentService["[object Float32Array]"] = mockAgentService["[object Float64Array]"] = mockAgentService["[object Int8Array]"] = mockAgentService["[object Int16Array]"] = mockAgentService["[object Int32Array]"] = mockAgentService["[object Uint8Array]"] = mockAgentService["[object Uint8ClampedArray]"] = mockAgentService["[object Uint16Array]"] = mockAgentService["[object Uint32Array]"] = true;
            /** @type {boolean} */
            mockAgentService["[object Arguments]"] = mockAgentService["[object Array]"] = mockAgentService["[object ArrayBuffer]"] = mockAgentService["[object Boolean]"] = mockAgentService["[object DataView]"] = mockAgentService["[object Date]"] = mockAgentService["[object Error]"] = mockAgentService["[object Function]"] = mockAgentService["[object Map]"] = mockAgentService["[object Number]"] = mockAgentService["[object Object]"] = mockAgentService["[object RegExp]"] = mockAgentService["[object Set]"] =
                mockAgentService["[object String]"] = mockAgentService["[object WeakMap]"] = false;
            /**
             * @param {!Object} data
             * @return {?}
             */
            mixin.exports = function (data) {
                return has(data) && eq(data.length) && !!mockAgentService[method(data)];
            };
        },
        3654: function (blob, name, n) {
            var a = n(2936);
            var h = n(8836);
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                if (!a(value)) {
                    return h(value);
                }
                /** @type {!Array} */
                var t = [];
                var key;
                for (key in Object(value)) {
                    if (hasOwnProperty.call(value, key) && "constructor" != key) {
                        t.push(key);
                    }
                }
                return t;
            };
        },
        6478: function (mixin) {
            /**
             * @param {string} obj
             * @param {!Function} value
             * @return {?}
             */
            mixin.exports = function (obj, value) {
                /** @type {number} */
                var key = -1;
                /** @type {!Array} */
                var params = Array(obj);
                for (; ++key < obj;) {
                    params[key] = value(key);
                }
                return params;
            };
        },
        6194: function (mixin) {
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                return function (upOrLeft) {
                    return key(upOrLeft);
                };
            };
        },
        75: function (mixin) {
            /**
             * @param {!Object} obj
             * @param {!Function} value
             * @return {?}
             */
            mixin.exports = function (obj, value) {
                return obj.has(value);
            };
        },
        5525: function (module, metadata, packageSuccess) {
            var coreJsData = packageSuccess(7009)["__core-js_shared__"];
            module.exports = coreJsData;
        },
        5305: function (blob, name, n) {
            var p = n(692);
            var next = n(7897);
            var h = n(75);
            /**
             * @param {!Object} value
             * @param {!Object} x
             * @param {number} from
             * @param {!Array} callback
             * @param {!Object} handler
             * @param {!Object} data
             * @return {?}
             */
            blob.exports = function (value, x, from, callback, handler, data) {
                /** @type {number} */
                var exists = 1 & from;
                var i = value.length;
                var l = x.length;
                if (i != l && !(exists && l > i)) {
                    return false;
                }
                var type = data.get(value);
                var name = data.get(x);
                if (type && name) {
                    return type == x && name == value;
                }
                /** @type {number} */
                var j = -1;
                /** @type {boolean} */
                var h = true;
                var m = 2 & from ? new p : void 0;
                data.set(value, x);
                data.set(x, value);
                for (; ++j < i;) {
                    var target = value[j];
                    var filename = x[j];
                    if (callback) {
                        var newBitmap = exists ? callback(filename, target, j, x, value, data) : callback(target, filename, j, value, x, data);
                    }
                    if (void 0 !== newBitmap) {
                        if (newBitmap) {
                            continue;
                        }
                        /** @type {boolean} */
                        h = false;
                        break;
                    }
                    if (m) {
                        if (!next(x, function (node, end) {
                            if (!h(m, end) && (target === node || handler(target, node, from, callback, data))) {
                                return m.push(end);
                            }
                        })) {
                            /** @type {boolean} */
                            h = false;
                            break;
                        }
                    } else {
                        if (target !== filename && !handler(target, filename, from, callback, data)) {
                            /** @type {boolean} */
                            h = false;
                            break;
                        }
                    }
                }
                return data.delete(value), data.delete(x), h;
            };
        },
        2206: function (blob, id, require) {
            var Symbol = require(7197);
            var Buffer = require(6219);
            var eq = require(9231);
            var fn = require(5305);
            var Exchange = require(234);
            var log = require(2230);
            var symbolProto$1 = Symbol ? Symbol.prototype : void 0;
            var symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
            /**
             * @param {!Object} object
             * @param {!Object} other
             * @param {!Array} target
             * @param {number} val
             * @param {!Object} name
             * @param {string} callback
             * @param {!Object} options
             * @return {?}
             */
            blob.exports = function (object, other, target, val, name, callback, options) {
                switch (target) {
                    case "[object DataView]":
                        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;
                    case "[object ArrayBuffer]":
                        return !(object.byteLength != other.byteLength || !callback(new Buffer(object), new Buffer(other)));
                    case "[object Boolean]":
                    case "[object Date]":
                    case "[object Number]":
                        return eq(+object, +other);
                    case "[object Error]":
                        return object.name == other.name && object.message == other.message;
                    case "[object RegExp]":
                    case "[object String]":
                        return object == other + "";
                    case "[object Map]":
                        var type = Exchange;
                    case "[object Set]":
                        /** @type {number} */
                        var new_lo = 1 & val;
                        if (type || (type = log), object.size != other.size && !new_lo) {
                            return false;
                        }
                        var stacked = options.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        /** @type {number} */
                        val = val | 2;
                        options.set(object, other);
                        var result = fn(type(object), type(other), val, name, callback, options);
                        return options.delete(object), result;
                    case "[object Symbol]":
                        if (symbolValueOf) {
                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                }
                return false;
            };
        },
        8078: function (blob, name, n) {
            var a = n(8248);
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} object
             * @param {!Object} value
             * @param {number} p
             * @param {!Array} callback
             * @param {!Object} type
             * @param {!Object} fn
             * @return {?}
             */
            blob.exports = function (object, value, p, callback, type, fn) {
                /** @type {number} */
                var isPartial = 1 & p;
                var o = a(object);
                var index = o.length;
                if (index != a(value).length && !isPartial) {
                    return false;
                }
                var i = index;
                for (; i--;) {
                    var key = o[i];
                    if (!(isPartial ? key in value : hasOwnProperty.call(value, key))) {
                        return false;
                    }
                }
                var prop = fn.get(object);
                var ret = fn.get(value);
                if (prop && ret) {
                    return prop == value && ret == object;
                }
                /** @type {boolean} */
                var selfCompletionActive = true;
                fn.set(object, value);
                fn.set(value, object);
                /** @type {number} */
                var alreadyMarked = isPartial;
                for (; ++i < index;) {
                    var actual = object[key = o[i]];
                    var expected = value[key];
                    if (callback) {
                        var compared = isPartial ? callback(expected, actual, key, value, object, fn) : callback(actual, expected, key, object, value, fn);
                    }
                    if (!(void 0 === compared ? actual === expected || type(actual, expected, p, callback, fn) : compared)) {
                        /** @type {boolean} */
                        selfCompletionActive = false;
                        break;
                    }
                    if (!alreadyMarked) {
                        /** @type {boolean} */
                        alreadyMarked = "constructor" == key;
                    }
                }
                if (selfCompletionActive && !alreadyMarked) {
                    var type = object.constructor;
                    var constructor = value.constructor;
                    if (!(type == constructor || !("constructor" in object) || !("constructor" in value) || "function" == typeof type && type instanceof type && "function" == typeof constructor && constructor instanceof constructor)) {
                        /** @type {boolean} */
                        selfCompletionActive = false;
                    }
                }
                return fn.delete(object), fn.delete(value), selfCompletionActive;
            };
        },
        1032: function (module, text, cx) {
            var storeMixin = "object" == typeof cx.g && cx.g && cx.g.Object === Object && cx.g;
            module.exports = storeMixin;
        },
        8248: function (blob, name, n) {
            var next = n(1986);
            var end = n(5918);
            var i = n(2742);
            /**
             * @param {!Object} obj
             * @return {?}
             */
            blob.exports = function (obj) {
                return next(obj, i, end);
            };
        },
        2799: function (mixin, doPost, __webpack_require__) {
            var isKeyable = __webpack_require__(5964);
            /**
             * @param {!Object} value
             * @param {!Function} key
             * @return {?}
             */
            mixin.exports = function (value, key) {
                var data = value.__data__;
                return isKeyable(key) ? data["string" == typeof key ? "string" : "hash"] : data.map;
            };
        },
        8136: function (blob, id, require) {
            var isObject = require(6703);
            var f = require(40);
            /**
             * @param {!Object} key
             * @param {!Function} type
             * @return {?}
             */
            blob.exports = function (key, type) {
                var result = f(key, type);
                return isObject(result) ? result : void 0;
            };
        },
        1587: function (mixin, doPost, __webpack_require__) {
            var Symbol = __webpack_require__(7197);
            var ObjProto = Object.prototype;
            /** @type {function(this:Object, *): boolean} */
            var hasOwn = ObjProto.hasOwnProperty;
            /** @type {function(this:*): string} */
            var toString = ObjProto.toString;
            var key = Symbol ? Symbol.toStringTag : void 0;
            /**
             * @param {!Object} item
             * @return {?}
             */
            mixin.exports = function (item) {
                /** @type {boolean} */
                var groupKey = hasOwn.call(item, key);
                var index = item[key];
                try {
                    item[key] = void 0;
                    /** @type {boolean} */
                    var e = true;
                } catch (u) {
                }
                /** @type {string} */
                var t = toString.call(item);
                return e && (groupKey ? item[key] = index : delete item[key]), t;
            };
        },
        5918: function (mixin, name, require) {
            var assign = require(4903);
            var tmp = require(8174);
            /** @type {function(this:Object, string): boolean} */
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;
            /** @type {function(!Object): !Array<?>} */
            var ownSymbols = Object.getOwnPropertySymbols;
            var m = ownSymbols ? function (obj) {
                return null == obj ? [] : (obj = Object(obj), assign(ownSymbols(obj), function (key) {
                    return propIsEnumerable.call(obj, key);
                }));
            } : tmp;
            mixin.exports = m;
        },
        8383: function (u, name, n) {
            var end = n(908);
            var m = n(5797);
            var h = n(8319);
            var i = n(3924);
            var o = n(7091);
            var next = n(9066);
            var $ = n(7907);
            /** @type {string} */
            var $this = "[object Map]";
            /** @type {string} */
            var p = "[object Promise]";
            /** @type {string} */
            var s = "[object Set]";
            /** @type {string} */
            var UNDEF = "[object WeakMap]";
            /** @type {string} */
            var kid = "[object DataView]";
            var e = $(end);
            var f = $(m);
            var decimal = $(h);
            var slideDom = $(i);
            var clear = $(o);
            var hash = next;
            if (end && hash(new end(new ArrayBuffer(1))) != kid || m && hash(new m) != $this || h && hash(h.resolve()) != p || i && hash(new i) != s || o && hash(new o) != UNDEF) {
                /**
                 * @param {!Object} value
                 * @return {?}
                 */
                hash = function (value) {
                    var id = next(value);
                    var img = "[object Object]" == id ? value.constructor : void 0;
                    var type = img ? $(img) : "";
                    if (type) {
                        switch (type) {
                            case e:
                                return kid;
                            case f:
                                return $this;
                            case decimal:
                                return p;
                            case slideDom:
                                return s;
                            case clear:
                                return UNDEF;
                        }
                    }
                    return id;
                };
            }
            u.exports = hash;
        },
        40: function (mixin) {
            /**
             * @param {!Object} data
             * @param {!Function} obj
             * @return {?}
             */
            mixin.exports = function (data, obj) {
                return null == data ? void 0 : data[obj];
            };
        },
        5403: function (mixin, doPost, __webpack_require__) {
            var nativeCreate = __webpack_require__(9620);
            /**
             * @return {undefined}
             */
            mixin.exports = function () {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                /** @type {number} */
                this.size = 0;
            };
        },
        2747: function (mixin) {
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                var result = this.has(key) && delete this.__data__[key];
                return this.size -= result ? 1 : 0, result;
            };
        },
        6037: function (candidate, value, floor) {
            var startYNew = floor(9620);
            /** @type {function(this:Object, *): boolean} */
            var has = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} value
             * @return {?}
             */
            candidate.exports = function (value) {
                var data = this.__data__;
                if (startYNew) {
                    var val = data[value];
                    return "__lodash_hash_undefined__" === val ? void 0 : val;
                }
                return has.call(data, value) ? data[value] : void 0;
            };
        },
        4154: function (mixin, doPost, __webpack_require__) {
            var nativeCreate = __webpack_require__(9620);
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                var data = this.__data__;
                return nativeCreate ? void 0 !== data[key] : hasOwnProperty.call(data, key);
            };
        },
        7728: function (mixin, doPost, payloadReader) {
            var item = payloadReader(9620);
            /**
             * @param {!Object} type
             * @param {?} value
             * @return {?}
             */
            mixin.exports = function (type, value) {
                var data = this.__data__;
                return this.size += this.has(type) ? 0 : 1, data[type] = item && void 0 === value ? "__lodash_hash_undefined__" : value, this;
            };
        },
        6800: function (mixin) {
            /** @type {!RegExp} */
            var trueRE = /^(?:0|[1-9]\d*)$/;
            /**
             * @param {?} value
             * @param {?} v
             * @return {?}
             */
            mixin.exports = function (value, v) {
                /** @type {string} */
                var type = typeof value;
                return !!(v = null == v ? 9007199254740991 : v) && ("number" == type || "symbol" != type && trueRE.test(value)) && value > -1 && value % 1 == 0 && value < v;
            };
        },
        5964: function (mixin) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                /** @type {string} */
                var type = typeof obj;
                return "string" == type || "number" == type || "symbol" == type || "boolean" == type ? "__proto__" !== obj : null === obj;
            };
        },
        257: function (mixin, doPost, __webpack_require__) {
            var coreJsData = __webpack_require__(5525);
            var passphrase = function () {
                /** @type {(Array<string>|null)} */
                var mixElem = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
                return mixElem ? "Symbol(src)_1." + mixElem : "";
            }();
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                return !!passphrase && passphrase in key;
            };
        },
        2936: function (mixin) {
            var oproto = Object.prototype;
            /**
             * @param {string} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                var method = obj && obj.constructor;
                return obj === ("function" == typeof method && method.prototype || oproto);
            };
        },
        3894: function (mixin) {
            /**
             * @return {undefined}
             */
            mixin.exports = function () {
                /** @type {!Array} */
                this.__data__ = [];
                /** @type {number} */
                this.size = 0;
            };
        },
        8699: function (blob, name, hook) {
            var h = hook(7112);
            /** @type {function(this:IArrayLike<T>, *=, *=, ...T): !Array<T>} */
            var splice = Array.prototype.splice;
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                var data = this.__data__;
                var index = h(data, value);
                return !(index < 0) && (index == data.length - 1 ? data.pop() : splice.call(data, index, 1), --this.size, true);
            };
        },
        4957: function (blob, name, n) {
            var f = n(7112);
            /**
             * @param {!Object} x
             * @return {?}
             */
            blob.exports = function (x) {
                var e = this.__data__;
                var g = f(e, x);
                return g < 0 ? void 0 : e[g][1];
            };
        },
        7184: function (mixin, doPost, __webpack_require__) {
            var assocIndexOf = __webpack_require__(7112);
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                return assocIndexOf(this.__data__, key) > -1;
            };
        },
        7109: function (blob, type, nextIndex) {
            var next = nextIndex(7112);
            /**
             * @param {!Object} key
             * @param {!Function} value
             * @return {?}
             */
            blob.exports = function (key, value) {
                var data = this.__data__;
                var header = next(data, key);
                return header < 0 ? (++this.size, data.push([key, value])) : data[header][1] = value, this;
            };
        },
        4086: function (mixin, doPost, __webpack_require__) {
            var Hash = __webpack_require__(9676);
            var Handlebars = __webpack_require__(8384);
            var OtherHandlebars = __webpack_require__(5797);
            /**
             * @return {undefined}
             */
            mixin.exports = function () {
                /** @type {number} */
                this.size = 0;
                this.__data__ = {
                    hash: new Hash,
                    map: new (OtherHandlebars || Handlebars),
                    string: new Hash
                };
            };
        },
        9255: function (blob, name, dselect) {
            var a = dselect(2799);
            /**
             * @param {!Object} obj
             * @return {?}
             */
            blob.exports = function (obj) {
                var result = a(this, obj).delete(obj);
                return this.size -= result ? 1 : 0, result;
            };
        },
        9186: function (blob, name, register) {
            var find = register(2799);
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                return find(this, value).get(value);
            };
        },
        3423: function (blob, id, require) {
            var flag = require(2799);
            /**
             * @param {!Object} key
             * @return {?}
             */
            blob.exports = function (key) {
                return flag(this, key).has(key);
            };
        },
        3739: function (blob, name, dselect) {
            var a = dselect(2799);
            /**
             * @param {!Object} key
             * @param {!Function} value
             * @return {?}
             */
            blob.exports = function (key, value) {
                var v = a(this, key);
                var len = v.size;
                return v.set(key, value), this.size += v.size == len ? 0 : 1, this;
            };
        },
        234: function (mixin) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                /** @type {number} */
                var callbackCount = -1;
                /** @type {!Array} */
                var windowSizeArray = Array(obj.size);
                return obj.forEach(function (height, width) {
                    /** @type {!Array} */
                    windowSizeArray[++callbackCount] = [width, height];
                }), windowSizeArray;
            };
        },
        9620: function (module, metadata, packageSuccess) {
            var nativeCreate = packageSuccess(8136)(Object, "create");
            module.exports = nativeCreate;
        },
        8836: function (mixin, doPost, __webpack_require__) {
            var getPrototype = __webpack_require__(2709)(Object.keys, Object);
            mixin.exports = getPrototype;
        },
        9494: function (module, layer, n) {
            module = n.nmd(module);
            var h = n(1032);
            var id = layer && !layer.nodeType && layer;
            var m = id && module && !module.nodeType && module;
            var freeProcess = m && m.exports === id && h.process;
            var BinaryBundle = function () {
                try {
                    var e = m && m.require && m.require("util").types;
                    return e || freeProcess && freeProcess.binding && freeProcess.binding("util");
                } catch (t) {
                }
            }();
            module.exports = BinaryBundle;
        },
        3581: function (mixin) {
            /** @type {function(this:*): string} */
            var objectToString$2 = Object.prototype.toString;
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return objectToString$2.call(value);
            };
        },
        2709: function (mixin) {
            /**
             * @param {!Object} fn
             * @param {!Function} type
             * @return {?}
             */
            mixin.exports = function (fn, type) {
                return function (a) {
                    return fn(type(a));
                };
            };
        },
        7009: function (mixin, doPost, __webpack_require__) {
            var freeGlobal = __webpack_require__(1032);
            /** @type {(Window|boolean)} */
            var freeSelf = "object" == typeof self && self && self.Object === Object && self;
            var storeMixin = freeGlobal || freeSelf || Function("return this")();
            mixin.exports = storeMixin;
        },
        5774: function (mixin) {
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return this.__data__.set(value, "__lodash_hash_undefined__"), this;
            };
        },
        1596: function (mixin) {
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return this.__data__.has(value);
            };
        },
        2230: function (mixin) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                /** @type {number} */
                var callbackCount = -1;
                /** @type {!Array} */
                var defaultDates = Array(obj.size);
                return obj.forEach(function (i) {
                    defaultDates[++callbackCount] = i;
                }), defaultDates;
            };
        },
        511: function (mixin, doPost, __webpack_require__) {
            var ListCache = __webpack_require__(8384);
            /**
             * @return {undefined}
             */
            mixin.exports = function () {
                this.__data__ = new ListCache;
                /** @type {number} */
                this.size = 0;
            };
        },
        835: function (mixin) {
            /**
             * @param {!Object} key
             * @return {?}
             */
            mixin.exports = function (key) {
                var data = this.__data__;
                var encodedKeyOrRange = data.delete(key);
                return this.size = data.size, encodedKeyOrRange;
            };
        },
        707: function (mixin) {
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return this.__data__.get(value);
            };
        },
        8832: function (mixin) {
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                return this.__data__.has(value);
            };
        },
        5077: function (mixin, doPost, __webpack_require__) {
            var ListCache = __webpack_require__(8384);
            var _UiIcon = __webpack_require__(5797);
            var MapCache = __webpack_require__(8059);
            /**
             * @param {!Object} key
             * @param {!Function} value
             * @return {?}
             */
            mixin.exports = function (key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!_UiIcon || pairs.length < 199) {
                        return pairs.push([key, value]), this.size = ++data.size, this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                return data.set(key, value), this.size = data.size, this;
            };
        },
        7907: function (mixin) {
            /** @type {function(this:!Function): string} */
            var objectToString$2 = Function.prototype.toString;
            /**
             * @param {!Object} value
             * @return {?}
             */
            mixin.exports = function (value) {
                if (null != value) {
                    try {
                        return objectToString$2.call(value);
                    } catch (n) {
                    }
                    try {
                        return value + "";
                    } catch (n) {
                    }
                }
                return "";
            };
        },
        9231: function (mixin) {
            /**
             * @param {!Object} value
             * @param {!Function} s
             * @return {?}
             */
            mixin.exports = function (value, s) {
                return value === s || value !== value && s !== s;
            };
        },
        4963: function (mixin, name, require) {
            var matrix = require(4906);
            var isArrayLikeObject = require(3141);
            var ObjProto = Object.prototype;
            /** @type {function(this:Object, *): boolean} */
            var hasOwnProperty = ObjProto.hasOwnProperty;
            /** @type {function(this:Object, string): boolean} */
            var propertyIsEnumerable = ObjProto.propertyIsEnumerable;
            var m = matrix(function () {
                return arguments;
            }()) ? matrix : function (value) {
                return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
            };
            mixin.exports = m;
        },
        3629: function (module) {
            /** @type {function(*): boolean} */
            var isArray = Array.isArray;
            /** @type {function(*): boolean} */
            module.exports = isArray;
        },
        1473: function (blob, name, n) {
            var h = n(4786);
            var p = n(4635);
            /**
             * @param {!Object} data
             * @return {?}
             */
            blob.exports = function (data) {
                return null != data && p(data.length) && !h(data);
            };
        },
        5174: function (module, exports, require) {
            module = require.nmd(module);
            var Commands = require(7009);
            var end = require(9488);
            var freeExports = exports && !exports.nodeType && exports;
            var freeModule = freeExports && module && !module.nodeType && module;
            var Buffer = freeModule && freeModule.exports === freeExports ? Commands.Buffer : void 0;
            var respond = (Buffer ? Buffer.isBuffer : void 0) || end;
            module.exports = respond;
        },
        8111: function (blob, name, hook) {
            var h = hook(1848);
            /**
             * @param {!Object} value
             * @param {!Function} data
             * @return {?}
             */
            blob.exports = function (value, data) {
                return h(value, data);
            };
        },
        4786: function (blob, name, n) {
            var a = n(9066);
            var h = n(8092);
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                if (!h(value)) {
                    return false;
                }
                var f = a(value);
                return "[object Function]" == f || "[object GeneratorFunction]" == f || "[object AsyncFunction]" == f || "[object Proxy]" == f;
            };
        },
        4635: function (mixin) {
            /**
             * @param {string} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                return "number" == typeof obj && obj > -1 && obj % 1 == 0 && obj <= 9007199254740991;
            };
        },
        8092: function (mixin) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                /** @type {string} */
                var type = typeof obj;
                return null != obj && ("object" == type || "function" == type);
            };
        },
        3141: function (mixin) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            mixin.exports = function (obj) {
                return null != obj && "object" == typeof obj;
            };
        },
        9102: function (mixin, doPost, __webpack_require__) {
            var tmp = __webpack_require__(8150);
            var resolve = __webpack_require__(6194);
            var nodeUtil = __webpack_require__(9494);
            var id = nodeUtil && nodeUtil.isTypedArray;
            var m = id ? resolve(id) : tmp;
            mixin.exports = m;
        },
        2742: function (blob, id, require) {
            var flatten = require(7538);
            var extend = require(3654);
            var isArray = require(1473);
            /**
             * @param {!Object} value
             * @return {?}
             */
            blob.exports = function (value) {
                return isArray(value) ? flatten(value) : extend(value);
            };
        },
        8174: function (mixin) {
            /**
             * @return {?}
             */
            mixin.exports = function () {
                return [];
            };
        },
        9488: function (mixin) {
            /**
             * @return {?}
             */
            mixin.exports = function () {
                return false;
            };
        },
        4463: function (React, ReactDOM, _dereq_) {
            /**
             * @param {number} listener
             * @return {?}
             */
            function call(listener) {
                /** @type {string} */
                var msg = "https://reactjs.org/docs/error-decoder.html?invariant=" + listener;
                /** @type {number} */
                var i = 1;
                for (; i < arguments.length; i++) {
                    /** @type {string} */
                    msg = msg + ("&args[]=" + encodeURIComponent(arguments[i]));
                }
                return "Minified React error #" + listener + "; visit " + msg + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
            }
            /**
             * @param {string} key
             * @param {!Array} data
             * @return {undefined}
             */
            function event(key, data) {
                warn(key, data);
                warn(key + "Capture", data);
            }
            /**
             * @param {?} key
             * @param {?} v
             * @return {undefined}
             */
            function warn(key, v) {
                l[key] = v;
                /** @type {number} */
                key = 0;
                for (; key < v.length; key++) {
                    ids.add(v[key]);
                }
            }
            /**
             * @param {string} prop
             * @param {number} type
             * @param {?} event
             * @param {string} screen
             * @param {string} visual
             * @param {?} prefix
             * @param {?} charsetName
             * @return {undefined}
             */
            function ProjectionPlan(prop, type, event, screen, visual, prefix, charsetName) {
                /** @type {boolean} */
                this.acceptsBooleans = 2 === type || 3 === type || 4 === type;
                /** @type {string} */
                this.attributeName = screen;
                /** @type {string} */
                this.attributeNamespace = visual;
                this.mustUseProperty = event;
                /** @type {string} */
                this.propertyName = prop;
                /** @type {number} */
                this.type = type;
                this.sanitizeURL = prefix;
                this.removeEmptyString = charsetName;
            }
            /**
             * @param {!Object} result
             * @return {?}
             */
            function k(result) {
                return result[1].toUpperCase();
            }
            /**
             * @param {!Object} node
             * @param {string} name
             * @param {?} value
             * @param {string} n
             * @return {undefined}
             */
            function handler(node, name, value, n) {
                var self = args.hasOwnProperty(name) ? args[name] : null;
                if (null !== self ? 0 !== self.type : n || !(2 < name.length) || "o" !== name[0] && "O" !== name[0] || "n" !== name[1] && "N" !== name[1]) {
                    if (function (aMetaName, val, srv, df1) {
                        if (null === val || "undefined" === typeof val || function (s, val, srv, y) {
                            if (null !== srv && 0 === srv.type) {
                                return false;
                            }
                            switch (typeof val) {
                                case "function":
                                case "symbol":
                                    return true;
                                case "boolean":
                                    return !y && (null !== srv ? !srv.acceptsBooleans : "data-" !== (s = s.toLowerCase().slice(0, 5)) && "aria-" !== s);
                                default:
                                    return false;
                            }
                        }(aMetaName, val, srv, df1)) {
                            return true;
                        }
                        if (df1) {
                            return false;
                        }
                        if (null !== srv) {
                            switch (srv.type) {
                                case 3:
                                    return !val;
                                case 4:
                                    return false === val;
                                case 5:
                                    return isNaN(val);
                                case 6:
                                    return isNaN(val) || 1 > val;
                            }
                        }
                        return false;
                    }(name, value, self, n)) {
                        /** @type {null} */
                        value = null;
                    }
                    if (n || null === self) {
                        if (function (c) {
                            return !!util.call(p, c) || !util.call(selectorValue, c) && (matchLetter.test(c) ? p[c] = true : (selectorValue[c] = true, false));
                        }(name)) {
                            if (null === value) {
                                node.removeAttribute(name);
                            } else {
                                node.setAttribute(name, "" + value);
                            }
                        }
                    } else {
                        if (self.mustUseProperty) {
                            node[self.propertyName] = null === value ? 3 !== self.type && "" : value;
                        } else {
                            name = self.attributeName;
                            n = self.attributeNamespace;
                            if (null === value) {
                                node.removeAttribute(name);
                            } else {
                                /** @type {string} */
                                value = 3 === (self = self.type) || 4 === self && true === value ? "" : "" + value;
                                if (n) {
                                    node.setAttributeNS(n, name, value);
                                } else {
                                    node.setAttribute(name, value);
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function isUndefined(value) {
                return null === value || "object" !== typeof value ? null : "function" === typeof (value = iteratorSymbol && value[iteratorSymbol] || value["@@iterator"]) ? value : null;
            }
            /**
             * @param {string} data
             * @return {?}
             */
            function each(data) {
                if (void 0 === room) {
                    try {
                        throw Error();
                    } catch (props) {
                        var rfl = props.stack.trim().match(/\n( *(at )?)/);
                        room = rfl && rfl[1] || "";
                    }
                }
                return "\n" + room + data;
            }
            /**
             * @param {!Object} data
             * @param {!Function} fn
             * @return {?}
             */
            function register(data, fn) {
                if (!data || evaluatedScripts) {
                    return "";
                }
                /** @type {boolean} */
                evaluatedScripts = true;
                var original = Error.prepareStackTrace;
                Error.prepareStackTrace = void 0;
                try {
                    if (fn) {
                        if (fn = function () {
                            throw Error();
                        }, Object.defineProperty(fn.prototype, "props", {
                            set: function () {
                                throw Error();
                            }
                        }), "object" === typeof Reflect && Reflect.construct) {
                            try {
                                Reflect.construct(fn, []);
                            } catch (someMessage) {
                                var msg = someMessage;
                            }
                            Reflect.construct(data, [], fn);
                        } else {
                            try {
                                fn.call();
                            } catch (quitedTooFastString) {
                                msg = quitedTooFastString;
                            }
                            data.call(fn.prototype);
                        }
                    } else {
                        try {
                            throw Error();
                        } catch (quitedTooFastString) {
                            msg = quitedTooFastString;
                        }
                        data();
                    }
                } catch (err) {
                    if (err && msg && "string" === typeof err.stack) {
                        /** @type {!Array<string>} */
                        var components = err.stack.split("\n");
                        var parts = msg.stack.split("\n");
                        /** @type {number} */
                        var i = components.length - 1;
                        /** @type {number} */
                        var j = parts.length - 1;
                        for (; 1 <= i && 0 <= j && components[i] !== parts[j];) {
                            j--;
                        }
                        for (; 1 <= i && 0 <= j; i--, j--) {
                            if (components[i] !== parts[j]) {
                                if (1 !== i || 1 !== j) {
                                    do {
                                        if (i--, 0 > --j || components[i] !== parts[j]) {
                                            /** @type {string} */
                                            var res = "\n" + components[i].replace(" at new ", " at ");
                                            return data.displayName && res.includes("<anonymous>") && (res = res.replace("<anonymous>", data.displayName)), res;
                                        }
                                    } while (1 <= i && 0 <= j);
                                }
                                break;
                            }
                        }
                    }
                } finally {
                    /** @type {boolean} */
                    evaluatedScripts = false;
                    Error.prepareStackTrace = original;
                }
                return (data = data ? data.displayName || data.name : "") ? each(data) : "";
            }
            /**
             * @param {!Object} o
             * @return {?}
             */
            function join(o) {
                switch (o.tag) {
                    case 5:
                        return each(o.type);
                    case 16:
                        return each("Lazy");
                    case 13:
                        return each("Suspense");
                    case 19:
                        return each("SuspenseList");
                    case 0:
                    case 2:
                    case 15:
                        return o = register(o.type, false);
                    case 11:
                        return o = register(o.type.render, false);
                    case 1:
                        return o = register(o.type, true);
                    default:
                        return "";
                }
            }
            /**
             * @param {!Object} a
             * @return {?}
             */
            function toArray(a) {
                if (null == a) {
                    return null;
                }
                if ("function" === typeof a) {
                    return a.displayName || a.name || null;
                }
                if ("string" === typeof a) {
                    return a;
                }
                switch (a) {
                    case string:
                        return "Fragment";
                    case array:
                        return "Portal";
                    case searchParams:
                        return "Profiler";
                    case D:
                        return "StrictMode";
                    case tempMatch:
                        return "Suspense";
                    case colors:
                        return "SuspenseList";
                }
                if ("object" === typeof a) {
                    switch (a.$$typeof) {
                        case togglelayer:
                            return (a.displayName || "Context") + ".Consumer";
                        case Bite:
                            return (a._context.displayName || "Context") + ".Provider";
                        case toggle_mute_video:
                            var p = a.render;
                            return (a = a.displayName) || (a = "" !== (a = p.displayName || p.name || "") ? "ForwardRef(" + a + ")" : "ForwardRef"), a;
                        case random:
                            return null !== (p = a.displayName || null) ? p : toArray(a.type) || "Memo";
                        case vega:
                            p = a._payload;
                            a = a._init;
                            try {
                                return toArray(a(p));
                            } catch (n) {
                            }
                    }
                }
                return null;
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function getData(value) {
                var data = value.type;
                switch (value.tag) {
                    case 24:
                        return "Cache";
                    case 9:
                        return (data.displayName || "Context") + ".Consumer";
                    case 10:
                        return (data._context.displayName || "Context") + ".Provider";
                    case 18:
                        return "DehydratedFragment";
                    case 11:
                        return value = (value = data.render).displayName || value.name || "", data.displayName || ("" !== value ? "ForwardRef(" + value + ")" : "ForwardRef");
                    case 7:
                        return "Fragment";
                    case 5:
                        return data;
                    case 4:
                        return "Portal";
                    case 3:
                        return "Root";
                    case 6:
                        return "Text";
                    case 16:
                        return toArray(data);
                    case 8:
                        return data === D ? "StrictMode" : "Mode";
                    case 22:
                        return "Offscreen";
                    case 12:
                        return "Profiler";
                    case 21:
                        return "Scope";
                    case 13:
                        return "Suspense";
                    case 19:
                        return "SuspenseList";
                    case 25:
                        return "TracingMarker";
                    case 1:
                    case 0:
                    case 17:
                    case 2:
                    case 14:
                    case 15:
                        if ("function" === typeof data) {
                            return data.displayName || data.name || null;
                        }
                        if ("string" === typeof data) {
                            return data;
                        }
                }
                return null;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            function stringify(value) {
                switch (typeof value) {
                    case "boolean":
                    case "number":
                    case "string":
                    case "undefined":
                    case "object":
                        return value;
                    default:
                        return "";
                }
            }
            /**
             * @param {!Object} element
             * @return {?}
             */
            function setValue(element) {
                var type = element.type;
                return (element = element.nodeName) && "input" === element.toLowerCase() && ("checkbox" === type || "radio" === type);
            }
            /**
             * @param {!Object} obj
             * @return {undefined}
             */
            function extend(obj) {
                if (!obj._valueTracker) {
                    obj._valueTracker = function (d) {
                        /** @type {string} */
                        var i = setValue(d) ? "checked" : "value";
                        /** @type {(ObjectPropertyDescriptor<?>|undefined)} */
                        var descriptor = Object.getOwnPropertyDescriptor(d.constructor.prototype, i);
                        var result = "" + d[i];
                        if (!d.hasOwnProperty(i) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
                            var retriever = descriptor.get;
                            var previousSet = descriptor.set;
                            return Object.defineProperty(d, i, {
                                configurable: true,
                                get: function () {
                                    return retriever.call(this);
                                },
                                set: function (value) {
                                    /** @type {string} */
                                    result = "" + value;
                                    previousSet.call(this, value);
                                }
                            }), Object.defineProperty(d, i, {
                                enumerable: descriptor.enumerable
                            }), {
                                getValue: function () {
                                    return result;
                                },
                                setValue: function (value) {
                                    /** @type {string} */
                                    result = "" + value;
                                },
                                stopTracking: function () {
                                    /** @type {null} */
                                    d._valueTracker = null;
                                    delete d[i];
                                }
                            };
                        }
                    }(obj);
                }
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function go(node) {
                if (!node) {
                    return false;
                }
                var t = node._valueTracker;
                if (!t) {
                    return true;
                }
                var tail = t.getValue();
                /** @type {string} */
                var key = "";
                return node && (key = setValue(node) ? node.checked ? "true" : "false" : node.value), (node = key) !== tail && (t.setValue(node), true);
            }
            /**
             * @param {!Object} doc
             * @return {?}
             */
            function getActiveElement(doc) {
                if ("undefined" === typeof (doc = doc || ("undefined" !== typeof document ? document : void 0))) {
                    return null;
                }
                try {
                    return doc.activeElement || doc.body;
                } catch (t) {
                    return doc.body;
                }
            }
            /**
             * @param {!Object} node
             * @param {!Object} obj
             * @return {?}
             */
            function getChild(node, obj) {
                var value = obj.checked;
                return assign({}, obj, {
                    defaultChecked: void 0,
                    defaultValue: void 0,
                    value: void 0,
                    checked: null != value ? value : node._wrapperState.initialChecked
                });
            }
            /**
             * @param {!Object} node
             * @param {!Object} elem
             * @return {undefined}
             */
            function fixNode(node, elem) {
                var val = null == elem.defaultValue ? "" : elem.defaultValue;
                var r = null != elem.checked ? elem.checked : elem.defaultChecked;
                val = stringify(null != elem.value ? elem.value : val);
                node._wrapperState = {
                    initialChecked: r,
                    initialValue: val,
                    controlled: "checkbox" === elem.type || "radio" === elem.type ? null != elem.checked : null != elem.value
                };
            }
            /**
             * @param {!Object} el
             * @param {!Object} node
             * @return {undefined}
             */
            function getScopeIdentity(el, node) {
                if (null != (node = node.checked)) {
                    handler(el, "checked", node, false);
                }
            }
            /**
             * @param {!Object} node
             * @param {!Object} item
             * @return {?}
             */
            function search(node, item) {
                getScopeIdentity(node, item);
                var value = stringify(item.value);
                var type = item.type;
                if (null != value) {
                    if ("number" === type) {
                        if (0 === value && "" === node.value || node.value != value) {
                            /** @type {string} */
                            node.value = "" + value;
                        }
                    } else {
                        if (node.value !== "" + value) {
                            /** @type {string} */
                            node.value = "" + value;
                        }
                    }
                } else {
                    if ("submit" === type || "reset" === type) {
                        return void node.removeAttribute("value");
                    }
                }
                if (item.hasOwnProperty("value")) {
                    reduce(node, item.type, value);
                } else {
                    if (item.hasOwnProperty("defaultValue")) {
                        reduce(node, item.type, stringify(item.defaultValue));
                    }
                }
                if (null == item.checked && null != item.defaultChecked) {
                    /** @type {boolean} */
                    node.defaultChecked = !!item.defaultChecked;
                }
            }
            /**
             * @param {!Object} input
             * @param {?} value
             * @param {string} title
             * @return {undefined}
             */
            function addField(input, value, title) {
                if (value.hasOwnProperty("value") || value.hasOwnProperty("defaultValue")) {
                    var name = value.type;
                    if (!("submit" !== name && "reset" !== name || void 0 !== value.value && null !== value.value)) {
                        return;
                    }
                    /** @type {string} */
                    value = "" + input._wrapperState.initialValue;
                    if (!(title || value === input.value)) {
                        /** @type {string} */
                        input.value = value;
                    }
                    /** @type {string} */
                    input.defaultValue = value;
                }
                if ("" !== (title = input.name)) {
                    /** @type {string} */
                    input.name = "";
                }
                /** @type {boolean} */
                input.defaultChecked = !!input._wrapperState.initialChecked;
                if ("" !== title) {
                    /** @type {string} */
                    input.name = title;
                }
            }
            /**
             * @param {!Object} node
             * @param {string} type
             * @param {string} value
             * @return {undefined}
             */
            function reduce(node, type, value) {
                if (!("number" === type && getActiveElement(node.ownerDocument) === node)) {
                    if (null == value) {
                        /** @type {string} */
                        node.defaultValue = "" + node._wrapperState.initialValue;
                    } else {
                        if (node.defaultValue !== "" + value) {
                            /** @type {string} */
                            node.defaultValue = "" + value;
                        }
                    }
                }
            }
            /**
             * @param {!Object} o
             * @param {?} n
             * @param {?} k
             * @param {number} a
             * @return {?}
             */
            function wrap(o, n, k, a) {
                if (o = o.options, n) {
                    n = {};
                    /** @type {number} */
                    var i = 0;
                    for (; i < k.length; i++) {
                        /** @type {boolean} */
                        n["$" + k[i]] = true;
                    }
                    /** @type {number} */
                    k = 0;
                    for (; k < o.length; k++) {
                        /** @type {boolean} */
                        i = n.hasOwnProperty("$" + o[k].value);
                        if (o[k].selected !== i) {
                            /** @type {boolean} */
                            o[k].selected = i;
                        }
                        if (i && a) {
                            /** @type {boolean} */
                            o[k].defaultSelected = true;
                        }
                    }
                } else {
                    /** @type {string} */
                    k = "" + stringify(k);
                    /** @type {null} */
                    n = null;
                    /** @type {number} */
                    i = 0;
                    for (; i < o.length; i++) {
                        if (o[i].value === k) {
                            return o[i].selected = true, void (a && (o[i].defaultSelected = true));
                        }
                        if (!(null !== n || o[i].disabled)) {
                            n = o[i];
                        }
                    }
                    if (null !== n) {
                        /** @type {boolean} */
                        n.selected = true;
                    }
                }
            }
            /**
             * @param {!Object} node
             * @param {!Object} props
             * @return {?}
             */
            function del(node, props) {
                if (null != props.dangerouslySetInnerHTML) {
                    throw Error(call(91));
                }
                return assign({}, props, {
                    value: void 0,
                    defaultValue: void 0,
                    children: "" + node._wrapperState.initialValue
                });
            }
            /**
             * @param {!Object} node
             * @param {!Object} value
             * @return {undefined}
             */
            function open(node, value) {
                var i = value.value;
                if (null == i) {
                    if (i = value.children, value = value.defaultValue, null != i) {
                        if (null != value) {
                            throw Error(call(92));
                        }
                        if (isFunction(i)) {
                            if (1 < i.length) {
                                throw Error(call(93));
                            }
                            i = i[0];
                        }
                        value = i;
                    }
                    if (null == value) {
                        /** @type {string} */
                        value = "";
                    }
                    /** @type {!Object} */
                    i = value;
                }
                node._wrapperState = {
                    initialValue: stringify(i)
                };
            }
            /**
             * @param {!Object} el
             * @param {!Object} e
             * @return {undefined}
             */
            function drawHorizontalChampion(el, e) {
                var value = stringify(e.value);
                var html = stringify(e.defaultValue);
                if (null != value) {
                    if ((value = "" + value) !== el.value) {
                        /** @type {string} */
                        el.value = value;
                    }
                    if (null == e.defaultValue && el.defaultValue !== value) {
                        /** @type {string} */
                        el.defaultValue = value;
                    }
                }
                if (null != html) {
                    /** @type {string} */
                    el.defaultValue = "" + html;
                }
            }
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            function changeHandler(e) {
                var value = e.textContent;
                if (value === e._wrapperState.initialValue && "" !== value && null !== value) {
                    e.value = value;
                }
            }
            /**
             * @param {!Object} type
             * @return {?}
             */
            function all(type) {
                switch (type) {
                    case "svg":
                        return "http://www.w3.org/2000/svg";
                    case "math":
                        return "http://www.w3.org/1998/Math/MathML";
                    default:
                        return "http://www.w3.org/1999/xhtml";
                }
            }
            /**
             * @param {string} c
             * @param {string} d
             * @return {?}
             */
            function execute(c, d) {
                return null == c || "http://www.w3.org/1999/xhtml" === c ? all(d) : "http://www.w3.org/2000/svg" === c && "foreignObject" === d ? "http://www.w3.org/1999/xhtml" : c;
            }
            /**
             * @param {!HTMLElement} element
             * @param {string} value
             * @return {?}
             */
            function setTextContent(element, value) {
                if (value) {
                    var node = element.firstChild;
                    if (node && node === element.lastChild && 3 === node.nodeType) {
                        return void (node.nodeValue = value);
                    }
                }
                /** @type {string} */
                element.textContent = value;
            }
            /**
             * @param {string} key
             * @param {string} value
             * @param {string} regexp
             * @return {?}
             */
            function traverse(key, value, regexp) {
                return null == value || "boolean" === typeof value || "" === value ? "" : regexp || "number" !== typeof value || 0 === value || options.hasOwnProperty(key) && options[key] ? ("" + value).trim() : value + "px";
            }
            /**
             * @param {!Object} obj
             * @param {!Object} element
             * @return {undefined}
             */
            function style(obj, element) {
                var key;
                for (key in obj = obj.style, element) {
                    if (element.hasOwnProperty(key)) {
                        /** @type {boolean} */
                        var t = 0 === key.indexOf("--");
                        var result = traverse(key, element[key], t);
                        if ("float" === key) {
                            /** @type {string} */
                            key = "cssFloat";
                        }
                        if (t) {
                            obj.setProperty(key, result);
                        } else {
                            obj[key] = result;
                        }
                    }
                }
            }
            /**
             * @param {!Object} name
             * @param {!Object} props
             * @return {undefined}
             */
            function css(name, props) {
                if (props) {
                    if (minimizeOptions[name] && (null != props.children || null != props.dangerouslySetInnerHTML)) {
                        throw Error(call(137, name));
                    }
                    if (null != props.dangerouslySetInnerHTML) {
                        if (null != props.children) {
                            throw Error(call(60));
                        }
                        if ("object" !== typeof props.dangerouslySetInnerHTML || !("__html" in props.dangerouslySetInnerHTML)) {
                            throw Error(call(61));
                        }
                    }
                    if (null != props.style && "object" !== typeof props.style) {
                        throw Error(call(62));
                    }
                }
            }
            /**
             * @param {!Array} type
             * @param {!Object} c
             * @return {?}
             */
            function factory(type, c) {
                if (-1 === type.indexOf("-")) {
                    return "string" === typeof c.is;
                }
                switch (type) {
                    case "annotation-xml":
                    case "color-profile":
                    case "font-face":
                    case "font-face-src":
                    case "font-face-uri":
                    case "font-face-format":
                    case "font-face-name":
                    case "missing-glyph":
                        return false;
                    default:
                        return true;
                }
            }
            /**
             * @param {!Object} e
             * @return {?}
             */
            function getEventTarget(e) {
                return (e = e.target || e.srcElement || window).correspondingUseElement && (e = e.correspondingUseElement), 3 === e.nodeType ? e.parentNode : e;
            }
            /**
             * @param {!Object} data
             * @return {undefined}
             */
            function handleEvent(data) {
                if (data = prop(data)) {
                    if ("function" !== typeof setup) {
                        throw Error(call(280));
                    }
                    var span = data.stateNode;
                    if (span) {
                        span = close(span);
                        setup(data.stateNode, data.type, span);
                    }
                }
            }
            /**
             * @param {string} error
             * @return {undefined}
             */
            function getVersion(error) {
                if (fault) {
                    if (errors) {
                        errors.push(error);
                    } else {
                        /** @type {!Array} */
                        errors = [error];
                    }
                } else {
                    /** @type {string} */
                    fault = error;
                }
            }
            /**
             * @return {undefined}
             */
            function invoke() {
                if (fault) {
                    var i = fault;
                    var json = errors;
                    if (errors = fault = null, handleEvent(i), json) {
                        /** @type {number} */
                        i = 0;
                        for (; i < json.length; i++) {
                            handleEvent(json[i]);
                        }
                    }
                }
            }
            /**
             * @param {!Function} callback
             * @param {!Array} arg
             * @return {?}
             */
            function sort(callback, arg) {
                return callback(arg);
            }
            /**
             * @return {undefined}
             */
            function inline() {
            }
            /**
             * @param {!Function} fn
             * @param {!Array} url
             * @param {?} next
             * @return {?}
             */
            function process(fn, url, next) {
                if (Me) {
                    return fn(url, next);
                }
                /** @type {boolean} */
                Me = true;
                try {
                    return sort(fn, url, next);
                } finally {
                    /** @type {boolean} */
                    Me = false;
                    if (null !== fault || null !== errors) {
                        inline();
                        invoke();
                    }
                }
            }
            /**
             * @param {!Object} node
             * @param {string} name
             * @return {?}
             */
            function loop(node, name) {
                var object = node.stateNode;
                if (null === object) {
                    return null;
                }
                var handler = close(object);
                if (null === handler) {
                    return null;
                }
                object = handler[name];
                e: {
                    switch (name) {
                        case "onClick":
                        case "onClickCapture":
                        case "onDoubleClick":
                        case "onDoubleClickCapture":
                        case "onMouseDown":
                        case "onMouseDownCapture":
                        case "onMouseMove":
                        case "onMouseMoveCapture":
                        case "onMouseUp":
                        case "onMouseUpCapture":
                        case "onMouseEnter":
                            if (!(handler = !handler.disabled)) {
                                /** @type {boolean} */
                                handler = !("button" === (node = node.type) || "input" === node || "select" === node || "textarea" === node);
                            }
                            /** @type {boolean} */
                            node = !handler;
                            break e;
                        default:
                            /** @type {boolean} */
                            node = false;
                    }
                }
                if (node) {
                    return null;
                }
                if (object && "function" !== typeof object) {
                    throw Error(call(231, name, typeof object));
                }
                return object;
            }
            /**
             * @param {?} event
             * @param {!Function} t
             * @param {?} n
             * @param {?} rows
             * @param {?} width
             * @param {?} locale
             * @param {?} callback
             * @param {?} processors
             * @param {?} value
             * @return {undefined}
             */
            function handle(event, t, n, rows, width, locale, callback, processors, value) {
                /** @type {!Array<?>} */
                var cmd_args = Array.prototype.slice.call(arguments, 3);
                try {
                    t.apply(n, cmd_args);
                } catch (xhr) {
                    this.onError(xhr);
                }
            }
            /**
             * @param {?} v
             * @param {?} minlist
             * @param {?} n
             * @param {?} froot
             * @param {?} fext
             * @param {?} params
             * @param {?} log_post
             * @param {?} data
             * @param {?} linkedEntities
             * @return {undefined}
             */
            function $fz(v, minlist, n, froot, fext, params, log_post, data, linkedEntities) {
                /** @type {boolean} */
                _dispatch = false;
                /** @type {null} */
                active = null;
                handle.apply(bc, arguments);
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function parseInt(value) {
                /** @type {!Object} */
                var node = value;
                /** @type {!Object} */
                var assignee = value;
                if (value.alternate) {
                    for (; node.return;) {
                        node = node.return;
                    }
                } else {
                    value = node;
                    do {
                        if (0 !== (4098 & (node = value).flags)) {
                            assignee = node.return;
                        }
                        value = node.return;
                    } while (value);
                }
                return 3 === node.tag ? assignee : null;
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function escape(node) {
                if (13 === node.tag) {
                    var locTexture = node.memoizedState;
                    if (null === locTexture && (null !== (node = node.alternate) && (locTexture = node.memoizedState)), null !== locTexture) {
                        return locTexture.dehydrated;
                    }
                }
                return null;
            }
            /**
             * @param {!Object} val
             * @return {undefined}
             */
            function exec(val) {
                if (parseInt(val) !== val) {
                    throw Error(call(188));
                }
            }
            /**
             * @param {?} obj
             * @return {?}
             */
            function iterate(obj) {
                return null !== (obj = function (x) {
                    var y = x.alternate;
                    if (!y) {
                        if (null === (y = parseInt(x))) {
                            throw Error(call(188));
                        }
                        return y !== x ? null : x;
                    }
                    /** @type {!Object} */
                    var item = x;
                    var value = y;
                    for (; ;) {
                        var current = item.return;
                        if (null === current) {
                            break;
                        }
                        var node = current.alternate;
                        if (null === node) {
                            if (null !== (value = current.return)) {
                                item = value;
                                continue;
                            }
                            break;
                        }
                        if (current.child === node.child) {
                            node = current.child;
                            for (; node;) {
                                if (node === item) {
                                    return exec(current), x;
                                }
                                if (node === value) {
                                    return exec(current), y;
                                }
                                node = node.sibling;
                            }
                            throw Error(call(188));
                        }
                        if (item.return !== value.return) {
                            item = current;
                            value = node;
                        } else {
                            /** @type {boolean} */
                            var l = false;
                            var child = current.child;
                            for (; child;) {
                                if (child === item) {
                                    /** @type {boolean} */
                                    l = true;
                                    item = current;
                                    value = node;
                                    break;
                                }
                                if (child === value) {
                                    /** @type {boolean} */
                                    l = true;
                                    value = current;
                                    item = node;
                                    break;
                                }
                                child = child.sibling;
                            }
                            if (!l) {
                                child = node.child;
                                for (; child;) {
                                    if (child === item) {
                                        /** @type {boolean} */
                                        l = true;
                                        item = node;
                                        value = current;
                                        break;
                                    }
                                    if (child === value) {
                                        /** @type {boolean} */
                                        l = true;
                                        value = node;
                                        item = current;
                                        break;
                                    }
                                    child = child.sibling;
                                }
                                if (!l) {
                                    throw Error(call(189));
                                }
                            }
                        }
                        if (item.alternate !== value) {
                            throw Error(call(190));
                        }
                    }
                    if (3 !== item.tag) {
                        throw Error(call(188));
                    }
                    return item.stateNode.current === item ? x : y;
                }(obj)) ? diff(obj) : null;
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function diff(node) {
                if (5 === node.tag || 6 === node.tag) {
                    return node;
                }
                node = node.child;
                for (; null !== node;) {
                    var result = diff(node);
                    if (null !== result) {
                        return result;
                    }
                    node = node.sibling;
                }
                return null;
            }
            /**
             * @param {number} n
             * @return {?}
             */
            function floor(n) {
                switch (n & -n) {
                    case 1:
                        return 1;
                    case 2:
                        return 2;
                    case 4:
                        return 4;
                    case 8:
                        return 8;
                    case 16:
                        return 16;
                    case 32:
                        return 32;
                    case 64:
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                        return 4194240 & n;
                    case 4194304:
                    case 8388608:
                    case 16777216:
                    case 33554432:
                    case 67108864:
                        return 130023424 & n;
                    case 134217728:
                        return 134217728;
                    case 268435456:
                        return 268435456;
                    case 536870912:
                        return 536870912;
                    case 1073741824:
                        return 1073741824;
                    default:
                        return n;
                }
            }
            /**
             * @param {!Object} t
             * @param {number} c
             * @return {?}
             */
            function serialize(t, c) {
                var type = t.pendingLanes;
                if (0 === type) {
                    return 0;
                }
                /** @type {number} */
                var result = 0;
                var d = t.suspendedLanes;
                var a = t.pingedLanes;
                /** @type {number} */
                var b = 268435455 & type;
                if (0 !== b) {
                    /** @type {number} */
                    var type = b & ~d;
                    if (0 !== type) {
                        result = floor(type);
                    } else {
                        if (0 !== (a = a & b)) {
                            result = floor(a);
                        }
                    }
                } else {
                    if (0 !== (b = type & ~d)) {
                        result = floor(b);
                    } else {
                        if (0 !== a) {
                            result = floor(a);
                        }
                    }
                }
                if (0 === result) {
                    return 0;
                }
                if (0 !== c && c !== result && 0 === (c & d) && ((d = result & -result) >= (a = c & -c) || 16 === d && 0 !== (4194240 & a))) {
                    return c;
                }
                if (0 !== (4 & result) && (result = result | 16 & type), 0 !== (c = t.entangledLanes)) {
                    t = t.entanglements;
                    /** @type {number} */
                    c = c & result;
                    for (; 0 < c;) {
                        /** @type {number} */
                        d = 1 << (type = 31 - isArray(c));
                        /** @type {number} */
                        result = result | t[type];
                        /** @type {number} */
                        c = c & ~d;
                    }
                }
                return result;
            }
            /**
             * @param {number} bytes
             * @param {number} value
             * @return {?}
             */
            function parseFloat(bytes, value) {
                switch (bytes) {
                    case 1:
                    case 2:
                    case 4:
                        return value + 250;
                    case 8:
                    case 16:
                    case 32:
                    case 64:
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                        return value + 5E3;
                    default:
                        return -1;
                }
            }
            /**
             * @param {number} data
             * @return {?}
             */
            function unpack(data) {
                return 0 !== (data = -1073741825 & data.pendingLanes) ? data : 1073741824 & data ? 1073741824 : 0;
            }
            /**
             * @return {?}
             */
            function min() {
                var whatToScale = height;
                return 0 === (4194240 & (height = height << 1)) && (height = 64), whatToScale;
            }
            /**
             * @param {?} name
             * @return {?}
             */
            function _parseName(name) {
                /** @type {!Array} */
                var rval = [];
                /** @type {number} */
                var n = 0;
                for (; 31 > n; n++) {
                    rval.push(name);
                }
                return rval;
            }
            /**
             * @param {!Object} base
             * @param {number} name
             * @param {?} str
             * @return {undefined}
             */
            function write(base, name, str) {
                base.pendingLanes |= name;
                if (536870912 !== name) {
                    /** @type {number} */
                    base.suspendedLanes = 0;
                    /** @type {number} */
                    base.pingedLanes = 0;
                }
                (base = base.eventTimes)[name = 31 - isArray(name)] = str;
            }
            /**
             * @param {number} data
             * @param {number} key
             * @return {undefined}
             */
            function isValid(data, key) {
                /** @type {number} */
                var b = data.entangledLanes |= key;
                data = data.entanglements;
                for (; b;) {
                    /** @type {number} */
                    var uniqueID = 31 - isArray(b);
                    /** @type {number} */
                    var c = 1 << uniqueID;
                    if (c & key | data[uniqueID] & key) {
                        data[uniqueID] |= key;
                    }
                    /** @type {number} */
                    b = b & ~c;
                }
            }
            /**
             * @param {number} s
             * @return {?}
             */
            function puts(s) {
                return 1 < (s = s & -s) ? 4 < s ? 0 !== (268435455 & s) ? 16 : 536870912 : 4 : 1;
            }
            /**
             * @param {!Object} option
             * @param {!Object} data
             * @return {undefined}
             */
            function destroy(option, data) {
                switch (option) {
                    case "focusin":
                    case "focusout":
                        /** @type {null} */
                        val = null;
                        break;
                    case "dragenter":
                    case "dragleave":
                        /** @type {null} */
                        item = null;
                        break;
                    case "mouseover":
                    case "mouseout":
                        /** @type {null} */
                        child = null;
                        break;
                    case "pointerover":
                    case "pointerout":
                        self.delete(data.pointerId);
                        break;
                    case "gotpointercapture":
                    case "lostpointercapture":
                        _.delete(data.pointerId);
                }
            }
            /**
             * @param {!Object} e
             * @param {!Object} el
             * @param {!Object} arr
             * @param {number} name
             * @param {!Object} o
             * @param {!Object} error
             * @return {?}
             */
            function select(e, el, arr, name, o, error) {
                return null === e || e.nativeEvent !== error ? (e = {
                    blockedOn: el,
                    domEventName: arr,
                    eventSystemFlags: name,
                    nativeEvent: error,
                    targetContainers: [o]
                }, null !== el && (null !== (el = prop(el)) && triggerEvent(el)), e) : (e.eventSystemFlags |= name, el = e.targetContainers, null !== o && -1 === el.indexOf(o) && el.push(o), e);
            }
            /**
             * @param {?} json
             * @return {?}
             */
            function getDataFiber(json) {
                var tag = walk(json.target);
                if (null !== tag) {
                    var data = parseInt(tag);
                    if (null !== data) {
                        if (13 === (tag = data.tag)) {
                            if (null !== (tag = escape(data))) {
                                return json.blockedOn = tag, void ok(json.priority, function () {
                                    split(data);
                                });
                            }
                        } else {
                            if (3 === tag && data.stateNode.current.memoizedState.isDehydrated) {
                                return void (json.blockedOn = 3 === data.tag ? data.stateNode.containerInfo : null);
                            }
                        }
                    }
                }
                /** @type {null} */
                json.blockedOn = null;
            }
            /**
             * @param {!Object} e
             * @return {?}
             */
            function trigger(e) {
                if (null !== e.blockedOn) {
                    return false;
                }
                var a = e.targetContainers;
                for (; 0 < a.length;) {
                    var data = error(e.domEventName, e.eventSystemFlags, a[0], e.nativeEvent);
                    if (null !== data) {
                        return null !== (a = prop(data)) && triggerEvent(a), e.blockedOn = data, false;
                    }
                    var type = new (data = e.nativeEvent).constructor(data.type, data);
                    eventName = type;
                    data.target.dispatchEvent(type);
                    /** @type {null} */
                    eventName = null;
                    a.shift();
                }
                return true;
            }
            /**
             * @param {!Object} e
             * @param {!Object} type
             * @param {!File} storage
             * @return {undefined}
             */
            function clean(e, type, storage) {
                if (trigger(e)) {
                    storage.delete(type);
                }
            }
            /**
             * @return {undefined}
             */
            function up() {
                /** @type {boolean} */
                Nt = false;
                if (null !== val && trigger(val)) {
                    /** @type {null} */
                    val = null;
                }
                if (null !== item && trigger(item)) {
                    /** @type {null} */
                    item = null;
                }
                if (null !== child && trigger(child)) {
                    /** @type {null} */
                    child = null;
                }
                self.forEach(clean);
                _.forEach(clean);
            }
            /**
             * @param {!Object} obj
             * @param {!Object} array
             * @return {undefined}
             */
            function exists(obj, array) {
                if (obj.blockedOn === array) {
                    /** @type {null} */
                    obj.blockedOn = null;
                    if (!Nt) {
                        /** @type {boolean} */
                        Nt = true;
                        params.unstable_scheduleCallback(params.unstable_NormalPriority, up);
                    }
                }
            }
            /**
             * @param {!Object} target
             * @return {undefined}
             */
            function move(target) {
                /**
                 * @param {!Object} folder
                 * @return {?}
                 */
                function next(folder) {
                    return exists(folder, target);
                }
                if (0 < files.length) {
                    exists(files[0], target);
                    /** @type {number} */
                    var index = 1;
                    for (; index < files.length; index++) {
                        var key = files[index];
                        if (key.blockedOn === target) {
                            /** @type {null} */
                            key.blockedOn = null;
                        }
                    }
                }
                if (null !== val) {
                    exists(val, target);
                }
                if (null !== item) {
                    exists(item, target);
                }
                if (null !== child) {
                    exists(child, target);
                }
                self.forEach(next);
                _.forEach(next);
                /** @type {number} */
                index = 0;
                for (; index < data.length; index++) {
                    if ((key = data[index]).blockedOn === target) {
                        /** @type {null} */
                        key.blockedOn = null;
                    }
                }
                for (; 0 < data.length && null === (index = data[0]).blockedOn;) {
                    getDataFiber(index);
                    if (null === index.blockedOn) {
                        data.shift();
                    }
                }
            }
            /**
             * @param {?} done
             * @param {number} next
             * @param {?} options
             * @param {!Object} callback
             * @return {undefined}
             */
            function before(done, next, options, callback) {
                var nativeEvent = touch;
                var transition = state.transition;
                /** @type {null} */
                state.transition = null;
                try {
                    /** @type {number} */
                    touch = 1;
                    run(done, next, options, callback);
                } finally {
                    touch = nativeEvent;
                    state.transition = transition;
                }
            }
            /**
             * @param {?} error
             * @param {number} next
             * @param {?} options
             * @param {!Object} callback
             * @return {undefined}
             */
            function track(error, next, options, callback) {
                var nativeEvent = touch;
                var transition = state.transition;
                /** @type {null} */
                state.transition = null;
                try {
                    /** @type {number} */
                    touch = 4;
                    run(error, next, options, callback);
                } finally {
                    touch = nativeEvent;
                    state.transition = transition;
                }
            }
            /**
             * @param {undefined} type
             * @param {number} callback
             * @param {?} data
             * @param {!Object} options
             * @return {undefined}
             */
            function run(type, callback, data, options) {
                if (so) {
                    var result = error(type, callback, data, options);
                    if (null === result) {
                        init(type, callback, options, width, data);
                        destroy(type, options);
                    } else {
                        if (function (name, options, i, value, b) {
                            switch (options) {
                                case "focusin":
                                    return val = select(val, name, options, i, value, b), true;
                                case "dragenter":
                                    return item = select(item, name, options, i, value, b), true;
                                case "mouseover":
                                    return child = select(child, name, options, i, value, b), true;
                                case "pointerover":
                                    var c = b.pointerId;
                                    return self.set(c, select(self.get(c) || null, name, options, i, value, b)), true;
                                case "gotpointercapture":
                                    return c = b.pointerId, _.set(c, select(_.get(c) || null, name, options, i, value, b)), true;
                            }
                            return false;
                        }(result, type, callback, data, options)) {
                            options.stopPropagation();
                        } else {
                            if (destroy(type, options), 4 & callback && -1 < NOT_VISIBLE_TRIGGER_TYPES.indexOf(type)) {
                                for (; null !== result;) {
                                    var value = prop(result);
                                    if (null !== value && animate(value), null === (value = error(type, callback, data, options)) && init(type, callback, options, width, data), value === result) {
                                        break;
                                    }
                                    result = value;
                                }
                                if (null !== result) {
                                    options.stopPropagation();
                                }
                            } else {
                                init(type, callback, options, null, data);
                            }
                        }
                    }
                }
            }
            /**
             * @param {!Object} value
             * @param {!Object} result
             * @param {number} expected
             * @param {!Object} event
             * @return {?}
             */
            function error(value, result, expected, event) {
                if (width = null, null !== (value = walk(value = getEventTarget(event)))) {
                    if (null === (result = parseInt(value))) {
                        /** @type {null} */
                        value = null;
                    } else {
                        if (13 === (expected = result.tag)) {
                            if (null !== (value = escape(result))) {
                                return value;
                            }
                            /** @type {null} */
                            value = null;
                        } else {
                            if (3 === expected) {
                                if (result.stateNode.current.memoizedState.isDehydrated) {
                                    return 3 === result.tag ? result.stateNode.containerInfo : null;
                                }
                                /** @type {null} */
                                value = null;
                            } else {
                                if (result !== value) {
                                    /** @type {null} */
                                    value = null;
                                }
                            }
                        }
                    }
                }
                return width = value, null;
            }
            /**
             * @param {string} type
             * @return {?}
             */
            function bindEvents(type) {
                switch (type) {
                    case "cancel":
                    case "click":
                    case "close":
                    case "contextmenu":
                    case "copy":
                    case "cut":
                    case "auxclick":
                    case "dblclick":
                    case "dragend":
                    case "dragstart":
                    case "drop":
                    case "focusin":
                    case "focusout":
                    case "input":
                    case "invalid":
                    case "keydown":
                    case "keypress":
                    case "keyup":
                    case "mousedown":
                    case "mouseup":
                    case "paste":
                    case "pause":
                    case "play":
                    case "pointercancel":
                    case "pointerdown":
                    case "pointerup":
                    case "ratechange":
                    case "reset":
                    case "resize":
                    case "seeked":
                    case "submit":
                    case "touchcancel":
                    case "touchend":
                    case "touchstart":
                    case "volumechange":
                    case "change":
                    case "selectionchange":
                    case "textInput":
                    case "compositionstart":
                    case "compositionend":
                    case "compositionupdate":
                    case "beforeblur":
                    case "afterblur":
                    case "beforeinput":
                    case "blur":
                    case "fullscreenchange":
                    case "focus":
                    case "hashchange":
                    case "popstate":
                    case "select":
                    case "selectstart":
                        return 1;
                    case "drag":
                    case "dragenter":
                    case "dragexit":
                    case "dragleave":
                    case "dragover":
                    case "mousemove":
                    case "mouseout":
                    case "mouseover":
                    case "pointermove":
                    case "pointerout":
                    case "pointerover":
                    case "scroll":
                    case "toggle":
                    case "touchmove":
                    case "wheel":
                    case "mouseenter":
                    case "mouseleave":
                    case "pointerenter":
                    case "pointerleave":
                        return 4;
                    case "message":
                        switch (sortby()) {
                            case filename:
                                return 1;
                            case _onload:
                                return 4;
                            case user:
                            case description:
                                return 16;
                            case finalId:
                                return 536870912;
                            default:
                                return 16;
                        }default:
                        return 16;
                }
            }
            /**
             * @return {?}
             */
            function onChange() {
                if (oldValue) {
                    return oldValue;
                }
                var key;
                var i;
                var a = axis;
                var val = a.length;
                var b = "value" in cursor ? cursor.value : cursor.textContent;
                var bl = b.length;
                /** @type {number} */
                key = 0;
                for (; key < val && a[key] === b[key]; key++) {
                }
                /** @type {number} */
                var target = val - key;
                /** @type {number} */
                i = 1;
                for (; i <= target && a[val - i] === b[bl - i]; i++) {
                }
                return oldValue = b.slice(key, 1 < i ? 1 - i : void 0);
            }
            /**
             * @param {number} e
             * @return {?}
             */
            function createEvent(e) {
                var c = e.keyCode;
                return "charCode" in e ? 0 === (e = e.charCode) && 13 === c && (e = 13) : e = c, 10 === e && (e = 13), 32 <= e || 13 === e ? e : 0;
            }
            /**
             * @return {?}
             */
            function returnTrue() {
                return true;
            }
            /**
             * @return {?}
             */
            function returnFalse() {
                return false;
            }
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function coerce(obj) {
                /**
                 * @param {?} key
                 * @param {!Object} type
                 * @param {?} targetInst
                 * @param {!Object} nativeEvent
                 * @param {string} nativeEventTarget
                 * @return {?}
                 */
                function SyntheticEvent(key, type, targetInst, nativeEvent, nativeEventTarget) {
                    var i;
                    for (i in this._reactName = key, this._targetInst = targetInst, this.type = type, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null, obj) {
                        if (obj.hasOwnProperty(i)) {
                            key = obj[i];
                            this[i] = key ? key(nativeEvent) : nativeEvent[i];
                        }
                    }
                    return this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? returnTrue : returnFalse, this.isPropagationStopped = returnFalse, this;
                }
                return assign(SyntheticEvent.prototype, {
                    preventDefault: function () {
                        /** @type {boolean} */
                        this.defaultPrevented = true;
                        var event = this.nativeEvent;
                        if (event) {
                            if (event.preventDefault) {
                                event.preventDefault();
                            } else {
                                if ("unknown" !== typeof event.returnValue) {
                                    /** @type {boolean} */
                                    event.returnValue = false;
                                }
                            }
                            /** @type {function(): ?} */
                            this.isDefaultPrevented = returnTrue;
                        }
                    },
                    stopPropagation: function () {
                        var event = this.nativeEvent;
                        if (event) {
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else {
                                if ("unknown" !== typeof event.cancelBubble) {
                                    /** @type {boolean} */
                                    event.cancelBubble = true;
                                }
                            }
                            /** @type {function(): ?} */
                            this.isPropagationStopped = returnTrue;
                        }
                    },
                    persist: function () {
                    },
                    isPersistent: returnTrue
                }), SyntheticEvent;
            }
            /**
             * @param {?} key
             * @return {?}
             */
            function normalizeCommandKeys(key) {
                var event = this.nativeEvent;
                return event.getModifierState ? event.getModifierState(key) : !!(key = keymap[key]) && !!event[key];
            }
            /**
             * @return {?}
             */
            function movementCost() {
                return normalizeCommandKeys;
            }
            /**
             * @param {string} type
             * @param {!Object} event
             * @return {?}
             */
            function fireEvent(type, event) {
                switch (type) {
                    case "keyup":
                        return -1 !== skillHotKey.indexOf(event.keyCode);
                    case "keydown":
                        return 229 !== event.keyCode;
                    case "keypress":
                    case "mousedown":
                    case "focusout":
                        return true;
                    default:
                        return false;
                }
            }
            /**
             * @param {!Object} event
             * @return {?}
             */
            function scrollHijacking(event) {
                return "object" === typeof (event = event.detail) && "data" in event ? event.data : null;
            }
            /**
             * @param {number} options
             * @return {?}
             */
            function fixElement(options) {
                var tagName = options && options.nodeName && options.nodeName.toLowerCase();
                return "input" === tagName ? !!$inputTypes[options.type] : "textarea" === tagName;
            }
            /**
             * @param {!Array} source
             * @param {!Object} data
             * @param {string} type
             * @param {boolean} ret
             * @return {undefined}
             */
            function emit(source, data, type, ret) {
                getVersion(ret);
                if (0 < (data = bind(data, "onChange")).length) {
                    type = new Error("onChange", "change", null, type, ret);
                    source.push({
                        event: type,
                        listeners: data
                    });
                }
            }
            /**
             * @param {!Object} key
             * @return {undefined}
             */
            function selector(key) {
                delegateHandler(key, 0);
            }
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function when(obj) {
                if (go(reject(obj))) {
                    return obj;
                }
            }
            /**
             * @param {string} q
             * @param {?} value
             * @return {?}
             */
            function getActivationStyle(q, value) {
                if ("change" === q) {
                    return value;
                }
            }
            /**
             * @return {undefined}
             */
            function once() {
                if (el) {
                    el.detachEvent("onpropertychange", onClick);
                    /** @type {null} */
                    body = el = null;
                }
            }
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            function onClick(e) {
                if ("value" === e.propertyName && when(body)) {
                    /** @type {!Array} */
                    var item = [];
                    emit(item, body, e, getEventTarget(e));
                    process(selector, item);
                }
            }
            /**
             * @param {!Object} a
             * @param {!Function} obj
             * @param {?} fn
             * @return {undefined}
             */
            function listen(a, obj, fn) {
                if ("focusin" === a) {
                    once();
                    body = fn;
                    (el = obj).attachEvent("onpropertychange", onClick);
                } else {
                    if ("focusout" === a) {
                        once();
                    }
                }
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function _init(name) {
                if ("selectionchange" === name || "keyup" === name || "keydown" === name) {
                    return when(body);
                }
            }
            /**
             * @param {string} group
             * @param {!Object} user
             * @return {?}
             */
            function userToGroup(group, user) {
                if ("click" === group) {
                    return when(user);
                }
            }
            /**
             * @param {string} id
             * @param {!Object} obj
             * @return {?}
             */
            function Marktplaats_Exchanger(id, obj) {
                if ("input" === id || "change" === id) {
                    return when(obj);
                }
            }
            /**
             * @param {!Object} a
             * @param {!Object} b
             * @return {?}
             */
            function deepEqual(a, b) {
                if (compare(a, b)) {
                    return true;
                }
                if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) {
                    return false;
                }
                /** @type {!Array<string>} */
                var s = Object.keys(a);
                /** @type {!Array<string>} */
                var c = Object.keys(b);
                if (s.length !== c.length) {
                    return false;
                }
                /** @type {number} */
                c = 0;
                for (; c < s.length; c++) {
                    /** @type {string} */
                    var key = s[c];
                    if (!util.call(b, key) || !compare(a[key], b[key])) {
                        return false;
                    }
                }
                return true;
            }
            /**
             * @param {!Object} target
             * @return {?}
             */
            function trim(target) {
                for (; target && target.firstChild;) {
                    target = target.firstChild;
                }
                return target;
            }
            /**
             * @param {number} start
             * @param {number} offset
             * @return {?}
             */
            function match(start, offset) {
                var end;
                var result = trim(start);
                /** @type {number} */
                start = 0;
                for (; result;) {
                    if (3 === result.nodeType) {
                        if (end = start + result.textContent.length, start <= offset && end >= offset) {
                            return {
                                node: result,
                                offset: offset - start
                            };
                        }
                        start = end;
                    }
                    e: {
                        for (; result;) {
                            if (result.nextSibling) {
                                result = result.nextSibling;
                                break e;
                            }
                            result = result.parentNode;
                        }
                        result = void 0;
                    }
                    result = trim(result);
                }
            }
            /**
             * @param {!HTMLElement} a
             * @param {!HTMLElement} b
             * @return {?}
             */
            function contains(a, b) {
                return !(!a || !b) && (a === b || (!a || 3 !== a.nodeType) && (b && 3 === b.nodeType ? contains(a, b.parentNode) : "contains" in a ? a.contains(b) : !!a.compareDocumentPosition && !!(16 & a.compareDocumentPosition(b))));
            }
            /**
             * @return {?}
             */
            function html() {
                /** @type {!Window} */
                var w = window;
                var element = getActiveElement();
                for (; element instanceof w.HTMLIFrameElement;) {
                    try {
                        /** @type {boolean} */
                        var hasD = "string" === typeof element.contentWindow.location.href;
                    } catch (r) {
                        /** @type {boolean} */
                        hasD = false;
                    }
                    if (!hasD) {
                        break;
                    }
                    element = getActiveElement((w = element.contentWindow).document);
                }
                return element;
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function handleKeyEvent(node) {
                var tagName = node && node.nodeName && node.nodeName.toLowerCase();
                return tagName && ("input" === tagName && ("text" === node.type || "search" === node.type || "tel" === node.type || "url" === node.type || "password" === node.type) || "textarea" === tagName || "true" === node.contentEditable);
            }
            /**
             * @param {!Object} s
             * @return {undefined}
             */
            function getCursorPosition(s) {
                var a = html();
                var e = s.focusedElem;
                var p = s.selectionRange;
                if (a !== e && e && e.ownerDocument && contains(e.ownerDocument.documentElement, e)) {
                    if (null !== p && handleKeyEvent(e)) {
                        if (a = p.start, void 0 === (s = p.end) && (s = a), "selectionStart" in e) {
                            e.selectionStart = a;
                            /** @type {number} */
                            e.selectionEnd = Math.min(s, e.value.length);
                        } else {
                            if ((s = (a = e.ownerDocument || document) && a.defaultView || window).getSelection) {
                                s = s.getSelection();
                                var r = e.textContent.length;
                                /** @type {number} */
                                var q = Math.min(p.start, r);
                                /** @type {number} */
                                p = void 0 === p.end ? q : Math.min(p.end, r);
                                if (!s.extend && q > p) {
                                    /** @type {number} */
                                    r = p;
                                    /** @type {number} */
                                    p = q;
                                    /** @type {number} */
                                    q = r;
                                }
                                r = match(e, q);
                                var result = match(e, p);
                                if (r && result && (1 !== s.rangeCount || s.anchorNode !== r.node || s.anchorOffset !== r.offset || s.focusNode !== result.node || s.focusOffset !== result.offset)) {
                                    (a = a.createRange()).setStart(r.node, r.offset);
                                    s.removeAllRanges();
                                    if (q > p) {
                                        s.addRange(a);
                                        s.extend(result.node, result.offset);
                                    } else {
                                        a.setEnd(result.node, result.offset);
                                        s.addRange(a);
                                    }
                                }
                            }
                        }
                    }
                    /** @type {!Array} */
                    a = [];
                    s = e;
                    for (; s = s.parentNode;) {
                        if (1 === s.nodeType) {
                            a.push({
                                element: s,
                                left: s.scrollLeft,
                                top: s.scrollTop
                            });
                        }
                    }
                    if ("function" === typeof e.focus) {
                        e.focus();
                    }
                    /** @type {number} */
                    e = 0;
                    for (; e < a.length; e++) {
                        (s = a[e]).element.scrollLeft = s.left;
                        s.element.scrollTop = s.top;
                    }
                }
            }
            /**
             * @param {!Array} root
             * @param {string} evt
             * @param {!Object} target
             * @return {undefined}
             */
            function getSelection(root, evt, target) {
                var selection = target.window === target ? target.document : 9 === target.nodeType ? target : target.ownerDocument;
                if (!(labelWidth || null == x || x !== getActiveElement(selection))) {
                    if ("selectionStart" in (selection = x) && handleKeyEvent(selection)) {
                        selection = {
                            start: selection.selectionStart,
                            end: selection.selectionEnd
                        };
                    } else {
                        selection = {
                            anchorNode: (selection = (selection.ownerDocument && selection.ownerDocument.defaultView || window).getSelection()).anchorNode,
                            anchorOffset: selection.anchorOffset,
                            focusNode: selection.focusNode,
                            focusOffset: selection.focusOffset
                        };
                    }
                    if (!(props && deepEqual(props, selection))) {
                        props = selection;
                        if (0 < (selection = bind(input, "onSelect")).length) {
                            evt = new Error("onSelect", "select", null, evt, target);
                            root.push({
                                event: evt,
                                listeners: selection
                            });
                            evt.target = x;
                        }
                    }
                }
            }
            /**
             * @param {string} styleProp
             * @param {string} eventName
             * @return {?}
             */
            function _prefixedEvent(styleProp, eventName) {
                var prefixes = {};
                return prefixes[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes["Webkit" + styleProp] = "webkit" + eventName, prefixes["Moz" + styleProp] = "moz" + eventName, prefixes;
            }
            /**
             * @param {string} value
             * @return {?}
             */
            function commaStringToArray(value) {
                if (dict[value]) {
                    return dict[value];
                }
                if (!EVENT_NAME_MAP[value]) {
                    return value;
                }
                var name;
                var names = EVENT_NAME_MAP[value];
                for (name in names) {
                    if (names.hasOwnProperty(name) && name in testStyle) {
                        return dict[value] = names[name];
                    }
                }
                return value;
            }
            /**
             * @param {string} obj
             * @param {string} key
             * @return {undefined}
             */
            function _defineProperty(obj, key) {
                executionContextNamesByOrigin.set(obj, key);
                event(key, [obj]);
            }
            /**
             * @param {!Object} event
             * @param {?} data
             * @param {!Element} target
             * @return {undefined}
             */
            function publish(event, data, target) {
                var type = event.type || "unknown-event";
                /** @type {!Element} */
                event.currentTarget = target;
                (function (deltaType, gistics, partKeys, type, canCreateDiscussions, i, isSlidingUp, dontForceConstraints, forceExecution) {
                    if ($fz.apply(this, arguments), _dispatch) {
                        if (!_dispatch) {
                            throw Error(call(198));
                        }
                        var status = active;
                        /** @type {boolean} */
                        _dispatch = false;
                        /** @type {null} */
                        active = null;
                        if (!$b) {
                            /** @type {boolean} */
                            $b = true;
                            location = status;
                        }
                    }
                })(type, data, void 0, event);
                /** @type {null} */
                event.currentTarget = null;
            }
            /**
             * @param {!Object} el
             * @param {number} selector
             * @return {undefined}
             */
            function delegateHandler(el, selector) {
                /** @type {boolean} */
                selector = 0 !== (4 & selector);
                /** @type {number} */
                var i = 0;
                for (; i < el.length; i++) {
                    var listeners = el[i];
                    var e = listeners.event;
                    listeners = listeners.listeners;
                    e: {
                        var component = void 0;
                        if (selector) {
                            /** @type {number} */
                            var i = listeners.length - 1;
                            for (; 0 <= i; i--) {
                                var listener = listeners[i];
                                var instance = listener.instance;
                                var target = listener.currentTarget;
                                if (listener = listener.listener, instance !== component && e.isPropagationStopped()) {
                                    break e;
                                }
                                publish(e, listener, target);
                                component = instance;
                            }
                        } else {
                            /** @type {number} */
                            i = 0;
                            for (; i < listeners.length; i++) {
                                if (instance = (listener = listeners[i]).instance, target = listener.currentTarget, listener = listener.listener, instance !== component && e.isPropagationStopped()) {
                                    break e;
                                }
                                publish(e, listener, target);
                                component = instance;
                            }
                        }
                    }
                }
                if ($b) {
                    throw el = location, $b = false, location = null, el;
                }
            }
            /**
             * @param {string} key
             * @param {!Object} obj
             * @return {undefined}
             */
            function notify(key, obj) {
                var n = obj[id];
                if (void 0 === n) {
                    /** @type {!Set} */
                    n = obj[id] = new Set;
                }
                /** @type {string} */
                var k = key + "__bubble";
                if (!n.has(k)) {
                    show(obj, key, 2, false);
                    n.add(k);
                }
            }
            /**
             * @param {string} name
             * @param {boolean} element
             * @param {!Object} className
             * @return {undefined}
             */
            function addClass(name, element, className) {
                /** @type {number} */
                var i = 0;
                if (element) {
                    /** @type {number} */
                    i = i | 4;
                }
                show(className, name, i, element);
            }
            /**
             * @param {!Object} i
             * @return {undefined}
             */
            function save(i) {
                if (!i[mark]) {
                    /** @type {boolean} */
                    i[mark] = true;
                    ids.forEach(function (key) {
                        if ("selectionchange" !== key) {
                            if (!changedObjects.has(key)) {
                                addClass(key, false, i);
                            }
                            addClass(key, true, i);
                        }
                    });
                    var e = 9 === i.nodeType ? i : i.ownerDocument;
                    if (!(null === e || e[mark])) {
                        /** @type {boolean} */
                        e[mark] = true;
                        addClass("selectionchange", false, e);
                    }
                }
            }
            /**
             * @param {!Object} element
             * @param {string} elem
             * @param {!Function} value
             * @param {boolean} module
             * @return {undefined}
             */
            function show(element, elem, value, module) {
                switch (bindEvents(elem)) {
                    case 1:
                        /** @type {function(?, number, ?, !Object): undefined} */
                        var fn = before;
                        break;
                    case 4:
                        /** @type {function(?, number, ?, !Object): undefined} */
                        fn = track;
                        break;
                    default:
                        /** @type {function(undefined, number, ?, !Object): undefined} */
                        fn = run;
                }
                value = fn.bind(null, elem, value, element);
                fn = void 0;
                if (!(!Fe || "touchstart" !== elem && "touchmove" !== elem && "wheel" !== elem)) {
                    /** @type {boolean} */
                    fn = true;
                }
                if (module) {
                    if (void 0 !== fn) {
                        element.addEventListener(elem, value, {
                            capture: true,
                            passive: fn
                        });
                    } else {
                        element.addEventListener(elem, value, true);
                    }
                } else {
                    if (void 0 !== fn) {
                        element.addEventListener(elem, value, {
                            passive: fn
                        });
                    } else {
                        element.addEventListener(elem, value, false);
                    }
                }
            }
            /**
             * @param {string} type
             * @param {number} callback
             * @param {string} event
             * @param {!Object} node
             * @param {?} parent
             * @return {undefined}
             */
            function init(type, callback, event, node, parent) {
                /** @type {!Object} */
                var result = node;
                if (0 === (1 & callback) && 0 === (2 & callback) && null !== node) {
                    e: for (; ;) {
                        if (null === node) {
                            return;
                        }
                        var data = node.tag;
                        if (3 === data || 4 === data) {
                            var child = node.stateNode.containerInfo;
                            if (child === parent || 8 === child.nodeType && child.parentNode === parent) {
                                break;
                            }
                            if (4 === data) {
                                data = node.return;
                                for (; null !== data;) {
                                    var tag = data.tag;
                                    if ((3 === tag || 4 === tag) && ((tag = data.stateNode.containerInfo) === parent || 8 === tag.nodeType && tag.parentNode === parent)) {
                                        return;
                                    }
                                    data = data.return;
                                }
                            }
                            for (; null !== child;) {
                                if (null === (data = walk(child))) {
                                    return;
                                }
                                if (5 === (tag = data.tag) || 6 === tag) {
                                    node = result = data;
                                    continue e;
                                }
                                child = child.parentNode;
                            }
                        }
                        node = node.return;
                    }
                }
                process(function () {
                    var val = result;
                    var target = getEventTarget(event);
                    /** @type {!Array} */
                    var self = [];
                    e: {
                        var node = executionContextNamesByOrigin.get(type);
                        if (void 0 !== node) {
                            var obj = Error;
                            /** @type {string} */
                            var key = type;
                            switch (type) {
                                case "keypress":
                                    if (0 === createEvent(event)) {
                                        break e;
                                    }
                                case "keydown":
                                case "keyup":
                                    obj = vals;
                                    break;
                                case "focusin":
                                    /** @type {string} */
                                    key = "focus";
                                    obj = id_domain;
                                    break;
                                case "focusout":
                                    /** @type {string} */
                                    key = "blur";
                                    obj = id_domain;
                                    break;
                                case "beforeblur":
                                case "afterblur":
                                    obj = id_domain;
                                    break;
                                case "click":
                                    if (2 === event.button) {
                                        break e;
                                    }
                                case "auxclick":
                                case "dblclick":
                                case "mousedown":
                                case "mousemove":
                                case "mouseup":
                                case "mouseout":
                                case "mouseover":
                                case "contextmenu":
                                    obj = elem;
                                    break;
                                case "drag":
                                case "dragend":
                                case "dragenter":
                                case "dragexit":
                                case "dragleave":
                                case "dragover":
                                case "dragstart":
                                case "drop":
                                    obj = tryObj;
                                    break;
                                case "touchcancel":
                                case "touchend":
                                case "touchmove":
                                case "touchstart":
                                    obj = objtemp;
                                    break;
                                case _handleActions:
                                case _extends5:
                                case _TOOL2MODE:
                                    obj = objOOUI;
                                    break;
                                case _extends4:
                                    obj = objnew;
                                    break;
                                case "scroll":
                                    obj = sum;
                                    break;
                                case "wheel":
                                    obj = values;
                                    break;
                                case "copy":
                                case "cut":
                                case "paste":
                                    obj = cmd;
                                    break;
                                case "gotpointercapture":
                                case "lostpointercapture":
                                case "pointercancel":
                                case "pointerdown":
                                case "pointermove":
                                case "pointerout":
                                case "pointerover":
                                case "pointerup":
                                    obj = nil;
                            }
                            /** @type {boolean} */
                            var parent = 0 !== (4 & callback);
                            /** @type {boolean} */
                            var data = !parent && "scroll" === type;
                            var item = parent ? null !== node ? node + "Capture" : null : node;
                            /** @type {!Array} */
                            parent = [];
                            var result;
                            var value = val;
                            for (; null !== value;) {
                                var name = (result = value).stateNode;
                                if (5 === result.tag && null !== name && (result = name, null !== item && (null != (name = loop(value, item)) && parent.push(normalize(value, name, result)))), data) {
                                    break;
                                }
                                value = value.return;
                            }
                            if (0 < parent.length) {
                                node = new obj(node, key, null, event, target);
                                self.push({
                                    event: node,
                                    listeners: parent
                                });
                            }
                        }
                    }
                    if (0 === (7 & callback)) {
                        if (obj = "mouseout" === type || "pointerout" === type, (!(node = "mouseover" === type || "pointerover" === type) || event === eventName || !(key = event.relatedTarget || event.fromElement) || !walk(key) && !key[name]) && (obj || node) && (node = target.window === target ? target : (node = target.ownerDocument) ? node.defaultView || node.parentWindow : window, obj ? (obj = val, null !== (key = (key = event.relatedTarget || event.toElement) ? walk(key) : null) && (key !== (data = parseInt(key)) ||
                            5 !== key.tag && 6 !== key.tag) && (key = null)) : (obj = null, key = val), obj !== key)) {
                            if (parent = elem, name = "onMouseLeave", item = "onMouseEnter", value = "mouse", "pointerout" !== type && "pointerover" !== type || (parent = nil, name = "onPointerLeave", item = "onPointerEnter", value = "pointer"), data = null == obj ? node : reject(obj), result = null == key ? node : reject(key), (node = new parent(name, value + "leave", obj, event, target)).target = data, node.relatedTarget = result, name = null, walk(target) === val && ((parent = new parent(item, value + "enter",
                                key, event, target)).target = result, parent.relatedTarget = data, name = parent), data = name, obj && key) {
                                e: {
                                    item = key;
                                    /** @type {number} */
                                    value = 0;
                                    /** @type {boolean} */
                                    result = parent = obj;
                                    for (; result; result = last(result)) {
                                        value++;
                                    }
                                    /** @type {number} */
                                    result = 0;
                                    name = item;
                                    for (; name; name = last(name)) {
                                        result++;
                                    }
                                    for (; 0 < value - result;) {
                                        parent = last(parent);
                                        value--;
                                    }
                                    for (; 0 < result - value;) {
                                        item = last(item);
                                        result--;
                                    }
                                    for (; value--;) {
                                        if (parent === item || null !== item && parent === item.alternate) {
                                            break e;
                                        }
                                        parent = last(parent);
                                        item = last(item);
                                    }
                                    /** @type {null} */
                                    parent = null;
                                }
                            } else {
                                /** @type {null} */
                                parent = null;
                            }
                            if (null !== obj) {
                                use(self, node, obj, parent, false);
                            }
                            if (null !== key && null !== data) {
                                use(self, data, key, parent, true);
                            }
                        }
                        if ("select" === (obj = (node = val ? reject(val) : window).nodeName && node.nodeName.toLowerCase()) || "input" === obj && "file" === node.type) {
                            /** @type {function(string, ?): ?} */
                            var value = getActivationStyle;
                        } else {
                            if (fixElement(node)) {
                                if (shouldAvoid) {
                                    /** @type {function(string, !Object): ?} */
                                    value = Marktplaats_Exchanger;
                                } else {
                                    /** @type {function(string): ?} */
                                    value = _init;
                                    /** @type {function(!Object, !Function, ?): undefined} */
                                    var data = listen;
                                }
                            } else {
                                if ((obj = node.nodeName) && "input" === obj.toLowerCase() && ("checkbox" === node.type || "radio" === node.type)) {
                                    /** @type {function(string, !Object): ?} */
                                    value = userToGroup;
                                }
                            }
                        }
                        switch (value && (value = value(type, val)) ? emit(self, value, event, target) : (data && data(type, node, val), "focusout" === type && (data = node._wrapperState) && data.controlled && "number" === node.type && reduce(node, "number", node.value)), data = val ? reject(val) : window, type) {
                            case "focusin":
                                if (fixElement(data) || "true" === data.contentEditable) {
                                    x = data;
                                    input = val;
                                    /** @type {null} */
                                    props = null;
                                }
                                break;
                            case "focusout":
                                /** @type {null} */
                                props = input = x = null;
                                break;
                            case "mousedown":
                                /** @type {boolean} */
                                labelWidth = true;
                                break;
                            case "contextmenu":
                            case "mouseup":
                            case "dragend":
                                /** @type {boolean} */
                                labelWidth = false;
                                getSelection(self, event, target);
                                break;
                            case "selectionchange":
                                if (hr) {
                                    break;
                                }
                            case "keydown":
                            case "keyup":
                                getSelection(self, event, target);
                        }
                        var v;
                        if (choosePlain) {
                            e: {
                                switch (type) {
                                    case "compositionstart":
                                        /** @type {string} */
                                        var value = "onCompositionStart";
                                        break e;
                                    case "compositionend":
                                        /** @type {string} */
                                        value = "onCompositionEnd";
                                        break e;
                                    case "compositionupdate":
                                        /** @type {string} */
                                        value = "onCompositionUpdate";
                                        break e;
                                }
                                value = void 0;
                            }
                        } else {
                            if (needsProperty) {
                                if (fireEvent(type, event)) {
                                    /** @type {string} */
                                    value = "onCompositionEnd";
                                }
                            } else {
                                if ("keydown" === type && 229 === event.keyCode) {
                                    /** @type {string} */
                                    value = "onCompositionStart";
                                }
                            }
                        }
                        if (value) {
                            if (reverseIsSingle && "ko" !== event.locale) {
                                if (needsProperty || "onCompositionStart" !== value) {
                                    if ("onCompositionEnd" === value && needsProperty) {
                                        v = onChange();
                                    }
                                } else {
                                    axis = "value" in (cursor = target) ? cursor.value : cursor.textContent;
                                    /** @type {boolean} */
                                    needsProperty = true;
                                }
                            }
                            if (0 < (data = bind(val, value)).length) {
                                value = new Buffer(value, type, null, event, target);
                                self.push({
                                    event: value,
                                    listeners: data
                                });
                                if (v) {
                                    value.data = v;
                                } else {
                                    if (null !== (v = scrollHijacking(event))) {
                                        value.data = v;
                                    }
                                }
                            }
                        }
                        if (v = isD6F10 ? function (value, event) {
                            switch (value) {
                                case "compositionend":
                                    return scrollHijacking(event);
                                case "keypress":
                                    return 32 !== event.which ? null : (y$$ = true, voronoi);
                                case "textInput":
                                    return (value = event.data) === voronoi && y$$ ? null : value;
                                default:
                                    return null;
                            }
                        }(type, event) : function (type, event) {
                            if (needsProperty) {
                                return "compositionend" === type || !choosePlain && fireEvent(type, event) ? (type = onChange(), oldValue = axis = cursor = null, needsProperty = false, type) : null;
                            }
                            switch (type) {
                                case "paste":
                                default:
                                    return null;
                                case "keypress":
                                    if (!(event.ctrlKey || event.altKey || event.metaKey) || event.ctrlKey && event.altKey) {
                                        if (event.char && 1 < event.char.length) {
                                            return event.char;
                                        }
                                        if (event.which) {
                                            return String.fromCharCode(event.which);
                                        }
                                    }
                                    return null;
                                case "compositionend":
                                    return reverseIsSingle && "ko" !== event.locale ? null : event.data;
                            }
                        }(type, event)) {
                            if (0 < (val = bind(val, "onBeforeInput")).length) {
                                target = new Buffer("onBeforeInput", "beforeinput", null, event, target);
                                self.push({
                                    event: target,
                                    listeners: val
                                });
                                target.data = v;
                            }
                        }
                    }
                    delegateHandler(self, callback);
                });
            }
            /**
             * @param {!Object} instance
             * @param {!Object} fn
             * @param {!Element} obj
             * @return {?}
             */
            function normalize(instance, fn, obj) {
                return {
                    instance: instance,
                    listener: fn,
                    currentTarget: obj
                };
            }
            /**
             * @param {!Object} value
             * @param {string} name
             * @return {?}
             */
            function bind(value, name) {
                /** @type {string} */
                var id = name + "Capture";
                /** @type {!Array} */
                var self = [];
                for (; null !== value;) {
                    /** @type {!Object} */
                    var options = value;
                    var i = options.stateNode;
                    if (5 === options.tag && null !== i) {
                        options = i;
                        if (null != (i = loop(value, id))) {
                            self.unshift(normalize(value, i, options));
                        }
                        if (null != (i = loop(value, name))) {
                            self.push(normalize(value, i, options));
                        }
                    }
                    value = value.return;
                }
                return self;
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function last(value) {
                if (null === value) {
                    return null;
                }
                do {
                    value = value.return;
                } while (value && 5 !== value.tag);
                return value || null;
            }
            /**
             * @param {!Array} a
             * @param {string} item
             * @param {!Object} value
             * @param {?} name
             * @param {boolean} delegate
             * @return {undefined}
             */
            function use(a, item, value, name, delegate) {
                var k = item._reactName;
                /** @type {!Array} */
                var path = [];
                for (; null !== value && value !== name;) {
                    /** @type {!Object} */
                    var node = value;
                    var i = node.alternate;
                    var publicInst = node.stateNode;
                    if (null !== i && i === name) {
                        break;
                    }
                    if (5 === node.tag && null !== publicInst) {
                        node = publicInst;
                        if (delegate) {
                            if (null != (i = loop(value, k))) {
                                path.unshift(normalize(value, i, node));
                            }
                        } else {
                            if (!delegate) {
                                if (null != (i = loop(value, k))) {
                                    path.push(normalize(value, i, node));
                                }
                            }
                        }
                    }
                    value = value.return;
                }
                if (0 !== path.length) {
                    a.push({
                        event: item,
                        listeners: path
                    });
                }
            }
            /**
             * @param {string} s
             * @return {?}
             */
            function pick(s) {
                return ("string" === typeof s ? s : "" + s).replace(savedRegExp, "\n").replace(regNewline, "");
            }
            /**
             * @param {string} name
             * @param {boolean} value
             * @param {boolean} next
             * @return {undefined}
             */
            function read(name, value, next) {
                if (value = pick(value), pick(name) !== value && next) {
                    throw Error(call(425));
                }
            }
            /**
             * @return {undefined}
             */
            function none() {
            }
            /**
             * @param {string} tagName
             * @param {!Object} props
             * @return {?}
             */
            function matches(tagName, props) {
                return "textarea" === tagName || "noscript" === tagName || "string" === typeof props.children || "number" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
            }
            /**
             * @param {?} text
             * @return {undefined}
             */
            function do_reload(text) {
                setTimeout(function () {
                    throw text;
                });
            }
            /**
             * @param {!Object} target
             * @param {!Object} obj
             * @return {?}
             */
            function removeElement(target, obj) {
                /** @type {!Object} */
                var o = obj;
                /** @type {number} */
                var r = 0;
                do {
                    var t = o.nextSibling;
                    if (target.removeChild(o), t && 8 === t.nodeType) {
                        if ("/$" === (o = t.data)) {
                            if (0 === r) {
                                return target.removeChild(t), void move(obj);
                            }
                            r--;
                        } else {
                            if (!("$" !== o && "$?" !== o && "$!" !== o)) {
                                r++;
                            }
                        }
                    }
                    o = t;
                } while (o);
                move(obj);
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function text(node) {
                for (; null != node; node = node.nextSibling) {
                    var key = node.nodeType;
                    if (1 === key || 3 === key) {
                        break;
                    }
                    if (8 === key) {
                        if ("$" === (key = node.data) || "$!" === key || "$?" === key) {
                            break;
                        }
                        if ("/$" === key) {
                            return null;
                        }
                    }
                }
                return node;
            }
            /**
             * @param {!Object} element
             * @return {?}
             */
            function first(element) {
                element = element.previousSibling;
                /** @type {number} */
                var t = 0;
                for (; element;) {
                    if (8 === element.nodeType) {
                        var key = element.data;
                        if ("$" === key || "$!" === key || "$?" === key) {
                            if (0 === t) {
                                return element;
                            }
                            t--;
                        } else {
                            if ("/$" === key) {
                                t++;
                            }
                        }
                    }
                    element = element.previousSibling;
                }
                return null;
            }
            /**
             * @param {!Object} el
             * @return {?}
             */
            function walk(el) {
                var parent = el[key];
                if (parent) {
                    return parent;
                }
                var node = el.parentNode;
                for (; node;) {
                    if (parent = node[name] || node[key]) {
                        if (node = parent.alternate, null !== parent.child || null !== node && null !== node.child) {
                            el = first(el);
                            for (; null !== el;) {
                                if (node = el[key]) {
                                    return node;
                                }
                                el = first(el);
                            }
                        }
                        return parent;
                    }
                    node = (el = node).parentNode;
                }
                return null;
            }
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function prop(obj) {
                return !(obj = obj[key] || obj[name]) || 5 !== obj.tag && 6 !== obj.tag && 13 !== obj.tag && 3 !== obj.tag ? null : obj;
            }
            /**
             * @param {!Object} to
             * @return {?}
             */
            function reject(to) {
                if (5 === to.tag || 6 === to.tag) {
                    return to.stateNode;
                }
                throw Error(call(33));
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function close(value) {
                return value[field] || null;
            }
            /**
             * @param {number} name
             * @return {?}
             */
            function jQuery(name) {
                return {
                    current: name
                };
            }
            /**
             * @param {!Object} obj
             * @return {undefined}
             */
            function isEmpty(obj) {
                if (!(0 > i)) {
                    obj.current = fields[i];
                    /** @type {null} */
                    fields[i] = null;
                    i--;
                }
            }
            /**
             * @param {!Object} obj
             * @param {number} value
             * @return {undefined}
             */
            function log(obj, value) {
                i++;
                fields[i] = obj.current;
                /** @type {number} */
                obj.current = value;
            }
            /**
             * @param {!Object} node
             * @param {!Array} value
             * @return {?}
             */
            function merge(node, value) {
                var contextTypes = node.type.contextTypes;
                if (!contextTypes) {
                    return object;
                }
                var raw = node.stateNode;
                if (raw && raw.__reactInternalMemoizedUnmaskedChildContext === value) {
                    return raw.__reactInternalMemoizedMaskedChildContext;
                }
                var key;
                var styles = {};
                for (key in contextTypes) {
                    styles[key] = value[key];
                }
                return raw && ((node = node.stateNode).__reactInternalMemoizedUnmaskedChildContext = value, node.__reactInternalMemoizedMaskedChildContext = styles), styles;
            }
            /**
             * @param {number} data
             * @return {?}
             */
            function isString(data) {
                return null !== (data = data.childContextTypes) && void 0 !== data;
            }
            /**
             * @return {undefined}
             */
            function isFn() {
                isEmpty(users);
                isEmpty(obj);
            }
            /**
             * @param {number} fn
             * @param {undefined} n
             * @param {boolean} target
             * @return {undefined}
             */
            function addListener(fn, n, target) {
                if (obj.current !== object) {
                    throw Error(call(168));
                }
                log(obj, n);
                log(users, target);
            }
            /**
             * @param {!Object} node
             * @param {(Object|string)} context
             * @param {?} instance
             * @return {?}
             */
            function getChildContext(node, context, instance) {
                var props = node.stateNode;
                if (context = context.childContextTypes, "function" !== typeof props.getChildContext) {
                    return instance;
                }
                var prop;
                for (prop in props = props.getChildContext()) {
                    if (!(prop in context)) {
                        throw Error(call(108, getData(node) || "Unknown", prop));
                    }
                }
                return assign({}, instance, props);
            }
            /**
             * @param {!Array} node
             * @return {?}
             */
            function view(node) {
                return node = (node = node.stateNode) && node.__reactInternalMemoizedMergedChildContext || object, parent = obj.current, log(obj, node), log(users, users.current), true;
            }
            /**
             * @param {!Array} node
             * @param {(Object|string)} context
             * @param {boolean} x
             * @return {undefined}
             */
            function isObject(node, context, x) {
                var publicInst = node.stateNode;
                if (!publicInst) {
                    throw Error(call(169));
                }
                if (x) {
                    node = getChildContext(node, context, parent);
                    /** @type {!Array} */
                    publicInst.__reactInternalMemoizedMergedChildContext = node;
                    isEmpty(users);
                    isEmpty(obj);
                    log(obj, node);
                } else {
                    isEmpty(users);
                }
                log(users, x);
            }
            /**
             * @param {string} status
             * @return {undefined}
             */
            function onError(status) {
                if (null === table) {
                    /** @type {!Array} */
                    table = [status];
                } else {
                    table.push(status);
                }
            }
            /**
             * @return {?}
             */
            function replace() {
                if (!skipReorder && null !== table) {
                    /** @type {boolean} */
                    skipReorder = true;
                    /** @type {number} */
                    var i = 0;
                    var nativeEvent = touch;
                    try {
                        /** @type {!Array} */
                        var self = table;
                        /** @type {number} */
                        touch = 1;
                        for (; i < self.length; i++) {
                            var val = self[i];
                            do {
                                val = val(true);
                            } while (null !== val);
                        }
                        /** @type {null} */
                        table = null;
                        /** @type {boolean} */
                        Vo = false;
                    } catch (o) {
                        throw null !== table && (table = table.slice(i + 1)), hash(filename, replace), o;
                    } finally {
                        touch = nativeEvent;
                        /** @type {boolean} */
                        skipReorder = false;
                    }
                }
                return null;
            }
            /**
             * @param {!Object} type
             * @param {number} s
             * @return {undefined}
             */
            function reverse(type, s) {
                openFilesIds[openFileIdIndex++] = tag;
                openFilesIds[openFileIdIndex++] = optsName;
                /** @type {!Object} */
                optsName = type;
                /** @type {number} */
                tag = s;
            }
            /**
             * @param {string} message
             * @param {number} item
             * @param {number} x
             * @return {undefined}
             */
            function defined(message, item, x) {
                cache[j++] = v;
                cache[j++] = msg;
                cache[j++] = resolvedLink;
                /** @type {string} */
                resolvedLink = message;
                var b = v;
                message = msg;
                /** @type {number} */
                var n = 32 - isArray(b) - 1;
                /** @type {number} */
                b = b & ~(1 << n);
                x = x + 1;
                /** @type {number} */
                var name = 32 - isArray(item) + n;
                if (30 < name) {
                    /** @type {number} */
                    var j = n - n % 5;
                    /** @type {string} */
                    name = (b & (1 << j) - 1).toString(32);
                    /** @type {number} */
                    b = b >> j;
                    /** @type {number} */
                    n = n - j;
                    /** @type {number} */
                    v = 1 << 32 - isArray(item) + n | x << n | b;
                    /** @type {string} */
                    msg = name + message;
                } else {
                    /** @type {number} */
                    v = 1 << name | x << n | b;
                    /** @type {string} */
                    msg = message;
                }
            }
            /**
             * @param {!Object} data
             * @return {undefined}
             */
            function on(data) {
                if (null !== data.return) {
                    reverse(data, 1);
                    defined(data, 1, 0);
                }
            }
            /**
             * @param {!Object} s
             * @return {undefined}
             */
            function fun(s) {
                for (; s === optsName;) {
                    optsName = openFilesIds[--openFileIdIndex];
                    /** @type {null} */
                    openFilesIds[openFileIdIndex] = null;
                    tag = openFilesIds[--openFileIdIndex];
                    /** @type {null} */
                    openFilesIds[openFileIdIndex] = null;
                }
                for (; s === resolvedLink;) {
                    resolvedLink = cache[--j];
                    /** @type {null} */
                    cache[j] = null;
                    msg = cache[--j];
                    /** @type {null} */
                    cache[j] = null;
                    v = cache[--j];
                    /** @type {null} */
                    cache[j] = null;
                }
            }
            /**
             * @param {string} parent
             * @param {(Array|string)} tag
             * @return {undefined}
             */
            function draw(parent, tag) {
                var node = toString(5, null, null, 0);
                /** @type {string} */
                node.elementType = "DELETED";
                /** @type {(Array|string)} */
                node.stateNode = tag;
                /** @type {string} */
                node.return = parent;
                if (null === (tag = parent.deletions)) {
                    /** @type {!Array} */
                    parent.deletions = [node];
                    parent.flags |= 16;
                } else {
                    tag.push(node);
                }
            }
            /**
             * @param {!Object} node
             * @param {!Object} elem
             * @return {?}
             */
            function hasClass(node, elem) {
                switch (node.tag) {
                    case 5:
                        var s = node.type;
                        return null !== (elem = 1 !== elem.nodeType || s.toLowerCase() !== elem.nodeName.toLowerCase() ? null : elem) && (node.stateNode = elem, doc = node, r = text(elem.firstChild), true);
                    case 6:
                        return null !== (elem = "" === node.pendingProps || 3 !== elem.nodeType ? null : elem) && (node.stateNode = elem, doc = node, r = null, true);
                    case 13:
                        return null !== (elem = 8 !== elem.nodeType ? null : elem) && (s = null !== resolvedLink ? {
                            id: v,
                            overflow: msg
                        } : null, node.memoizedState = {
                            dehydrated: elem,
                            treeContext: s,
                            retryLane: 1073741824
                        }, (s = toString(18, null, null, 0)).stateNode = elem, s.return = node, node.child = s, doc = node, r = null, true);
                    default:
                        return false;
                }
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function addEndListener(node) {
                return 0 !== (1 & node.mode) && 0 === (128 & node.flags);
            }
            /**
             * @param {!Object} node
             * @return {undefined}
             */
            function transition(node) {
                if (err) {
                    var token = r;
                    if (token) {
                        var parent = token;
                        if (!hasClass(node, token)) {
                            if (addEndListener(node)) {
                                throw Error(call(418));
                            }
                            token = text(parent.nextSibling);
                            var data = doc;
                            if (token && hasClass(node, token)) {
                                draw(data, parent);
                            } else {
                                /** @type {number} */
                                node.flags = -4097 & node.flags | 2;
                                /** @type {boolean} */
                                err = false;
                                /** @type {!Object} */
                                doc = node;
                            }
                        }
                    } else {
                        if (addEndListener(node)) {
                            throw Error(call(418));
                        }
                        /** @type {number} */
                        node.flags = -4097 & node.flags | 2;
                        /** @type {boolean} */
                        err = false;
                        /** @type {!Object} */
                        doc = node;
                    }
                }
            }
            /**
             * @param {!Object} node
             * @return {undefined}
             */
            function transNode(node) {
                node = node.return;
                for (; null !== node && 5 !== node.tag && 3 !== node.tag && 13 !== node.tag;) {
                    node = node.return;
                }
                /** @type {!Object} */
                doc = node;
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function success(node) {
                if (node !== doc) {
                    return false;
                }
                if (!err) {
                    return transNode(node), err = true, false;
                }
                var data;
                if ((data = 3 !== node.tag) && !(data = 5 !== node.tag) && (data = "head" !== (data = node.type) && "body" !== data && !matches(node.type, node.memoizedProps)), data && (data = r)) {
                    if (addEndListener(node)) {
                        throw topPrice(), Error(call(418));
                    }
                    for (; data;) {
                        draw(node, data);
                        data = text(data.nextSibling);
                    }
                }
                if (transNode(node), 13 === node.tag) {
                    if (!(node = null !== (node = node.memoizedState) ? node.dehydrated : null)) {
                        throw Error(call(317));
                    }
                    e: {
                        node = node.nextSibling;
                        /** @type {number} */
                        data = 0;
                        for (; node;) {
                            if (8 === node.nodeType) {
                                var v = node.data;
                                if ("/$" === v) {
                                    if (0 === data) {
                                        r = text(node.nextSibling);
                                        break e;
                                    }
                                    data--;
                                } else {
                                    if (!("$" !== v && "$!" !== v && "$?" !== v)) {
                                        data++;
                                    }
                                }
                            }
                            node = node.nextSibling;
                        }
                        /** @type {null} */
                        r = null;
                    }
                } else {
                    r = doc ? text(node.stateNode.nextSibling) : null;
                }
                return true;
            }
            /**
             * @return {undefined}
             */
            function topPrice() {
                var data = r;
                for (; data;) {
                    data = text(data.nextSibling);
                }
            }
            /**
             * @return {undefined}
             */
            function attr() {
                /** @type {null} */
                r = doc = null;
                /** @type {boolean} */
                err = false;
            }
            /**
             * @param {!Object} name
             * @return {undefined}
             */
            function expect(name) {
                if (null === paths) {
                    /** @type {!Array} */
                    paths = [name];
                } else {
                    paths.push(name);
                }
            }
            /**
             * @param {!Node} type
             * @param {!Object} obj
             * @return {?}
             */
            function iterator(type, obj) {
                if (type && type.defaultProps) {
                    var name;
                    for (name in obj = assign({}, obj), type = type.defaultProps) {
                        if (void 0 === obj[name]) {
                            obj[name] = type[name];
                        }
                    }
                    return obj;
                }
                return obj;
            }
            /**
             * @return {undefined}
             */
            function _callUserDefinedCallback() {
                /** @type {null} */
                currentItem = $key = autoReview = null;
            }
            /**
             * @param {?} that
             * @return {undefined}
             */
            function createCallback(that) {
                var value = info.current;
                isEmpty(info);
                that._currentValue = value;
            }
            /**
             * @param {!Object} value
             * @param {?} id
             * @param {!Object} result
             * @return {undefined}
             */
            function report(value, id, result) {
                for (; null !== value;) {
                    var alternate = value.alternate;
                    if ((value.childLanes & id) !== id ? (value.childLanes |= id, null !== alternate && (alternate.childLanes |= id)) : null !== alternate && (alternate.childLanes & id) !== id && (alternate.childLanes |= id), value === result) {
                        break;
                    }
                    value = value.return;
                }
            }
            /**
             * @param {!Object} data
             * @param {?} value
             * @return {undefined}
             */
            function fetch(data, value) {
                /** @type {!Object} */
                autoReview = data;
                /** @type {null} */
                currentItem = $key = null;
                if (null !== (data = data.dependencies) && null !== data.firstContext) {
                    if (0 !== (data.lanes & value)) {
                        /** @type {boolean} */
                        track_index = true;
                    }
                    /** @type {null} */
                    data.firstContext = null;
                }
            }
            /**
             * @param {string} key
             * @return {?}
             */
            function require(key) {
                var val = key._currentValue;
                if (currentItem !== key) {
                    if (key = {
                        context: key,
                        memoizedValue: val,
                        next: null
                    }, null === $key) {
                        if (null === autoReview) {
                            throw Error(call(308));
                        }
                        /** @type {string} */
                        $key = key;
                        autoReview.dependencies = {
                            lanes: 0,
                            firstContext: key
                        };
                    } else {
                        $key = $key.next = key;
                    }
                }
                return val;
            }
            /**
             * @param {!Object} name
             * @return {undefined}
             */
            function generate(name) {
                if (null === ast) {
                    /** @type {!Array} */
                    ast = [name];
                } else {
                    ast.push(name);
                }
            }
            /**
             * @param {!Object} message
             * @param {!Object} result
             * @param {!Object} item
             * @param {?} params
             * @return {?}
             */
            function output(message, result, item, params) {
                var match = result.interleaved;
                return null === match ? (item.next = item, generate(result)) : (item.next = match.next, match.next = item), result.interleaved = item, $(message, params);
            }
            /**
             * @param {!Object} value
             * @param {?} id
             * @return {?}
             */
            function $(value, id) {
                value.lanes |= id;
                var node = value.alternate;
                if (null !== node) {
                    node.lanes |= id;
                }
                /** @type {!Object} */
                node = value;
                value = value.return;
                for (; null !== value;) {
                    value.childLanes |= id;
                    if (null !== (node = value.alternate)) {
                        node.childLanes |= id;
                    }
                    /** @type {!Object} */
                    node = value;
                    value = value.return;
                }
                return 3 === node.tag ? node.stateNode : null;
            }
            /**
             * @param {!Object} obj
             * @return {undefined}
             */
            function objectKeys(obj) {
                obj.updateQueue = {
                    baseState: obj.memoizedState,
                    firstBaseUpdate: null,
                    lastBaseUpdate: null,
                    shared: {
                        pending: null,
                        interleaved: null,
                        lanes: 0
                    },
                    effects: null
                };
            }
            /**
             * @param {!Object} data
             * @param {!Object} elem
             * @return {undefined}
             */
            function post(data, elem) {
                data = data.updateQueue;
                if (elem.updateQueue === data) {
                    elem.updateQueue = {
                        baseState: data.baseState,
                        firstBaseUpdate: data.firstBaseUpdate,
                        lastBaseUpdate: data.lastBaseUpdate,
                        shared: data.shared,
                        effects: data.effects
                    };
                }
            }
            /**
             * @param {number} object
             * @param {number} index
             * @return {?}
             */
            function concat(object, index) {
                return {
                    eventTime: object,
                    lane: index,
                    tag: 0,
                    payload: null,
                    callback: null,
                    next: null
                };
            }
            /**
             * @param {!Object} object
             * @param {!Function} target
             * @param {number} n
             * @return {?}
             */
            function filter(object, target, n) {
                var self = object.updateQueue;
                if (null === self) {
                    return null;
                }
                if (self = self.shared, 0 !== (2 & method)) {
                    var state = self.pending;
                    return null === state ? target.next = target : (target.next = state.next, state.next = target), self.pending = target, $(object, n);
                }
                return null === (state = self.interleaved) ? (target.next = target, generate(self)) : (target.next = state.next, state.next = target), self.interleaved = target, $(object, n);
            }
            /**
             * @param {?} item
             * @param {!Object} data
             * @param {number} value
             * @return {undefined}
             */
            function test(item, data, value) {
                if (null !== (data = data.updateQueue) && (data = data.shared, 0 !== (4194240 & value))) {
                    var allRendered = data.lanes;
                    /** @type {number} */
                    value = value | (allRendered = allRendered & item.pendingLanes);
                    /** @type {number} */
                    data.lanes = value;
                    isValid(item, value);
                }
            }
            /**
             * @param {!Node} self
             * @param {!Object} i
             * @return {?}
             */
            function dispatch(self, i) {
                var e = self.updateQueue;
                var scope = self.alternate;
                if (null !== scope && e === (scope = scope.updateQueue)) {
                    /** @type {null} */
                    var length = null;
                    /** @type {null} */
                    var a = null;
                    if (null !== (e = e.firstBaseUpdate)) {
                        do {
                            var result = {
                                eventTime: e.eventTime,
                                lane: e.lane,
                                tag: e.tag,
                                payload: e.payload,
                                callback: e.callback,
                                next: null
                            };
                            if (null === a) {
                                length = a = result;
                            } else {
                                a = a.next = result;
                            }
                            e = e.next;
                        } while (null !== e);
                        if (null === a) {
                            length = a = i;
                        } else {
                            a = a.next = i;
                        }
                    } else {
                        length = a = i;
                    }
                    return e = {
                        baseState: scope.baseState,
                        firstBaseUpdate: length,
                        lastBaseUpdate: a,
                        shared: scope.shared,
                        effects: scope.effects
                    }, void (self.updateQueue = e);
                }
                if (null === (self = e.lastBaseUpdate)) {
                    /** @type {!Object} */
                    e.firstBaseUpdate = i;
                } else {
                    /** @type {!Object} */
                    self.next = i;
                }
                /** @type {!Object} */
                e.lastBaseUpdate = i;
            }
            /**
             * @param {!Object} parent
             * @param {!Object} key
             * @param {!Object} index
             * @param {number} mode
             * @return {undefined}
             */
            function validate(parent, key, index, mode) {
                var s = parent.updateQueue;
                /** @type {boolean} */
                definition = false;
                var el = s.firstBaseUpdate;
                var i = s.lastBaseUpdate;
                var e = s.shared.pending;
                if (null !== e) {
                    /** @type {null} */
                    s.shared.pending = null;
                    var d = e;
                    var a = d.next;
                    /** @type {null} */
                    d.next = null;
                    if (null === i) {
                        el = a;
                    } else {
                        i.next = a;
                    }
                    i = d;
                    var c = parent.alternate;
                    if (null !== c) {
                        if ((e = (c = c.updateQueue).lastBaseUpdate) !== i) {
                            if (null === e) {
                                c.firstBaseUpdate = a;
                            } else {
                                e.next = a;
                            }
                            c.lastBaseUpdate = d;
                        }
                    }
                }
                if (null !== el) {
                    var data = s.baseState;
                    /** @type {number} */
                    i = 0;
                    /** @type {null} */
                    c = a = d = null;
                    e = el;
                    for (; ;) {
                        var k = e.lane;
                        var value = e.eventTime;
                        if ((mode & k) === k) {
                            if (null !== c) {
                                c = c.next = {
                                    eventTime: value,
                                    lane: 0,
                                    tag: e.tag,
                                    payload: e.payload,
                                    callback: e.callback,
                                    next: null
                                };
                            }
                            e: {
                                /** @type {!Object} */
                                var a = parent;
                                var msg = e;
                                switch (k = key, value = index, msg.tag) {
                                    case 1:
                                        if ("function" === typeof (a = msg.payload)) {
                                            data = a.call(value, data, k);
                                            break e;
                                        }
                                        data = a;
                                        break e;
                                    case 3:
                                        /** @type {number} */
                                        a.flags = -65537 & a.flags | 128;
                                    case 0:
                                        if (null === (k = "function" === typeof (a = msg.payload) ? a.call(value, data, k) : a) || void 0 === k) {
                                            break e;
                                        }
                                        /** @type {!Object} */
                                        data = assign({}, data, k);
                                        break e;
                                    case 2:
                                        /** @type {boolean} */
                                        definition = true;
                                }
                            }
                            if (null !== e.callback && 0 !== e.lane) {
                                parent.flags |= 64;
                                if (null === (k = s.effects)) {
                                    /** @type {!Array} */
                                    s.effects = [e];
                                } else {
                                    k.push(e);
                                }
                            }
                        } else {
                            value = {
                                eventTime: value,
                                lane: k,
                                tag: e.tag,
                                payload: e.payload,
                                callback: e.callback,
                                next: null
                            };
                            if (null === c) {
                                a = c = value;
                                d = data;
                            } else {
                                c = c.next = value;
                            }
                            /** @type {number} */
                            i = i | k;
                        }
                        if (null === (e = e.next)) {
                            if (null === (e = s.shared.pending)) {
                                break;
                            }
                            e = (k = e).next;
                            /** @type {null} */
                            k.next = null;
                            s.lastBaseUpdate = k;
                            /** @type {null} */
                            s.shared.pending = null;
                        }
                    }
                    if (null === c && (d = data), s.baseState = d, s.firstBaseUpdate = a, s.lastBaseUpdate = c, null !== (key = s.shared.interleaved)) {
                        /** @type {!Object} */
                        s = key;
                        do {
                            /** @type {number} */
                            i = i | s.lane;
                            s = s.next;
                        } while (s !== key);
                    } else {
                        if (null === el) {
                            /** @type {number} */
                            s.shared.lanes = 0;
                        }
                    }
                    /** @type {number} */
                    res = res | i;
                    /** @type {number} */
                    parent.lanes = i;
                    parent.memoizedState = data;
                }
            }
            /**
             * @param {number} d
             * @param {number} c
             * @param {!Object} data
             * @return {undefined}
             */
            function h(d, c, data) {
                if (d = c.effects, c.effects = null, null !== d) {
                    /** @type {number} */
                    c = 0;
                    for (; c < d.length; c++) {
                        var r = d[c];
                        var key = r.callback;
                        if (null !== key) {
                            if (r.callback = null, r = data, "function" !== typeof key) {
                                throw Error(call(191, key));
                            }
                            key.call(r);
                        }
                    }
                }
            }
            /**
             * @param {!Object} data
             * @param {number} args
             * @param {number} a
             * @param {!Object} v
             * @return {undefined}
             */
            function patch(data, args, a, v) {
                a = null === (a = a(v, args = data.memoizedState)) || void 0 === a ? args : assign({}, args, a);
                /** @type {number} */
                data.memoizedState = a;
                if (0 === data.lanes) {
                    /** @type {number} */
                    data.updateQueue.baseState = a;
                }
            }
            /**
             * @param {(Object|string)} instance
             * @param {!Object} fn
             * @param {!Object} obj
             * @param {!Array} props
             * @param {!Object} state
             * @param {!Object} target
             * @param {?} context
             * @return {?}
             */
            function mixin(instance, fn, obj, props, state, target, context) {
                return "function" === typeof (instance = instance.stateNode).shouldComponentUpdate ? instance.shouldComponentUpdate(props, target, context) : !fn.prototype || !fn.prototype.isPureReactComponent || (!deepEqual(obj, props) || !deepEqual(state, target));
            }
            /**
             * @param {!Object} el
             * @param {!Function} item
             * @param {!Array} params
             * @return {?}
             */
            function apply(el, item, params) {
                /** @type {boolean} */
                var that = false;
                var node = object;
                var value = item.contextType;
                return "object" === typeof value && null !== value ? value = require(value) : (node = isString(item) ? parent : obj.current, value = (that = null !== (that = item.contextTypes) && void 0 !== that) ? merge(el, node) : object), item = new item(params, value), el.memoizedState = null !== item.state && void 0 !== item.state ? item.state : null, item.updater = _this, el.stateNode = item, item._reactInternals = el, that && ((el = el.stateNode).__reactInternalMemoizedUnmaskedChildContext = node,
                    el.__reactInternalMemoizedMaskedChildContext = value), item;
            }
            /**
             * @param {(Object|string)} value
             * @param {!Object} obj
             * @param {?} description
             * @param {?} context
             * @return {undefined}
             */
            function addItem(value, obj, description, context) {
                value = obj.state;
                if ("function" === typeof obj.componentWillReceiveProps) {
                    obj.componentWillReceiveProps(description, context);
                }
                if ("function" === typeof obj.UNSAFE_componentWillReceiveProps) {
                    obj.UNSAFE_componentWillReceiveProps(description, context);
                }
                if (obj.state !== value) {
                    _this.enqueueReplaceState(obj, obj.state, null);
                }
            }
            /**
             * @param {!Object} node
             * @param {number} value
             * @param {!Object} path
             * @param {boolean} key
             * @return {undefined}
             */
            function set(node, value, path, key) {
                var options = node.stateNode;
                /** @type {!Object} */
                options.props = path;
                options.state = node.memoizedState;
                options.refs = refs;
                objectKeys(node);
                var data = value.contextType;
                if ("object" === typeof data && null !== data) {
                    options.context = require(data);
                } else {
                    data = isString(value) ? parent : obj.current;
                    options.context = merge(node, data);
                }
                options.state = node.memoizedState;
                if ("function" === typeof (data = value.getDerivedStateFromProps)) {
                    patch(node, value, data, path);
                    options.state = node.memoizedState;
                }
                if (!("function" === typeof value.getDerivedStateFromProps || "function" === typeof options.getSnapshotBeforeUpdate || "function" !== typeof options.UNSAFE_componentWillMount && "function" !== typeof options.componentWillMount)) {
                    value = options.state;
                    if ("function" === typeof options.componentWillMount) {
                        options.componentWillMount();
                    }
                    if ("function" === typeof options.UNSAFE_componentWillMount) {
                        options.UNSAFE_componentWillMount();
                    }
                    if (value !== options.state) {
                        _this.enqueueReplaceState(options, options.state, null);
                    }
                    validate(node, path, options, key);
                    options.state = node.memoizedState;
                }
                if ("function" === typeof options.componentDidMount) {
                    node.flags |= 4194308;
                }
            }
            /**
             * @param {!Object} name
             * @param {!Object} o
             * @param {!Object} node
             * @return {?}
             */
            function create(name, o, node) {
                if (null !== (name = node.ref) && "function" !== typeof name && "object" !== typeof name) {
                    if (node._owner) {
                        if (node = node._owner) {
                            if (1 !== node.tag) {
                                throw Error(call(309));
                            }
                            var publicInst = node.stateNode;
                        }
                        if (!publicInst) {
                            throw Error(call(147, name));
                        }
                        var s = publicInst;
                        /** @type {string} */
                        var p = "" + name;
                        return null !== o && null !== o.ref && "function" === typeof o.ref && o.ref._stringRef === p ? o.ref : (o = function (url) {
                            var children = s.refs;
                            if (children === refs) {
                                children = s.refs = {};
                            }
                            if (null === url) {
                                delete children[p];
                            } else {
                                /** @type {!Object} */
                                children[p] = url;
                            }
                        }, o._stringRef = p, o);
                    }
                    if ("string" !== typeof name) {
                        throw Error(call(284));
                    }
                    if (!node._owner) {
                        throw Error(call(290, name));
                    }
                }
                return name;
            }
            /**
             * @param {string} message
             * @param {!Object} value
             * @return {?}
             */
            function fail(message, value) {
                throw message = Object.prototype.toString.call(value), Error(call(31, "[object Object]" === message ? "object with keys {" + Object.keys(value).join(", ") + "}" : message));
            }
            /**
             * @param {?} data
             * @return {?}
             */
            function round(data) {
                return (0, data._init)(data._payload);
            }
            /**
             * @param {boolean} str
             * @return {?}
             */
            function exports(str) {
                /**
                 * @param {string} f
                 * @param {!Object} v
                 * @return {undefined}
                 */
                function cb(f, v) {
                    if (str) {
                        var salt = f.deletions;
                        if (null === salt) {
                            /** @type {!Array} */
                            f.deletions = [v];
                            f.flags |= 16;
                        } else {
                            salt.push(v);
                        }
                    }
                }
                /**
                 * @param {string} obj
                 * @param {!Object} node
                 * @return {?}
                 */
                function get(obj, node) {
                    if (!str) {
                        return null;
                    }
                    for (; null !== node;) {
                        cb(obj, node);
                        node = node.sibling;
                    }
                    return null;
                }
                /**
                 * @param {!Object} result
                 * @param {!Object} node
                 * @return {?}
                 */
                function walk(result, node) {
                    /** @type {!Map} */
                    result = new Map;
                    for (; null !== node;) {
                        if (null !== node.key) {
                            result.set(node.key, node);
                        } else {
                            result.set(node.index, node);
                        }
                        node = node.sibling;
                    }
                    return result;
                }
                /**
                 * @param {!Object} obj
                 * @param {!Object} data
                 * @return {?}
                 */
                function build(obj, data) {
                    return (obj = clone(obj, data)).index = 0, obj.sibling = null, obj;
                }
                /**
                 * @param {!Object} obj
                 * @param {!Object} n
                 * @param {number} i
                 * @return {?}
                 */
                function validate(obj, n, i) {
                    return obj.index = i, str ? null !== (i = obj.alternate) ? (i = i.index) < n ? (obj.flags |= 2, n) : i : (obj.flags |= 2, n) : (obj.flags |= 1048576, n);
                }
                /**
                 * @param {!Object} parent
                 * @return {?}
                 */
                function _init(parent) {
                    return str && null === parent.alternate && (parent.flags |= 2), parent;
                }
                /**
                 * @param {string} value
                 * @param {!Object} result
                 * @param {!Object} map
                 * @param {!Object} query
                 * @return {?}
                 */
                function resolve(value, result, map, query) {
                    return null === result || 6 !== result.tag ? ((result = equal(map, value.mode, query)).return = value, result) : ((result = build(result, map)).return = value, result);
                }
                /**
                 * @param {string} node
                 * @param {!Object} type
                 * @param {!Object} data
                 * @param {!Object} result
                 * @return {?}
                 */
                function render(node, type, data, result) {
                    var value = data.type;
                    return value === string ? format(node, type, data.props.children, result, data.key) : null !== type && (type.elementType === value || "object" === typeof value && null !== value && value.$$typeof === vega && round(value) === type.type) ? ((result = build(type, data.props)).ref = create(node, type, data), result.return = node, result) : ((result = debug(data.type, data.key, data.props, null, node.mode, result)).ref = create(node, type, data), result.return = node, result);
                }
                /**
                 * @param {string} result
                 * @param {!Object} node
                 * @param {!Object} self
                 * @param {!Object} name
                 * @return {?}
                 */
                function wrap(result, node, self, name) {
                    return null === node || 4 !== node.tag || node.stateNode.containerInfo !== self.containerInfo || node.stateNode.implementation !== self.implementation ? ((node = validator(self, result.mode, name)).return = result, node) : ((node = build(node, self.children || [])).return = result, node);
                }
                /**
                 * @param {string} result
                 * @param {!Object} value
                 * @param {!Object} data
                 * @param {!Object} text
                 * @param {!Object} name
                 * @return {?}
                 */
                function format(result, value, data, text, name) {
                    return null === value || 7 !== value.tag ? ((value = f(data, result.mode, text, name)).return = result, value) : ((value = build(value, data)).return = result, value);
                }
                /**
                 * @param {string} result
                 * @param {!Object} data
                 * @param {!Object} p
                 * @return {?}
                 */
                function fn(result, data, p) {
                    if ("string" === typeof data && "" !== data || "number" === typeof data) {
                        return (data = equal("" + data, result.mode, p)).return = result, data;
                    }
                    if ("object" === typeof data && null !== data) {
                        switch (data.$$typeof) {
                            case normal:
                                return (p = debug(data.type, data.key, data.props, null, result.mode, p)).ref = create(result, null, data), p.return = result, p;
                            case array:
                                return (data = validator(data, result.mode, p)).return = result, data;
                            case vega:
                                return fn(result, (0, data._init)(data._payload), p);
                        }
                        if (isFunction(data) || isUndefined(data)) {
                            return (data = f(data, result.mode, p, null)).return = result, data;
                        }
                        fail(result, data);
                    }
                    return null;
                }
                /**
                 * @param {string} message
                 * @param {!Object} key
                 * @param {!Object} value
                 * @param {!Object} name
                 * @return {?}
                 */
                function callback(message, key, value, name) {
                    var object = null !== key ? key.key : null;
                    if ("string" === typeof value && "" !== value || "number" === typeof value) {
                        return null !== object ? null : resolve(message, key, "" + value, name);
                    }
                    if ("object" === typeof value && null !== value) {
                        switch (value.$$typeof) {
                            case normal:
                                return value.key === object ? render(message, key, value, name) : null;
                            case array:
                                return value.key === object ? wrap(message, key, value, name) : null;
                            case vega:
                                return callback(message, key, (object = value._init)(value._payload), name);
                        }
                        if (isFunction(value) || isUndefined(value)) {
                            return null !== object ? null : format(message, key, value, name, null);
                        }
                        fail(message, value);
                    }
                    return null;
                }
                /**
                 * @param {string} o
                 * @param {string} data
                 * @param {number} i
                 * @param {!Object} value
                 * @param {!Object} name
                 * @return {?}
                 */
                function f(o, data, i, value, name) {
                    if ("string" === typeof value && "" !== value || "number" === typeof value) {
                        return resolve(data, o = o.get(i) || null, "" + value, name);
                    }
                    if ("object" === typeof value && null !== value) {
                        switch (value.$$typeof) {
                            case normal:
                                return render(data, o = o.get(null === value.key ? i : value.key) || null, value, name);
                            case array:
                                return wrap(data, o = o.get(null === value.key ? i : value.key) || null, value, name);
                            case vega:
                                return f(o, data, i, (0, value._init)(value._payload), name);
                        }
                        if (isFunction(value) || isUndefined(value)) {
                            return format(data, o = o.get(i) || null, value, name, null);
                        }
                        fail(data, value);
                    }
                    return null;
                }
                /**
                 * @param {string} data
                 * @param {!Object} result
                 * @param {!Array} args
                 * @param {!Object} name
                 * @return {?}
                 */
                function next(data, result, args, name) {
                    /** @type {null} */
                    var lastFinishedNode = null;
                    /** @type {null} */
                    var child = null;
                    /** @type {!Object} */
                    var obj = result;
                    /** @type {number} */
                    var i = result = 0;
                    /** @type {null} */
                    var node = null;
                    for (; null !== obj && i < args.length; i++) {
                        if (obj.index > i) {
                            node = obj;
                            /** @type {null} */
                            obj = null;
                        } else {
                            node = obj.sibling;
                        }
                        var value = callback(data, obj, args[i], name);
                        if (null === value) {
                            if (null === obj) {
                                /** @type {null} */
                                obj = node;
                            }
                            break;
                        }
                        if (str && obj && null === value.alternate) {
                            cb(data, obj);
                        }
                        result = validate(value, result, i);
                        if (null === child) {
                            lastFinishedNode = value;
                        } else {
                            child.sibling = value;
                        }
                        child = value;
                        /** @type {null} */
                        obj = node;
                    }
                    if (i === args.length) {
                        return get(data, obj), err && reverse(data, i), lastFinishedNode;
                    }
                    if (null === obj) {
                        for (; i < args.length; i++) {
                            if (null !== (obj = fn(data, args[i], name))) {
                                result = validate(obj, result, i);
                                if (null === child) {
                                    lastFinishedNode = obj;
                                } else {
                                    child.sibling = obj;
                                }
                                child = obj;
                            }
                        }
                        return err && reverse(data, i), lastFinishedNode;
                    }
                    obj = walk(data, obj);
                    for (; i < args.length; i++) {
                        if (null !== (node = f(obj, data, i, args[i], name))) {
                            if (str && null !== node.alternate) {
                                obj.delete(null === node.key ? i : node.key);
                            }
                            result = validate(node, result, i);
                            if (null === child) {
                                lastFinishedNode = node;
                            } else {
                                child.sibling = node;
                            }
                            child = node;
                        }
                    }
                    return str && obj.forEach(function (n) {
                        return cb(data, n);
                    }), err && reverse(data, i), lastFinishedNode;
                }
                /**
                 * @param {string} data
                 * @param {!Object} p
                 * @param {!Object} value
                 * @param {!Object} name
                 * @return {?}
                 */
                function update(data, p, value, name) {
                    var task = isUndefined(value);
                    if ("function" !== typeof task) {
                        throw Error(call(150));
                    }
                    if (null == (value = task.call(value))) {
                        throw Error(call(151));
                    }
                    /** @type {null} */
                    var node = task = null;
                    /** @type {!Object} */
                    var c = p;
                    /** @type {number} */
                    var n = p = 0;
                    /** @type {null} */
                    var g = null;
                    var result = value.next();
                    for (; null !== c && !result.done; n++, result = value.next()) {
                        if (c.index > n) {
                            g = c;
                            /** @type {null} */
                            c = null;
                        } else {
                            g = c.sibling;
                        }
                        var value = callback(data, c, result.value, name);
                        if (null === value) {
                            if (null === c) {
                                /** @type {null} */
                                c = g;
                            }
                            break;
                        }
                        if (str && c && null === value.alternate) {
                            cb(data, c);
                        }
                        p = validate(value, p, n);
                        if (null === node) {
                            task = value;
                        } else {
                            node.sibling = value;
                        }
                        node = value;
                        /** @type {null} */
                        c = g;
                    }
                    if (result.done) {
                        return get(data, c), err && reverse(data, n), task;
                    }
                    if (null === c) {
                        for (; !result.done; n++, result = value.next()) {
                            if (null !== (result = fn(data, result.value, name))) {
                                p = validate(result, p, n);
                                if (null === node) {
                                    task = result;
                                } else {
                                    node.sibling = result;
                                }
                                node = result;
                            }
                        }
                        return err && reverse(data, n), task;
                    }
                    c = walk(data, c);
                    for (; !result.done; n++, result = value.next()) {
                        if (null !== (result = f(c, data, n, result.value, name))) {
                            if (str && null !== result.alternate) {
                                c.delete(null === result.key ? n : result.key);
                            }
                            p = validate(result, p, n);
                            if (null === node) {
                                task = result;
                            } else {
                                node.sibling = result;
                            }
                            node = result;
                        }
                    }
                    return str && c.forEach(function (n) {
                        return cb(data, n);
                    }), err && reverse(data, n), task;
                }
                return function init(result, node, data, value) {
                    if ("object" === typeof data && null !== data && data.type === string && null === data.key && (data = data.props.children), "object" === typeof data && null !== data) {
                        switch (data.$$typeof) {
                            case normal:
                                e: {
                                    var value = data.key;
                                    /** @type {!Object} */
                                    var item = node;
                                    for (; null !== item;) {
                                        if (item.key === value) {
                                            if ((value = data.type) === string) {
                                                if (7 === item.tag) {
                                                    get(result, item.sibling);
                                                    /** @type {string} */
                                                    (node = build(item, data.props.children)).return = result;
                                                    /** @type {!Object} */
                                                    result = node;
                                                    break e;
                                                }
                                            } else {
                                                if (item.elementType === value || "object" === typeof value && null !== value && value.$$typeof === vega && round(value) === item.type) {
                                                    get(result, item.sibling);
                                                    (node = build(item, data.props)).ref = create(result, item, data);
                                                    /** @type {string} */
                                                    node.return = result;
                                                    /** @type {!Object} */
                                                    result = node;
                                                    break e;
                                                }
                                            }
                                            get(result, item);
                                            break;
                                        }
                                        cb(result, item);
                                        item = item.sibling;
                                    }
                                    if (data.type === string) {
                                        /** @type {string} */
                                        (node = f(data.props.children, result.mode, value, data.key)).return = result;
                                        /** @type {!Object} */
                                        result = node;
                                    } else {
                                        (value = debug(data.type, data.key, data.props, null, result.mode, value)).ref = create(result, node, data);
                                        /** @type {string} */
                                        value.return = result;
                                        /** @type {!Object} */
                                        result = value;
                                    }
                                }
                                return _init(result);
                            case array:
                                e: {
                                    item = data.key;
                                    for (; null !== node;) {
                                        if (node.key === item) {
                                            if (4 === node.tag && node.stateNode.containerInfo === data.containerInfo && node.stateNode.implementation === data.implementation) {
                                                get(result, node.sibling);
                                                /** @type {string} */
                                                (node = build(node, data.children || [])).return = result;
                                                /** @type {!Object} */
                                                result = node;
                                                break e;
                                            }
                                            get(result, node);
                                            break;
                                        }
                                        cb(result, node);
                                        node = node.sibling;
                                    }
                                    /** @type {string} */
                                    (node = validator(data, result.mode, value)).return = result;
                                    /** @type {!Object} */
                                    result = node;
                                }
                                return _init(result);
                            case vega:
                                return init(result, node, (item = data._init)(data._payload), value);
                        }
                        if (isFunction(data)) {
                            return next(result, node, data, value);
                        }
                        if (isUndefined(data)) {
                            return update(result, node, data, value);
                        }
                        fail(result, data);
                    }
                    return "string" === typeof data && "" !== data || "number" === typeof data ? (data = "" + data, null !== node && 6 === node.tag ? (get(result, node.sibling), (node = build(node, data)).return = result, result = node) : (get(result, node), (node = equal(data, result.mode, value)).return = result, result = node), _init(result)) : get(result, node);
                };
            }
            /**
             * @param {?} event
             * @return {?}
             */
            function send(event) {
                if (event === line) {
                    throw Error(call(174));
                }
                return event;
            }
            /**
             * @param {?} type
             * @param {!Object} node
             * @return {undefined}
             */
            function unbind(type, node) {
                switch (log(message, node), log(t, type), log(row, line), type = node.nodeType) {
                    case 9:
                    case 11:
                        node = (node = node.documentElement) ? node.namespaceURI : execute(null, "");
                        break;
                    default:
                        node = execute(node = (type = 8 === type ? node.parentNode : node).namespaceURI || null, type = type.tagName);
                }
                isEmpty(row);
                log(row, node);
            }
            /**
             * @return {undefined}
             */
            function baseEach() {
                isEmpty(row);
                isEmpty(t);
                isEmpty(message);
            }
            /**
             * @param {?} event
             * @return {undefined}
             */
            function savetoBd(event) {
                send(message.current);
                var i = send(row.current);
                var s = execute(i, event.type);
                if (i !== s) {
                    log(t, event);
                    log(row, s);
                }
            }
            /**
             * @param {!Object} item
             * @return {undefined}
             */
            function param(item) {
                if (t.current === item) {
                    isEmpty(row);
                    isEmpty(t);
                }
            }
            /**
             * @param {!Object} parent
             * @return {?}
             */
            function evaluate(parent) {
                /** @type {!Object} */
                var node = parent;
                for (; null !== node;) {
                    if (13 === node.tag) {
                        var context = node.memoizedState;
                        if (null !== context && (null === (context = context.dehydrated) || "$?" === context.data || "$!" === context.data)) {
                            return node;
                        }
                    } else {
                        if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
                            if (0 !== (128 & node.flags)) {
                                return node;
                            }
                        } else {
                            if (null !== node.child) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                        }
                    }
                    if (node === parent) {
                        break;
                    }
                    for (; null === node.sibling;) {
                        if (null === node.return || node.return === parent) {
                            return null;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
                return null;
            }
            /**
             * @return {undefined}
             */
            function mapArray() {
                /** @type {number} */
                var i = 0;
                for (; i < keywordResults.length; i++) {
                    /** @type {null} */
                    keywordResults[i]._workInProgressVersionPrimary = null;
                }
                /** @type {number} */
                keywordResults.length = 0;
            }
            /**
             * @return {?}
             */
            function LOFOX() {
                throw Error(call(321));
            }
            /**
             * @param {!Array} a
             * @param {!Array} b
             * @return {?}
             */
            function query(a, b) {
                if (null === b) {
                    return false;
                }
                /** @type {number} */
                var i = 0;
                for (; i < b.length && i < a.length; i++) {
                    if (!compare(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            }
            /**
             * @param {!Object} str
             * @param {!Object} value
             * @param {?} format
             * @param {!Object} text
             * @param {?} obj
             * @param {number} key
             * @return {?}
             */
            function format(str, value, format, text, obj, key) {
                if (base = key, result = value, value.memoizedState = null, value.updateQueue = null, value.lanes = 0, water.current = null === str || null === str.memoizedState ? pageX : retryCounter, str = format(text, obj), tmp_headers) {
                    /** @type {number} */
                    key = 0;
                    do {
                        if (tmp_headers = false, x$$ = 0, 25 <= key) {
                            throw Error(call(301));
                        }
                        /** @type {number} */
                        key = key + 1;
                        /** @type {null} */
                        element = scope = null;
                        /** @type {null} */
                        value.updateQueue = null;
                        water.current = h2o;
                        str = format(text, obj);
                    } while (tmp_headers);
                }
                if (water.current = current, value = null !== scope && null !== scope.next, base = 0, element = scope = result = null, header_map = false, value) {
                    throw Error(call(300));
                }
                return str;
            }
            /**
             * @return {?}
             */
            function limit() {
                /** @type {boolean} */
                var voronoi = 0 !== x$$;
                return x$$ = 0, voronoi;
            }
            /**
             * @return {?}
             */
            function capture() {
                var root = {
                    memoizedState: null,
                    baseState: null,
                    baseQueue: null,
                    queue: null,
                    next: null
                };
                return null === element ? result.memoizedState = element = root : element = element.next = root, element;
            }
            /**
             * @return {?}
             */
            function node() {
                if (null === scope) {
                    var root = result.alternate;
                    root = null !== root ? root.memoizedState : null;
                } else {
                    root = scope.next;
                }
                var reactComponentElement = null === element ? result.memoizedState : element.next;
                if (null !== reactComponentElement) {
                    element = reactComponentElement;
                    scope = root;
                } else {
                    if (null === root) {
                        throw Error(call(310));
                    }
                    root = {
                        memoizedState: (scope = root).memoizedState,
                        baseState: scope.baseState,
                        baseQueue: scope.baseQueue,
                        queue: scope.queue,
                        next: null
                    };
                    if (null === element) {
                        result.memoizedState = element = root;
                    } else {
                        element = element.next = root;
                    }
                }
                return element;
            }
            /**
             * @param {!Object} obj
             * @param {!Function} value
             * @return {?}
             */
            function count(obj, value) {
                return "function" === typeof value ? value(obj) : value;
            }
            /**
             * @param {!Function} key
             * @return {?}
             */
            function tick(key) {
                var data = node();
                var result = data.queue;
                if (null === result) {
                    throw Error(call(311));
                }
                /** @type {!Function} */
                result.lastRenderedReducer = key;
                var e = scope;
                var item = e.baseQueue;
                var i = result.pending;
                if (null !== i) {
                    if (null !== item) {
                        var t = item.next;
                        item.next = i.next;
                        i.next = t;
                    }
                    e.baseQueue = item = i;
                    /** @type {null} */
                    result.pending = null;
                }
                if (null !== item) {
                    i = item.next;
                    e = e.baseState;
                    /** @type {null} */
                    var element = t = null;
                    /** @type {null} */
                    var scope = null;
                    var c = i;
                    do {
                        var i = c.lane;
                        if ((base & i) === i) {
                            if (null !== scope) {
                                scope = scope.next = {
                                    lane: 0,
                                    action: c.action,
                                    hasEagerState: c.hasEagerState,
                                    eagerState: c.eagerState,
                                    next: null
                                };
                            }
                            e = c.hasEagerState ? c.eagerState : key(e, c.action);
                        } else {
                            var root = {
                                lane: i,
                                action: c.action,
                                hasEagerState: c.hasEagerState,
                                eagerState: c.eagerState,
                                next: null
                            };
                            if (null === scope) {
                                element = scope = root;
                                t = e;
                            } else {
                                scope = scope.next = root;
                            }
                            result.lanes |= i;
                            /** @type {number} */
                            res = res | i;
                        }
                        c = c.next;
                    } while (null !== c && c !== i);
                    if (null === scope) {
                        t = e;
                    } else {
                        /** @type {null} */
                        scope.next = element;
                    }
                    if (!compare(e, data.memoizedState)) {
                        /** @type {boolean} */
                        track_index = true;
                    }
                    data.memoizedState = e;
                    /** @type {null} */
                    data.baseState = t;
                    /** @type {(null|{action: ??, eagerState: ??, hasEagerState: ??, lane: number, next: (null|{action: ??, eagerState: ??, hasEagerState: ??, lane: ??, next: null}|?)})} */
                    data.baseQueue = scope;
                    result.lastRenderedState = e;
                }
                if (null !== (key = result.interleaved)) {
                    /** @type {!Function} */
                    item = key;
                    do {
                        i = item.lane;
                        result.lanes |= i;
                        /** @type {number} */
                        res = res | i;
                        item = item.next;
                    } while (item !== key);
                } else {
                    if (null === item) {
                        /** @type {number} */
                        result.lanes = 0;
                    }
                }
                return [data.memoizedState, result.dispatch];
            }
            /**
             * @param {!Function} key
             * @return {?}
             */
            function Component(key) {
                var data = node();
                var message = data.queue;
                if (null === message) {
                    throw Error(call(311));
                }
                /** @type {!Function} */
                message.lastRenderedReducer = key;
                var dispatch = message.dispatch;
                var listener = message.pending;
                var value = data.memoizedState;
                if (null !== listener) {
                    /** @type {null} */
                    message.pending = null;
                    var v = listener = listener.next;
                    do {
                        value = key(value, v.action);
                        v = v.next;
                    } while (v !== listener);
                    if (!compare(value, data.memoizedState)) {
                        /** @type {boolean} */
                        track_index = true;
                    }
                    data.memoizedState = value;
                    if (null === data.baseQueue) {
                        data.baseState = value;
                    }
                    message.lastRenderedState = value;
                }
                return [value, dispatch];
            }
            /**
             * @return {undefined}
             */
            function Ti() {
            }
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @return {?}
             */
            function construct(key, target) {
                var token = result;
                var e = node();
                var item = target();
                /** @type {boolean} */
                var n = !compare(e.memoizedState, item);
                if (n && (e.memoizedState = item, track_index = true), e = e.queue, click(helpers.bind(null, token, e, key), [key]), e.getSnapshot !== target || n || null !== element && 1 & element.memoizedState.tag) {
                    if (token.flags |= 2048, append(9, logger.bind(null, token, e, item, target), void 0, null), null === value) {
                        throw Error(call(349));
                    }
                    if (!(0 !== (30 & base))) {
                        compute(token, target, item);
                    }
                }
                return item;
            }
            /**
             * @param {!Object} value
             * @param {!Object} options
             * @param {!Object} data
             * @return {undefined}
             */
            function compute(value, options, data) {
                value.flags |= 16384;
                value = {
                    getSnapshot: options,
                    value: data
                };
                if (null === (options = result.updateQueue)) {
                    options = {
                        lastEffect: null,
                        stores: null
                    };
                    /** @type {!Object} */
                    result.updateQueue = options;
                    /** @type {!Array} */
                    options.stores = [value];
                } else {
                    if (null === (data = options.stores)) {
                        /** @type {!Array} */
                        options.stores = [value];
                    } else {
                        data.push(value);
                    }
                }
            }
            /**
             * @param {!Object} args
             * @param {number} scope
             * @param {!Object} type
             * @param {?} next
             * @return {undefined}
             */
            function logger(args, scope, type, next) {
                /** @type {!Object} */
                scope.value = type;
                scope.getSnapshot = next;
                if (forEach(scope)) {
                    keys(args);
                }
            }
            /**
             * @param {!Object} groups
             * @param {undefined} config
             * @param {?} fn
             * @return {?}
             */
            function helpers(groups, config, fn) {
                return fn(function () {
                    if (forEach(config)) {
                        keys(groups);
                    }
                });
            }
            /**
             * @param {number} obj
             * @return {?}
             */
            function forEach(obj) {
                var action = obj.getSnapshot;
                obj = obj.value;
                try {
                    var result = action();
                    return !compare(obj, result);
                } catch (r) {
                    return true;
                }
            }
            /**
             * @param {!Object} r
             * @return {undefined}
             */
            function keys(r) {
                var rows = $(r, 1);
                if (null !== rows) {
                    assert(rows, r, 1, -1);
                }
            }
            /**
             * @param {string} key
             * @return {?}
             */
            function b(key) {
                var state = capture();
                return "function" === typeof key && (key = key()), state.memoizedState = state.baseState = key, key = {
                    pending: null,
                    interleaved: null,
                    lanes: 0,
                    dispatch: null,
                    lastRenderedReducer: count,
                    lastRenderedState: key
                }, state.queue = key, key = key.dispatch = finish.bind(null, result, key), [state.memoizedState, key];
            }
            /**
             * @param {!Object} data
             * @param {string} node
             * @param {!Node} args
             * @param {!Object} obj
             * @return {?}
             */
            function append(data, node, args, obj) {
                return data = {
                    tag: data,
                    create: node,
                    destroy: args,
                    deps: obj,
                    next: null
                }, null === (node = result.updateQueue) ? (node = {
                    lastEffect: null,
                    stores: null
                }, result.updateQueue = node, node.lastEffect = data.next = data) : null === (args = node.lastEffect) ? node.lastEffect = data.next = data : (obj = args.next, args.next = data, data.next = obj, node.lastEffect = data), data;
            }
            /**
             * @return {?}
             */
            function load_with_files() {
                return node().memoizedState;
            }
            /**
             * @param {number} flags
             * @param {number} fn
             * @param {!Function} i
             * @param {?} a
             * @return {undefined}
             */
            function same(flags, fn, i, a) {
                var c = capture();
                result.flags |= flags;
                c.memoizedState = append(1 | fn, i, void 0, void 0 === a ? null : a);
            }
            /**
             * @param {number} value
             * @param {number} start
             * @param {!Function} x
             * @param {?} key
             * @return {?}
             */
            function fire(value, start, x, key) {
                var data = node();
                key = void 0 === key ? null : key;
                var i = void 0;
                if (null !== scope) {
                    var child = scope.memoizedState;
                    if (i = child.destroy, null !== key && query(key, child.deps)) {
                        return void (data.memoizedState = append(start, x, i, key));
                    }
                }
                result.flags |= value;
                data.memoizedState = append(1 | start, x, i, key);
            }
            /**
             * @param {!Function} key
             * @param {!Array} a
             * @return {?}
             */
            function missing(key, a) {
                return same(8390656, 8, key, a);
            }
            /**
             * @param {!Function} key
             * @param {!Array} e
             * @return {?}
             */
            function click(key, e) {
                return fire(2048, 8, key, e);
            }
            /**
             * @param {!Function} key
             * @param {!Array} e
             * @return {?}
             */
            function keyDown(key, e) {
                return fire(4, 2, key, e);
            }
            /**
             * @param {!Function} key
             * @param {!Array} e
             * @return {?}
             */
            function cancel(key, e) {
                return fire(4, 4, key, e);
            }
            /**
             * @param {number} data
             * @param {!Object} callback
             * @return {?}
             */
            function form(data, callback) {
                return "function" === typeof callback ? (data = data(), callback(data), function () {
                    callback(null);
                }) : null !== callback && void 0 !== callback ? (data = data(), callback.current = data, function () {
                    /** @type {null} */
                    callback.current = null;
                }) : void 0;
            }
            /**
             * @param {!Function} key
             * @param {!Array} t
             * @param {?} e
             * @return {?}
             */
            function doSplay(key, t, e) {
                return e = null !== e && void 0 !== e ? e.concat([key]) : null, fire(4, 4, form.bind(null, t, key), e);
            }
            /**
             * @return {undefined}
             */
            function Qi() {
            }
            /**
             * @param {!Function} key
             * @param {?} id
             * @return {?}
             */
            function setAssociatedID(key, id) {
                var fiber = node();
                id = void 0 === id ? null : id;
                var type = fiber.memoizedState;
                return null !== type && null !== id && query(id, type[1]) ? type[0] : (fiber.memoizedState = [key, id], key);
            }
            /**
             * @param {!Function} key
             * @param {?} id
             * @return {?}
             */
            function clearItem(key, id) {
                var fiber = node();
                id = void 0 === id ? null : id;
                var type = fiber.memoizedState;
                return null !== type && null !== id && query(id, type[1]) ? type[0] : (key = key(), fiber.memoizedState = [key, id], key);
            }
            /**
             * @param {?} array
             * @param {?} a
             * @param {!Array} i
             * @return {?}
             */
            function findIndex(array, a, i) {
                return 0 === (21 & base) ? (array.baseState && (array.baseState = false, track_index = true), array.memoizedState = i) : (compare(i, a) || (i = min(), result.lanes |= i, res = res | i, array.baseState = true), a);
            }
            /**
             * @param {?} scale
             * @param {?} translate
             * @return {undefined}
             */
            function zoom(scale, translate) {
                var nativeEvent = touch;
                touch = 0 !== nativeEvent && 4 > nativeEvent ? nativeEvent : 4;
                scale(true);
                var transition = settings.transition;
                settings.transition = {};
                try {
                    scale(false);
                    translate();
                } finally {
                    touch = nativeEvent;
                    settings.transition = transition;
                }
            }
            /**
             * @return {?}
             */
            function pointDblClick() {
                return node().memoizedState;
            }
            /**
             * @param {!Object} message
             * @param {!Object} callback
             * @param {!Object} options
             * @return {undefined}
             */
            function delay(message, callback, options) {
                var cb = Number(message);
                if (options = {
                    lane: cb,
                    action: options,
                    hasEagerState: false,
                    eagerState: null,
                    next: null
                }, exit(message)) {
                    nextTick(callback, options);
                } else {
                    if (null !== (options = output(message, callback, options, cb))) {
                        assert(options, message, cb, requestAnimationFrame());
                        put(options, callback, cb);
                    }
                }
            }
            /**
             * @param {!Object} e
             * @param {!Object} options
             * @param {!Object} value
             * @return {?}
             */
            function finish(e, options, value) {
                var cb = Number(e);
                var request = {
                    lane: cb,
                    action: value,
                    hasEagerState: false,
                    eagerState: null,
                    next: null
                };
                if (exit(e)) {
                    nextTick(options, request);
                } else {
                    var data = e.alternate;
                    if (0 === e.lanes && (null === data || 0 === data.lanes) && null !== (data = options.lastRenderedReducer)) {
                        try {
                            var item = options.lastRenderedState;
                            var m = data(item, value);
                            if (request.hasEagerState = true, request.eagerState = m, compare(m, item)) {
                                var me = options.interleaved;
                                return null === me ? (request.next = request, generate(options)) : (request.next = me.next, me.next = request), void (options.interleaved = request);
                            }
                        } catch (c) {
                        }
                    }
                    if (null !== (value = output(e, options, request, cb))) {
                        assert(value, e, cb, request = requestAnimationFrame());
                        put(value, options, cb);
                    }
                }
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function exit(node) {
                var object = node.alternate;
                return node === result || null !== object && object === result;
            }
            /**
             * @param {!Object} args
             * @param {!Object} target
             * @return {undefined}
             */
            function nextTick(args, target) {
                /** @type {boolean} */
                tmp_headers = header_map = true;
                var source = args.pending;
                if (null === source) {
                    /** @type {!Object} */
                    target.next = target;
                } else {
                    target.next = source.next;
                    /** @type {!Object} */
                    source.next = target;
                }
                /** @type {!Object} */
                args.pending = target;
            }
            /**
             * @param {boolean} data
             * @param {!Object} result
             * @param {number} id
             * @return {undefined}
             */
            function put(data, result, id) {
                if (0 !== (4194240 & id)) {
                    var courseSections = result.lanes;
                    /** @type {number} */
                    id = id | (courseSections = courseSections & data.pendingLanes);
                    /** @type {number} */
                    result.lanes = id;
                    isValid(data, id);
                }
            }
            /**
             * @param {?} o
             * @param {!Object} elem
             * @return {?}
             */
            function next(o, elem) {
                try {
                    /** @type {string} */
                    var id = "";
                    /** @type {!Object} */
                    var node = elem;
                    do {
                        /** @type {string} */
                        id = id + join(node);
                        node = node.return;
                    } while (node);
                    /** @type {string} */
                    var res = id;
                } catch (runErr) {
                    /** @type {string} */
                    res = "\nError generating stack: " + runErr.message + "\n" + runErr.stack;
                }
                return {
                    value: o,
                    source: elem,
                    stack: res,
                    digest: null
                };
            }
            /**
             * @param {?} y
             * @param {string} time
             * @param {number} err
             * @return {?}
             */
            function position(y, time, err) {
                return {
                    value: y,
                    source: null,
                    stack: null != err ? err : null,
                    digest: null != time ? time : null
                };
            }
            /**
             * @param {number} r
             * @param {!Object} token
             * @return {undefined}
             */
            function submitCommentWithToken(r, token) {
                try {
                    console.error(token.value);
                } catch (n) {
                    setTimeout(function () {
                        throw n;
                    });
                }
            }
            /**
             * @param {number} error
             * @param {!Object} t
             * @param {!Object} options
             * @return {?}
             */
            function push(error, t, options) {
                /** @type {number} */
                (options = concat(-1, options)).tag = 3;
                options.payload = {
                    element: null
                };
                var original = t.value;
                return options.callback = function () {
                    if (!_cx) {
                        /** @type {boolean} */
                        _cx = true;
                        selected = original;
                    }
                    submitCommentWithToken(0, t);
                }, options;
            }
            /**
             * @param {!Object} node
             * @param {!Object} token
             * @param {!Object} data
             * @return {?}
             */
            function initialize(node, token, data) {
                /** @type {number} */
                (data = concat(-1, data)).tag = 3;
                var done = node.type.getDerivedStateFromError;
                if ("function" === typeof done) {
                    var state = token.value;
                    /**
                     * @return {?}
                     */
                    data.payload = function () {
                        return done(state);
                    };
                    /**
                     * @return {undefined}
                     */
                    data.callback = function () {
                        submitCommentWithToken(0, token);
                    };
                }
                var publicInst = node.stateNode;
                return null !== publicInst && "function" === typeof publicInst.componentDidCatch && (data.callback = function () {
                    submitCommentWithToken(0, token);
                    if ("function" !== typeof done) {
                        if (null === laxCharList) {
                            /** @type {!Set} */
                            laxCharList = new Set([this]);
                        } else {
                            laxCharList.add(this);
                        }
                    }
                    var url = token.stack;
                    this.componentDidCatch(token.value, {
                        componentStack: null !== url ? url : ""
                    });
                }), data;
            }
            /**
             * @param {!Function} b
             * @param {!Object} t
             * @param {!Object} id
             * @return {undefined}
             */
            function fill(b, t, id) {
                var r = b.pingCache;
                if (null === r) {
                    r = b.pingCache = new type;
                    /** @type {!Set} */
                    var o = new Set;
                    r.set(t, o);
                } else {
                    if (void 0 === (o = r.get(t))) {
                        /** @type {!Set} */
                        o = new Set;
                        r.set(t, o);
                    }
                }
                if (!o.has(id)) {
                    o.add(id);
                    b = analyze.bind(null, b, t, id);
                    t.then(b, b);
                }
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function clamp(value) {
                do {
                    var state;
                    if ((state = 13 === value.tag) && (state = null === (state = value.memoizedState) || null !== state.dehydrated), state) {
                        return value;
                    }
                    value = value.return;
                } while (null !== value);
                return null;
            }
            /**
             * @param {!Object} data
             * @param {!Object} arr
             * @param {!Object} obj
             * @param {number} key
             * @param {number} record
             * @return {?}
             */
            function convert(data, arr, obj, key, record) {
                return 0 === (1 & data.mode) ? (data === arr ? data.flags |= 65536 : (data.flags |= 128, obj.flags |= 131072, obj.flags &= -52805, 1 === obj.tag && (null === obj.alternate ? obj.tag = 17 : ((arr = concat(-1, 1)).tag = 2, filter(obj, arr, 1))), obj.lanes |= 1), data) : (data.flags |= 65536, data.lanes = record, data);
            }
            /**
             * @param {!Object} string
             * @param {!Object} data
             * @param {!Function} opts
             * @param {!Object} options
             * @return {undefined}
             */
            function createElement(string, data, opts, options) {
                data.child = null === string ? generateAggregationCells(data, null, opts, options) : spawn(data, string.child, opts, options);
            }
            /**
             * @param {!Object} type
             * @param {!Object} key
             * @param {(Object|string)} res
             * @param {!Object} data
             * @param {!Array} value
             * @return {?}
             */
            function main(type, key, res, data, value) {
                res = res.render;
                var name = key.ref;
                return fetch(key, value), data = format(type, key, res, data, name, value), res = limit(), null === type || track_index ? (err && res && on(key), key.flags |= 1, createElement(type, key, data, value), key.child) : (key.updateQueue = type.updateQueue, key.flags &= -2053, type.lanes &= ~value, fn(type, key, value));
            }
            /**
             * @param {!Object} result
             * @param {!Object} data
             * @param {!Object} action
             * @param {undefined} options
             * @param {!Object} e
             * @return {?}
             */
            function end(result, data, action, options, e) {
                if (null === result) {
                    var value = action.type;
                    return "function" !== typeof value || dump(value) || void 0 !== value.defaultProps || null !== action.compare || void 0 !== action.defaultProps ? ((result = debug(action.type, null, options, data, data.mode, e)).ref = data.ref, result.return = data, data.child = result) : (data.tag = 15, data.type = value, transform(result, data, value, options, e));
                }
                if (value = result.child, 0 === (result.lanes & e)) {
                    var e = value.memoizedProps;
                    if ((action = null !== (action = action.compare) ? action : deepEqual)(e, options) && result.ref === data.ref) {
                        return fn(result, data, e);
                    }
                }
                return data.flags |= 1, (result = clone(value, options)).ref = data.ref, result.return = data, data.child = result;
            }
            /**
             * @param {!Object} p
             * @param {!Object} data
             * @param {undefined} options
             * @param {(Object|string)} d
             * @param {!Object} e
             * @return {?}
             */
            function transform(p, data, options, d, e) {
                if (null !== p) {
                    var a = p.memoizedProps;
                    if (deepEqual(a, d) && p.ref === data.ref) {
                        if (track_index = false, data.pendingProps = d = a, 0 === (p.lanes & e)) {
                            return data.lanes = p.lanes, fn(p, data, e);
                        }
                        if (0 !== (131072 & p.flags)) {
                            /** @type {boolean} */
                            track_index = true;
                        }
                    }
                }
                return list(p, data, options, d, e);
            }
            /**
             * @param {!Object} a
             * @param {!Object} p
             * @param {number} e
             * @return {?}
             */
            function reset(a, p, e) {
                var o = p.pendingProps;
                var data = o.children;
                var event = null !== a ? a.memoizedState : null;
                if ("hidden" === o.mode) {
                    if (0 === (1 & p.mode)) {
                        p.memoizedState = {
                            baseLanes: 0,
                            cachePool: null,
                            transitions: null
                        };
                        log(str, ret);
                        /** @type {number} */
                        ret = ret | e;
                    } else {
                        if (0 === (1073741824 & e)) {
                            return a = null !== event ? event.baseLanes | e : e, p.lanes = p.childLanes = 1073741824, p.memoizedState = {
                                baseLanes: a,
                                cachePool: null,
                                transitions: null
                            }, p.updateQueue = null, log(str, ret), ret = ret | a, null;
                        }
                        p.memoizedState = {
                            baseLanes: 0,
                            cachePool: null,
                            transitions: null
                        };
                        o = null !== event ? event.baseLanes : e;
                        log(str, ret);
                        /** @type {number} */
                        ret = ret | o;
                    }
                } else {
                    if (null !== event) {
                        /** @type {number} */
                        o = event.baseLanes | e;
                        /** @type {null} */
                        p.memoizedState = null;
                    } else {
                        /** @type {number} */
                        o = e;
                    }
                    log(str, ret);
                    /** @type {number} */
                    ret = ret | o;
                }
                return createElement(a, p, data, e), p.child;
            }
            /**
             * @param {!Object} type
             * @param {!Object} key
             * @return {undefined}
             */
            function mapIfSupported(type, key) {
                var id = key.ref;
                if (null === type && null !== id || null !== type && type.ref !== id) {
                    key.flags |= 512;
                    key.flags |= 2097152;
                }
            }
            /**
             * @param {!Object} type
             * @param {!Object} key
             * @param {number} value
             * @param {(Object|string)} name
             * @param {!Array} data
             * @return {?}
             */
            function list(type, key, value, name, data) {
                var target = isString(value) ? parent : obj.current;
                return target = merge(key, target), fetch(key, data), value = format(type, key, value, name, target, data), name = limit(), null === type || track_index ? (err && name && on(key), key.flags |= 1, createElement(type, key, value, data), key.child) : (key.updateQueue = type.updateQueue, key.flags &= -2053, type.lanes &= ~data, fn(type, key, data));
            }
            /**
             * @param {!Object} scope
             * @param {!Object} data
             * @param {undefined} options
             * @param {?} name
             * @param {boolean} type
             * @return {?}
             */
            function renderComponent(scope, data, options, name, type) {
                if (isString(options)) {
                    /** @type {boolean} */
                    var profile = true;
                    view(data);
                } else {
                    /** @type {boolean} */
                    profile = false;
                }
                if (fetch(data, type), null === data.stateNode) {
                    visit(scope, data);
                    apply(data, options, name);
                    set(data, options, name, type);
                    /** @type {boolean} */
                    name = true;
                } else {
                    if (null === scope) {
                        var component = data.stateNode;
                        var index = data.memoizedProps;
                        component.props = index;
                        var context = component.context;
                        var value = options.contextType;
                        if ("object" === typeof value && null !== value) {
                            value = require(value);
                        } else {
                            value = merge(data, value = isString(options) ? parent : obj.current);
                        }
                        var d = options.getDerivedStateFromProps;
                        /** @type {boolean} */
                        var count = "function" === typeof d || "function" === typeof component.getSnapshotBeforeUpdate;
                        if (!(count || "function" !== typeof component.UNSAFE_componentWillReceiveProps && "function" !== typeof component.componentWillReceiveProps)) {
                            if (index !== name || context !== value) {
                                addItem(data, component, name, value);
                            }
                        }
                        /** @type {boolean} */
                        definition = false;
                        var i = data.memoizedState;
                        component.state = i;
                        validate(data, name, component, type);
                        context = data.memoizedState;
                        if (index !== name || i !== context || users.current || definition) {
                            if ("function" === typeof d) {
                                patch(data, options, d, name);
                                context = data.memoizedState;
                            }
                            if (index = definition || mixin(data, options, index, name, i, context, value)) {
                                if (!(count || "function" !== typeof component.UNSAFE_componentWillMount && "function" !== typeof component.componentWillMount)) {
                                    if ("function" === typeof component.componentWillMount) {
                                        component.componentWillMount();
                                    }
                                    if ("function" === typeof component.UNSAFE_componentWillMount) {
                                        component.UNSAFE_componentWillMount();
                                    }
                                }
                                if ("function" === typeof component.componentDidMount) {
                                    data.flags |= 4194308;
                                }
                            } else {
                                if ("function" === typeof component.componentDidMount) {
                                    data.flags |= 4194308;
                                }
                                data.memoizedProps = name;
                                data.memoizedState = context;
                            }
                            component.props = name;
                            component.state = context;
                            component.context = value;
                            name = index;
                        } else {
                            if ("function" === typeof component.componentDidMount) {
                                data.flags |= 4194308;
                            }
                            /** @type {boolean} */
                            name = false;
                        }
                    } else {
                        component = data.stateNode;
                        post(scope, data);
                        index = data.memoizedProps;
                        value = data.type === data.elementType ? index : iterator(data.type, index);
                        component.props = value;
                        count = data.pendingProps;
                        i = component.context;
                        if ("object" === typeof (context = options.contextType) && null !== context) {
                            context = require(context);
                        } else {
                            context = merge(data, context = isString(options) ? parent : obj.current);
                        }
                        var cb = options.getDerivedStateFromProps;
                        if (!((d = "function" === typeof cb || "function" === typeof component.getSnapshotBeforeUpdate) || "function" !== typeof component.UNSAFE_componentWillReceiveProps && "function" !== typeof component.componentWillReceiveProps)) {
                            if (index !== count || i !== context) {
                                addItem(data, component, name, context);
                            }
                        }
                        /** @type {boolean} */
                        definition = false;
                        i = data.memoizedState;
                        component.state = i;
                        validate(data, name, component, type);
                        var state = data.memoizedState;
                        if (index !== count || i !== state || users.current || definition) {
                            if ("function" === typeof cb) {
                                patch(data, options, cb, name);
                                state = data.memoizedState;
                            }
                            if (value = definition || mixin(data, options, value, name, i, state, context) || false) {
                                if (!(d || "function" !== typeof component.UNSAFE_componentWillUpdate && "function" !== typeof component.componentWillUpdate)) {
                                    if ("function" === typeof component.componentWillUpdate) {
                                        component.componentWillUpdate(name, state, context);
                                    }
                                    if ("function" === typeof component.UNSAFE_componentWillUpdate) {
                                        component.UNSAFE_componentWillUpdate(name, state, context);
                                    }
                                }
                                if ("function" === typeof component.componentDidUpdate) {
                                    data.flags |= 4;
                                }
                                if ("function" === typeof component.getSnapshotBeforeUpdate) {
                                    data.flags |= 1024;
                                }
                            } else {
                                if (!("function" !== typeof component.componentDidUpdate || index === scope.memoizedProps && i === scope.memoizedState)) {
                                    data.flags |= 4;
                                }
                                if (!("function" !== typeof component.getSnapshotBeforeUpdate || index === scope.memoizedProps && i === scope.memoizedState)) {
                                    data.flags |= 1024;
                                }
                                data.memoizedProps = name;
                                data.memoizedState = state;
                            }
                            component.props = name;
                            component.state = state;
                            component.context = context;
                            name = value;
                        } else {
                            if (!("function" !== typeof component.componentDidUpdate || index === scope.memoizedProps && i === scope.memoizedState)) {
                                data.flags |= 4;
                            }
                            if (!("function" !== typeof component.getSnapshotBeforeUpdate || index === scope.memoizedProps && i === scope.memoizedState)) {
                                data.flags |= 1024;
                            }
                            /** @type {boolean} */
                            name = false;
                        }
                    }
                }
                return compile(scope, data, options, name, profile, type);
            }
            /**
             * @param {!Object} key
             * @param {!Object} node
             * @param {(Object|string)} params
             * @param {!Object} f
             * @param {!Function} item
             * @param {?} x
             * @return {?}
             */
            function compile(key, node, params, f, item, x) {
                mapIfSupported(key, node);
                /** @type {boolean} */
                var shouldShowTree = 0 !== (128 & node.flags);
                if (!f && !shouldShowTree) {
                    return item && isObject(node, params, false), fn(key, node, x);
                }
                f = node.stateNode;
                /** @type {!Object} */
                heap.current = node;
                var opts = shouldShowTree && "function" !== typeof params.getDerivedStateFromError ? null : f.render();
                return node.flags |= 1, null !== key && shouldShowTree ? (node.child = spawn(node, key.child, null, x), node.child = spawn(node, null, opts, x)) : createElement(key, node, opts, x), node.memoizedState = f.state, item && isObject(node, params, true), node.child;
            }
            /**
             * @param {(Object|string)} data
             * @return {undefined}
             */
            function findSelectedData(data) {
                var settings = data.stateNode;
                if (settings.pendingContext) {
                    addListener(0, settings.pendingContext, settings.pendingContext !== settings.context);
                } else {
                    if (settings.context) {
                        addListener(0, settings.context, false);
                    }
                }
                unbind(data, settings.containerInfo);
            }
            /**
             * @param {!Object} pattern
             * @param {!Object} value
             * @param {!Function} text
             * @param {!Object} args
             * @param {!Object} stream
             * @return {?}
             */
            function _format(pattern, value, text, args, stream) {
                return attr(), expect(stream), value.flags |= 256, createElement(pattern, value, text, args), value.child;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            function eq(value) {
                return {
                    baseLanes: value,
                    cachePool: null,
                    transitions: null
                };
            }
            /**
             * @param {!Object} obj
             * @param {!Object} el
             * @param {!Array} value
             * @return {?}
             */
            function hide(obj, el, value) {
                var target;
                var node = el.pendingProps;
                var i = config.current;
                /** @type {boolean} */
                var child = false;
                /** @type {boolean} */
                var data = 0 !== (128 & el.flags);
                if ((target = data) || (target = (null === obj || null !== obj.memoizedState) && 0 !== (2 & i)), target ? (child = true, el.flags &= -129) : null !== obj && null === obj.memoizedState || (i = i | 1), log(config, 1 & i), null === obj) {
                    return transition(el), null !== (obj = el.memoizedState) && null !== (obj = obj.dehydrated) ? (0 === (1 & el.mode) ? el.lanes = 1 : "$!" === obj.data ? el.lanes = 8 : el.lanes = 1073741824, null) : (data = node.children, obj = node.fallback, child ? (node = el.mode, child = el.child, data = {
                        mode: "hidden",
                        children: data
                    }, 0 === (1 & node) && null !== child ? (child.childLanes = 0, child.pendingProps = data) : child = indexOf(data, node, 0, null), obj = f(obj, node, value, null), child.return = el, obj.return = el, child.sibling = obj, el.child = child, el.child.memoizedState = eq(value), el.memoizedState = geometryNode, obj) : build(el, data));
                }
                if (null !== (i = obj.memoizedState) && null !== (target = i.dehydrated)) {
                    return function (e, node, aNetChannelMessage, options, data, obj, name) {
                        if (aNetChannelMessage) {
                            return 256 & node.flags ? (node.flags &= -257, after(e, node, name, options = position(Error(call(422))))) : null !== node.memoizedState ? (node.child = e.child, node.flags |= 128, null) : (obj = options.fallback, data = node.mode, options = indexOf({
                                mode: "visible",
                                children: options.children
                            }, data, 0, null), (obj = f(obj, data, name, null)).flags |= 2, options.return = node, obj.return = node, options.sibling = obj, node.child = options, 0 !== (1 & node.mode) && spawn(node, e.child, null, name), node.child.memoizedState = eq(name), node.memoizedState = geometryNode, obj);
                        }
                        if (0 === (1 & node.mode)) {
                            return after(e, node, name, null);
                        }
                        if ("$!" === data.data) {
                            if (options = data.nextSibling && data.nextSibling.dataset) {
                                var helpText = options.dgst;
                            }
                            return options = helpText, after(e, node, name, options = position(obj = Error(call(419)), options, void 0));
                        }
                        if (helpText = 0 !== (name & e.childLanes), track_index || helpText) {
                            if (null !== (options = value)) {
                                switch (name & -name) {
                                    case 4:
                                        /** @type {number} */
                                        data = 2;
                                        break;
                                    case 16:
                                        /** @type {number} */
                                        data = 8;
                                        break;
                                    case 64:
                                    case 128:
                                    case 256:
                                    case 512:
                                    case 1024:
                                    case 2048:
                                    case 4096:
                                    case 8192:
                                    case 16384:
                                    case 32768:
                                    case 65536:
                                    case 131072:
                                    case 262144:
                                    case 524288:
                                    case 1048576:
                                    case 2097152:
                                    case 4194304:
                                    case 8388608:
                                    case 16777216:
                                    case 33554432:
                                    case 67108864:
                                        /** @type {number} */
                                        data = 32;
                                        break;
                                    case 536870912:
                                        /** @type {number} */
                                        data = 268435456;
                                        break;
                                    default:
                                        /** @type {number} */
                                        data = 0;
                                }
                                if (0 !== (data = 0 !== (data & (options.suspendedLanes | name)) ? 0 : data) && data !== obj.retryLane) {
                                    /** @type {!Object} */
                                    obj.retryLane = data;
                                    $(e, data);
                                    assert(options, e, data, -1);
                                }
                            }
                            return fadeOut(), after(e, node, name, options = position(Error(call(421))));
                        }
                        return "$?" === data.data ? (node.flags |= 128, node.child = e.child, node = sendDataToClient.bind(null, e), data._reactRetry = node, null) : (e = obj.treeContext, r = text(data.nextSibling), doc = node, err = true, paths = null, null !== e && (cache[j++] = v, cache[j++] = msg, cache[j++] = resolvedLink, v = e.id, msg = e.overflow, resolvedLink = node), (node = build(node, options.children)).flags |= 4096, node);
                    }(obj, el, data, node, target, i, value);
                }
                if (child) {
                    child = node.fallback;
                    data = el.mode;
                    target = (i = obj.child).sibling;
                    var defaults = {
                        mode: "hidden",
                        children: node.children
                    };
                    return 0 === (1 & data) && el.child !== i ? ((node = el.child).childLanes = 0, node.pendingProps = defaults, el.deletions = null) : (node = clone(i, defaults)).subtreeFlags = 14680064 & i.subtreeFlags, null !== target ? child = clone(target, child) : (child = f(child, data, value, null)).flags |= 2, child.return = el, node.return = el, node.sibling = child, el.child = node, node = child, child = el.child, data = null === (data = obj.child.memoizedState) ? eq(value) : {
                        baseLanes: data.baseLanes | value,
                        cachePool: null,
                        transitions: data.transitions
                    }, child.memoizedState = data, child.childLanes = obj.childLanes & ~value, el.memoizedState = geometryNode, node;
                }
                return obj = (child = obj.child).sibling, node = clone(child, {
                    mode: "visible",
                    children: node.children
                }), 0 === (1 & el.mode) && (node.lanes = value), node.return = el, node.sibling = null, null !== obj && (null === (value = el.deletions) ? (el.deletions = [obj], el.flags |= 16) : value.push(obj)), el.child = node, el.memoizedState = null, node;
            }
            /**
             * @param {!Object} node
             * @param {!Object} image
             * @return {?}
             */
            function build(node, image) {
                return (image = indexOf({
                    mode: "visible",
                    children: image
                }, node.mode, 0, null)).return = node, node.child = image;
            }
            /**
             * @param {!Object} value
             * @param {!Object} node
             * @param {number} cb
             * @param {!Object} valid
             * @return {?}
             */
            function after(value, node, cb, valid) {
                return null !== valid && expect(valid), spawn(node, value.child, null, cb), (value = build(node, node.pendingProps.children)).flags |= 2, node.memoizedState = null, value;
            }
            /**
             * @param {!Object} node
             * @param {(Object|string)} value
             * @param {!Object} data
             * @return {undefined}
             */
            function checkConditional(node, value, data) {
                node.lanes |= value;
                var alt = node.alternate;
                if (null !== alt) {
                    alt.lanes |= value;
                }
                report(node.return, value, data);
            }
            /**
             * @param {!Object} c
             * @param {boolean} n
             * @param {boolean} node
             * @param {!Object} item
             * @param {!Object} type
             * @return {undefined}
             */
            function e(c, n, node, item, type) {
                var data = c.memoizedState;
                if (null === data) {
                    c.memoizedState = {
                        isBackwards: n,
                        rendering: null,
                        renderingStartTime: 0,
                        last: item,
                        tail: node,
                        tailMode: type
                    };
                } else {
                    /** @type {boolean} */
                    data.isBackwards = n;
                    /** @type {null} */
                    data.rendering = null;
                    /** @type {number} */
                    data.renderingStartTime = 0;
                    /** @type {!Object} */
                    data.last = item;
                    /** @type {boolean} */
                    data.tail = node;
                    /** @type {!Object} */
                    data.tailMode = type;
                }
            }
            /**
             * @param {!Object} node
             * @param {!Object} body
             * @param {!Object} n
             * @return {?}
             */
            function parse(node, body, n) {
                var data = body.pendingProps;
                var next = data.revealOrder;
                var end = data.tail;
                if (createElement(node, body, data.children, n), 0 !== (2 & (data = config.current))) {
                    /** @type {number} */
                    data = 1 & data | 2;
                    body.flags |= 128;
                } else {
                    if (null !== node && 0 !== (128 & node.flags)) {
                        node = body.child;
                        e: for (; null !== node;) {
                            if (13 === node.tag) {
                                if (null !== node.memoizedState) {
                                    checkConditional(node, n, body);
                                }
                            } else {
                                if (19 === node.tag) {
                                    checkConditional(node, n, body);
                                } else {
                                    if (null !== node.child) {
                                        /** @type {!Object} */
                                        node.child.return = node;
                                        node = node.child;
                                        continue;
                                    }
                                }
                            }
                            if (node === body) {
                                break e;
                            }
                            for (; null === node.sibling;) {
                                if (null === node.return || node.return === body) {
                                    break e;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    }
                    /** @type {number} */
                    data = data & 1;
                }
                if (log(config, data), 0 === (1 & body.mode)) {
                    /** @type {null} */
                    body.memoizedState = null;
                } else {
                    switch (next) {
                        case "forwards":
                            n = body.child;
                            /** @type {null} */
                            next = null;
                            for (; null !== n;) {
                                if (null !== (node = n.alternate) && null === evaluate(node)) {
                                    /** @type {!Object} */
                                    next = n;
                                }
                                n = n.sibling;
                            }
                            if (null === (n = next)) {
                                next = body.child;
                                /** @type {null} */
                                body.child = null;
                            } else {
                                next = n.sibling;
                                /** @type {null} */
                                n.sibling = null;
                            }
                            e(body, false, next, n, end);
                            break;
                        case "backwards":
                            /** @type {null} */
                            n = null;
                            next = body.child;
                            /** @type {null} */
                            body.child = null;
                            for (; null !== next;) {
                                if (null !== (node = next.alternate) && null === evaluate(node)) {
                                    body.child = next;
                                    break;
                                }
                                node = next.sibling;
                                /** @type {!Object} */
                                next.sibling = n;
                                n = next;
                                /** @type {!Object} */
                                next = node;
                            }
                            e(body, true, n, null, end);
                            break;
                        case "together":
                            e(body, false, null, null, void 0);
                            break;
                        default:
                            /** @type {null} */
                            body.memoizedState = null;
                    }
                }
                return body.child;
            }
            /**
             * @param {!Object} node
             * @param {!Object} item
             * @return {undefined}
             */
            function visit(node, item) {
                if (0 === (1 & item.mode) && null !== node) {
                    /** @type {null} */
                    node.alternate = null;
                    /** @type {null} */
                    item.alternate = null;
                    item.flags |= 2;
                }
            }
            /**
             * @param {!Object} options
             * @param {!Object} result
             * @param {!Object} node
             * @return {?}
             */
            function fn(options, result, node) {
                if (null !== options && (result.dependencies = options.dependencies), res = res | result.lanes, 0 === (node & result.childLanes)) {
                    return null;
                }
                if (null !== options && result.child !== options.child) {
                    throw Error(call(153));
                }
                if (null !== result.child) {
                    node = clone(options = result.child, options.pendingProps);
                    /** @type {!Object} */
                    result.child = node;
                    /** @type {!Object} */
                    node.return = result;
                    for (; null !== options.sibling;) {
                        options = options.sibling;
                        /** @type {!Object} */
                        (node = node.sibling = clone(options, options.pendingProps)).return = result;
                    }
                    /** @type {null} */
                    node.sibling = null;
                }
                return result.child;
            }
            /**
             * @param {!Object} y
             * @param {number} node
             * @return {undefined}
             */
            function removeItem(y, node) {
                if (!err) {
                    switch (y.tailMode) {
                        case "hidden":
                            node = y.tail;
                            /** @type {null} */
                            var next = null;
                            for (; null !== node;) {
                                if (null !== node.alternate) {
                                    /** @type {number} */
                                    next = node;
                                }
                                node = node.sibling;
                            }
                            if (null === next) {
                                /** @type {null} */
                                y.tail = null;
                            } else {
                                /** @type {null} */
                                next.sibling = null;
                            }
                            break;
                        case "collapsed":
                            next = y.tail;
                            /** @type {null} */
                            var prev = null;
                            for (; null !== next;) {
                                if (null !== next.alternate) {
                                    prev = next;
                                }
                                next = next.sibling;
                            }
                            if (null === prev) {
                                if (node || null === y.tail) {
                                    /** @type {null} */
                                    y.tail = null;
                                } else {
                                    /** @type {null} */
                                    y.tail.sibling = null;
                                }
                            } else {
                                /** @type {null} */
                                prev.sibling = null;
                            }
                    }
                }
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function hydrate(node) {
                /** @type {boolean} */
                var t = null !== node.alternate && node.alternate.child === node.child;
                /** @type {number} */
                var o = 0;
                /** @type {number} */
                var flags = 0;
                if (t) {
                    var child = node.child;
                    for (; null !== child;) {
                        /** @type {number} */
                        o = o | (child.lanes | child.childLanes);
                        /** @type {number} */
                        flags = flags | 14680064 & child.subtreeFlags;
                        /** @type {number} */
                        flags = flags | 14680064 & child.flags;
                        /** @type {!Object} */
                        child.return = node;
                        child = child.sibling;
                    }
                } else {
                    child = node.child;
                    for (; null !== child;) {
                        /** @type {number} */
                        o = o | (child.lanes | child.childLanes);
                        /** @type {number} */
                        flags = flags | child.subtreeFlags;
                        /** @type {number} */
                        flags = flags | child.flags;
                        /** @type {!Object} */
                        child.return = node;
                        child = child.sibling;
                    }
                }
                return node.subtreeFlags |= flags, node.childLanes = o, t;
            }
            /**
             * @param {!Object} node
             * @param {!Object} data
             * @param {?} type
             * @return {?}
             */
            function callback(node, data, type) {
                var options = data.pendingProps;
                switch (fun(data), data.tag) {
                    case 2:
                    case 16:
                    case 15:
                    case 0:
                    case 11:
                    case 7:
                    case 8:
                    case 12:
                    case 9:
                    case 14:
                        return hydrate(data), null;
                    case 1:
                    case 17:
                        return isString(data.type) && isFn(), hydrate(data), null;
                    case 3:
                        return options = data.stateNode, baseEach(), isEmpty(users), isEmpty(obj), mapArray(), options.pendingContext && (options.context = options.pendingContext, options.pendingContext = null), null !== node && null !== node.child || (success(data) ? data.flags |= 4 : null === node || node.memoizedState.isDehydrated && 0 === (256 & data.flags) || (data.flags |= 1024, null !== paths && (flatten(paths), paths = null))), hydrate(data), null;
                    case 5:
                        param(data);
                        var e = send(message.current);
                        if (type = data.type, null !== node && null != data.stateNode) {
                            remove(node, data, type, options);
                            if (node.ref !== data.ref) {
                                data.flags |= 512;
                                data.flags |= 2097152;
                            }
                        } else {
                            if (!options) {
                                if (null === data.stateNode) {
                                    throw Error(call(166));
                                }
                                return hydrate(data), null;
                            }
                            if (node = send(row.current), success(data)) {
                                options = data.stateNode;
                                type = data.type;
                                var item = data.memoizedProps;
                                switch (options[key] = data, options[field] = item, node = 0 !== (1 & data.mode), type) {
                                    case "dialog":
                                        notify("cancel", options);
                                        notify("close", options);
                                        break;
                                    case "iframe":
                                    case "object":
                                    case "embed":
                                        notify("load", options);
                                        break;
                                    case "video":
                                    case "audio":
                                        /** @type {number} */
                                        e = 0;
                                        for (; e < sequences.length; e++) {
                                            notify(sequences[e], options);
                                        }
                                        break;
                                    case "source":
                                        notify("error", options);
                                        break;
                                    case "img":
                                    case "image":
                                    case "link":
                                        notify("error", options);
                                        notify("load", options);
                                        break;
                                    case "details":
                                        notify("toggle", options);
                                        break;
                                    case "input":
                                        fixNode(options, item);
                                        notify("invalid", options);
                                        break;
                                    case "select":
                                        options._wrapperState = {
                                            wasMultiple: !!item.multiple
                                        };
                                        notify("invalid", options);
                                        break;
                                    case "textarea":
                                        open(options, item);
                                        notify("invalid", options);
                                }
                                var result;
                                for (result in css(type, item), e = null, item) {
                                    if (item.hasOwnProperty(result)) {
                                        var id = item[result];
                                        if ("children" === result) {
                                            if ("string" === typeof id) {
                                                if (options.textContent !== id) {
                                                    if (true !== item.suppressHydrationWarning) {
                                                        read(options.textContent, id, node);
                                                    }
                                                    /** @type {!Array} */
                                                    e = ["children", id];
                                                }
                                            } else {
                                                if ("number" === typeof id && options.textContent !== "" + id) {
                                                    if (true !== item.suppressHydrationWarning) {
                                                        read(options.textContent, id, node);
                                                    }
                                                    /** @type {!Array} */
                                                    e = ["children", "" + id];
                                                }
                                            }
                                        } else {
                                            if (l.hasOwnProperty(result) && null != id && "onScroll" === result) {
                                                notify("scroll", options);
                                            }
                                        }
                                    }
                                }
                                switch (type) {
                                    case "input":
                                        extend(options);
                                        addField(options, item, true);
                                        break;
                                    case "textarea":
                                        extend(options);
                                        changeHandler(options);
                                        break;
                                    case "select":
                                    case "option":
                                        break;
                                    default:
                                        if ("function" === typeof item.onClick) {
                                            /** @type {function(): undefined} */
                                            options.onclick = none;
                                        }
                                }
                                /** @type {null} */
                                options = e;
                                /** @type {null} */
                                data.updateQueue = options;
                                if (null !== options) {
                                    data.flags |= 4;
                                }
                            } else {
                                result = 9 === e.nodeType ? e : e.ownerDocument;
                                if ("http://www.w3.org/1999/xhtml" === node) {
                                    node = all(type);
                                }
                                if ("http://www.w3.org/1999/xhtml" === node) {
                                    if ("script" === type) {
                                        /** @type {string} */
                                        (node = result.createElement("div")).innerHTML = "<script>\x3c/script>";
                                        node = node.removeChild(node.firstChild);
                                    } else {
                                        if ("string" === typeof options.is) {
                                            node = result.createElement(type, {
                                                is: options.is
                                            });
                                        } else {
                                            node = result.createElement(type);
                                            if ("select" === type) {
                                                /** @type {!Object} */
                                                result = node;
                                                if (options.multiple) {
                                                    /** @type {boolean} */
                                                    result.multiple = true;
                                                } else {
                                                    if (options.size) {
                                                        result.size = options.size;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    node = result.createElementNS(node, type);
                                }
                                /** @type {!Object} */
                                node[key] = data;
                                node[field] = options;
                                ajax(node, data);
                                /** @type {!Object} */
                                data.stateNode = node;
                                e: {
                                    switch (result = factory(type, options), type) {
                                        case "dialog":
                                            notify("cancel", node);
                                            notify("close", node);
                                            e = options;
                                            break;
                                        case "iframe":
                                        case "object":
                                        case "embed":
                                            notify("load", node);
                                            e = options;
                                            break;
                                        case "video":
                                        case "audio":
                                            /** @type {number} */
                                            e = 0;
                                            for (; e < sequences.length; e++) {
                                                notify(sequences[e], node);
                                            }
                                            e = options;
                                            break;
                                        case "source":
                                            notify("error", node);
                                            e = options;
                                            break;
                                        case "img":
                                        case "image":
                                        case "link":
                                            notify("error", node);
                                            notify("load", node);
                                            e = options;
                                            break;
                                        case "details":
                                            notify("toggle", node);
                                            e = options;
                                            break;
                                        case "input":
                                            fixNode(node, options);
                                            e = getChild(node, options);
                                            notify("invalid", node);
                                            break;
                                        case "option":
                                        default:
                                            e = options;
                                            break;
                                        case "select":
                                            node._wrapperState = {
                                                wasMultiple: !!options.multiple
                                            };
                                            /** @type {!Object} */
                                            e = assign({}, options, {
                                                value: void 0
                                            });
                                            notify("invalid", node);
                                            break;
                                        case "textarea":
                                            open(node, options);
                                            e = del(node, options);
                                            notify("invalid", node);
                                    }
                                    for (item in css(type, e), id = e) {
                                        if (id.hasOwnProperty(item)) {
                                            var value = id[item];
                                            if ("style" === item) {
                                                style(node, value);
                                            } else {
                                                if ("dangerouslySetInnerHTML" === item) {
                                                    if (null != (value = value ? value.__html : void 0)) {
                                                        actionAddEntity(node, value);
                                                    }
                                                } else {
                                                    if ("children" === item) {
                                                        if ("string" === typeof value) {
                                                            if ("textarea" !== type || "" !== value) {
                                                                setTextContent(node, value);
                                                            }
                                                        } else {
                                                            if ("number" === typeof value) {
                                                                setTextContent(node, "" + value);
                                                            }
                                                        }
                                                    } else {
                                                        if ("suppressContentEditableWarning" !== item && "suppressHydrationWarning" !== item && "autoFocus" !== item) {
                                                            if (l.hasOwnProperty(item)) {
                                                                if (null != value && "onScroll" === item) {
                                                                    notify("scroll", node);
                                                                }
                                                            } else {
                                                                if (null != value) {
                                                                    handler(node, item, value, result);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    switch (type) {
                                        case "input":
                                            extend(node);
                                            addField(node, options, false);
                                            break;
                                        case "textarea":
                                            extend(node);
                                            changeHandler(node);
                                            break;
                                        case "option":
                                            if (null != options.value) {
                                                node.setAttribute("value", "" + stringify(options.value));
                                            }
                                            break;
                                        case "select":
                                            /** @type {boolean} */
                                            node.multiple = !!options.multiple;
                                            if (null != (item = options.value)) {
                                                wrap(node, !!options.multiple, item, false);
                                            } else {
                                                if (null != options.defaultValue) {
                                                    wrap(node, !!options.multiple, options.defaultValue, true);
                                                }
                                            }
                                            break;
                                        default:
                                            if ("function" === typeof e.onClick) {
                                                /** @type {function(): undefined} */
                                                node.onclick = none;
                                            }
                                    }
                                    switch (type) {
                                        case "button":
                                        case "input":
                                        case "select":
                                        case "textarea":
                                            /** @type {boolean} */
                                            options = !!options.autoFocus;
                                            break e;
                                        case "img":
                                            /** @type {boolean} */
                                            options = true;
                                            break e;
                                        default:
                                            /** @type {boolean} */
                                            options = false;
                                    }
                                }
                                if (options) {
                                    data.flags |= 4;
                                }
                            }
                            if (null !== data.ref) {
                                data.flags |= 512;
                                data.flags |= 2097152;
                            }
                        }
                        return hydrate(data), null;
                    case 6:
                        if (node && null != data.stateNode) {
                            drop(0, data, node.memoizedProps, options);
                        } else {
                            if ("string" !== typeof options && null === data.stateNode) {
                                throw Error(call(166));
                            }
                            if (type = send(message.current), send(row.current), success(data)) {
                                if (options = data.stateNode, type = data.memoizedProps, options[key] = data, (item = options.nodeValue !== type) && null !== (node = doc)) {
                                    switch (node.tag) {
                                        case 3:
                                            read(options.nodeValue, type, 0 !== (1 & node.mode));
                                            break;
                                        case 5:
                                            if (true !== node.memoizedProps.suppressHydrationWarning) {
                                                read(options.nodeValue, type, 0 !== (1 & node.mode));
                                            }
                                    }
                                }
                                if (item) {
                                    data.flags |= 4;
                                }
                            } else {
                                /** @type {!Object} */
                                (options = (9 === type.nodeType ? type : type.ownerDocument).createTextNode(options))[key] = data;
                                data.stateNode = options;
                            }
                        }
                        return hydrate(data), null;
                    case 13:
                        if (isEmpty(config), options = data.memoizedState, null === node || null !== node.memoizedState && null !== node.memoizedState.dehydrated) {
                            if (err && null !== r && 0 !== (1 & data.mode) && 0 === (128 & data.flags)) {
                                topPrice();
                                attr();
                                data.flags |= 98560;
                                /** @type {boolean} */
                                item = false;
                            } else {
                                if (item = success(data), null !== options && null !== options.dehydrated) {
                                    if (null === node) {
                                        if (!item) {
                                            throw Error(call(318));
                                        }
                                        if (!(item = null !== (item = data.memoizedState) ? item.dehydrated : null)) {
                                            throw Error(call(317));
                                        }
                                        /** @type {!Object} */
                                        item[key] = data;
                                    } else {
                                        attr();
                                        if (0 === (128 & data.flags)) {
                                            /** @type {null} */
                                            data.memoizedState = null;
                                        }
                                        data.flags |= 4;
                                    }
                                    hydrate(data);
                                    /** @type {boolean} */
                                    item = false;
                                } else {
                                    if (null !== paths) {
                                        flatten(paths);
                                        /** @type {null} */
                                        paths = null;
                                    }
                                    /** @type {boolean} */
                                    item = true;
                                }
                            }
                            if (!item) {
                                return 65536 & data.flags ? data : null;
                            }
                        }
                        return 0 !== (128 & data.flags) ? (data.lanes = type, data) : ((options = null !== options) !== (null !== node && null !== node.memoizedState) && options && (data.child.flags |= 8192, 0 !== (1 & data.mode) && (null === node || 0 !== (1 & config.current) ? 0 === NIL && (NIL = 3) : fadeOut())), null !== data.updateQueue && (data.flags |= 4), hydrate(data), null);
                    case 4:
                        return baseEach(), null === node && save(data.stateNode.containerInfo), hydrate(data), null;
                    case 10:
                        return createCallback(data.type._context), hydrate(data), null;
                    case 19:
                        if (isEmpty(config), null === (item = data.memoizedState)) {
                            return hydrate(data), null;
                        }
                        if (options = 0 !== (128 & data.flags), null === (result = item.rendering)) {
                            if (options) {
                                removeItem(item, false);
                            } else {
                                if (0 !== NIL || null !== node && 0 !== (128 & node.flags)) {
                                    node = data.child;
                                    for (; null !== node;) {
                                        if (null !== (result = evaluate(node))) {
                                            data.flags |= 128;
                                            removeItem(item, false);
                                            if (null !== (options = result.updateQueue)) {
                                                data.updateQueue = options;
                                                data.flags |= 4;
                                            }
                                            /** @type {number} */
                                            data.subtreeFlags = 0;
                                            options = type;
                                            type = data.child;
                                            for (; null !== type;) {
                                                node = options;
                                                (item = type).flags &= 14680066;
                                                if (null === (result = item.alternate)) {
                                                    /** @type {number} */
                                                    item.childLanes = 0;
                                                    /** @type {!Object} */
                                                    item.lanes = node;
                                                    /** @type {null} */
                                                    item.child = null;
                                                    /** @type {number} */
                                                    item.subtreeFlags = 0;
                                                    /** @type {null} */
                                                    item.memoizedProps = null;
                                                    /** @type {null} */
                                                    item.memoizedState = null;
                                                    /** @type {null} */
                                                    item.updateQueue = null;
                                                    /** @type {null} */
                                                    item.dependencies = null;
                                                    /** @type {null} */
                                                    item.stateNode = null;
                                                } else {
                                                    item.childLanes = result.childLanes;
                                                    item.lanes = result.lanes;
                                                    item.child = result.child;
                                                    /** @type {number} */
                                                    item.subtreeFlags = 0;
                                                    /** @type {null} */
                                                    item.deletions = null;
                                                    item.memoizedProps = result.memoizedProps;
                                                    item.memoizedState = result.memoizedState;
                                                    item.updateQueue = result.updateQueue;
                                                    item.type = result.type;
                                                    node = result.dependencies;
                                                    /** @type {(null|{firstContext: ?, lanes: ?})} */
                                                    item.dependencies = null === node ? null : {
                                                        lanes: node.lanes,
                                                        firstContext: node.firstContext
                                                    };
                                                }
                                                type = type.sibling;
                                            }
                                            return log(config, 1 & config.current | 2), data.child;
                                        }
                                        node = node.sibling;
                                    }
                                }
                                if (null !== item.tail && now() > ttl) {
                                    data.flags |= 128;
                                    /** @type {boolean} */
                                    options = true;
                                    removeItem(item, false);
                                    /** @type {number} */
                                    data.lanes = 4194304;
                                }
                            }
                        } else {
                            if (!options) {
                                if (null !== (node = evaluate(result))) {
                                    if (data.flags |= 128, options = true, null !== (type = node.updateQueue) && (data.updateQueue = type, data.flags |= 4), removeItem(item, true), null === item.tail && "hidden" === item.tailMode && !result.alternate && !err) {
                                        return hydrate(data), null;
                                    }
                                } else {
                                    if (2 * now() - item.renderingStartTime > ttl && 1073741824 !== type) {
                                        data.flags |= 128;
                                        /** @type {boolean} */
                                        options = true;
                                        removeItem(item, false);
                                        /** @type {number} */
                                        data.lanes = 4194304;
                                    }
                                }
                            }
                            if (item.isBackwards) {
                                result.sibling = data.child;
                                data.child = result;
                            } else {
                                if (null !== (type = item.last)) {
                                    type.sibling = result;
                                } else {
                                    data.child = result;
                                }
                                item.last = result;
                            }
                        }
                        return null !== item.tail ? (data = item.tail, item.rendering = data, item.tail = data.sibling, item.renderingStartTime = now(), data.sibling = null, type = config.current, log(config, options ? 1 & type | 2 : 1 & type), data) : (hydrate(data), null);
                    case 22:
                    case 23:
                        return updateSlider(), options = null !== data.memoizedState, null !== node && null !== node.memoizedState !== options && (data.flags |= 8192), options && 0 !== (1 & data.mode) ? 0 !== (1073741824 & ret) && (hydrate(data), 6 & data.subtreeFlags && (data.flags |= 8192)) : hydrate(data), null;
                    case 24:
                    case 25:
                        return null;
                }
                throw Error(call(156, data.tag));
            }
            /**
             * @param {number} value
             * @param {!Object} node
             * @return {?}
             */
            function max(value, node) {
                switch (fun(node), node.tag) {
                    case 1:
                        return isString(node.type) && isFn(), 65536 & (value = node.flags) ? (node.flags = -65537 & value | 128, node) : null;
                    case 3:
                        return baseEach(), isEmpty(users), isEmpty(obj), mapArray(), 0 !== (65536 & (value = node.flags)) && 0 === (128 & value) ? (node.flags = -65537 & value | 128, node) : null;
                    case 5:
                        return param(node), null;
                    case 13:
                        if (isEmpty(config), null !== (value = node.memoizedState) && null !== value.dehydrated) {
                            if (null === node.alternate) {
                                throw Error(call(340));
                            }
                            attr();
                        }
                        return 65536 & (value = node.flags) ? (node.flags = -65537 & value | 128, node) : null;
                    case 19:
                        return isEmpty(config), null;
                    case 4:
                        return baseEach(), null;
                    case 10:
                        return createCallback(node.type._context), null;
                    case 22:
                    case 23:
                        return updateSlider(), null;
                    default:
                        return null;
                }
            }
            /**
             * @param {!Object} data
             * @param {!Object} previous
             * @return {undefined}
             */
            function func(data, previous) {
                var options = data.ref;
                if (null !== options) {
                    if ("function" === typeof options) {
                        try {
                            options(null);
                        } catch (debugInfo) {
                            cb(data, previous, debugInfo);
                        }
                    } else {
                        /** @type {null} */
                        options.current = null;
                    }
                }
            }
            /**
             * @param {(Object|string)} update
             * @param {!Object} path
             * @param {?} cb
             * @return {undefined}
             */
            function off(update, path, cb) {
                try {
                    cb();
                } catch (debugInfo) {
                    cb(update, path, debugInfo);
                }
            }
            /**
             * @param {number} key
             * @param {!Object} node
             * @param {!Object} el
             * @return {undefined}
             */
            function setAttribute(key, node, el) {
                var a = node.updateQueue;
                if (null !== (a = null !== a ? a.lastEffect : null)) {
                    var c = a = a.next;
                    do {
                        if ((c.tag & key) === key) {
                            var context = c.destroy;
                            c.destroy = void 0;
                            if (void 0 !== context) {
                                off(node, el, context);
                            }
                        }
                        c = c.next;
                    } while (c !== a);
                }
            }
            /**
             * @param {number} value
             * @param {!Object} context
             * @return {undefined}
             */
            function onDone(value, context) {
                if (null !== (context = null !== (context = context.updateQueue) ? context.lastEffect : null)) {
                    var node = context = context.next;
                    do {
                        if ((node.tag & value) === value) {
                            var max = node.create;
                            node.destroy = max();
                        }
                        node = node.next;
                    } while (node !== context);
                }
            }
            /**
             * @param {!Object} node
             * @return {undefined}
             */
            function createNode(node) {
                var style = node.ref;
                if (null !== style) {
                    var publicInst = node.stateNode;
                    node.tag;
                    node = publicInst;
                    if ("function" === typeof style) {
                        style(node);
                    } else {
                        /** @type {!Object} */
                        style.current = node;
                    }
                }
            }
            /**
             * @param {!Object} node
             * @return {undefined}
             */
            function hasDataChanged(node) {
                var obj = node.alternate;
                if (null !== obj) {
                    /** @type {null} */
                    node.alternate = null;
                    hasDataChanged(obj);
                }
                /** @type {null} */
                node.child = null;
                /** @type {null} */
                node.deletions = null;
                /** @type {null} */
                node.sibling = null;
                if (5 === node.tag) {
                    if (null !== (obj = node.stateNode)) {
                        delete obj[key];
                        delete obj[field];
                        delete obj[id];
                        delete obj[accessor];
                        delete obj[tabId];
                    }
                }
                /** @type {null} */
                node.stateNode = null;
                /** @type {null} */
                node.return = null;
                /** @type {null} */
                node.dependencies = null;
                /** @type {null} */
                node.memoizedProps = null;
                /** @type {null} */
                node.memoizedState = null;
                /** @type {null} */
                node.pendingProps = null;
                /** @type {null} */
                node.stateNode = null;
                /** @type {null} */
                node.updateQueue = null;
            }
            /**
             * @param {!Object} match
             * @return {?}
             */
            function has(match) {
                return 5 === match.tag || 3 === match.tag || 4 === match.tag;
            }
            /**
             * @param {!Object} node
             * @return {?}
             */
            function play(node) {
                e: for (; ;) {
                    for (; null === node.sibling;) {
                        if (null === node.return || has(node.return)) {
                            return null;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                    for (; 5 !== node.tag && 6 !== node.tag && 18 !== node.tag;) {
                        if (2 & node.flags) {
                            continue e;
                        }
                        if (null === node.child || 4 === node.tag) {
                            continue e;
                        }
                        /** @type {!Object} */
                        node.child.return = node;
                        node = node.child;
                    }
                    if (!(2 & node.flags)) {
                        return node.stateNode;
                    }
                }
            }
            /**
             * @param {!Object} node
             * @param {!Node} target
             * @param {!Node} container
             * @return {undefined}
             */
            function check(node, target, container) {
                var tag = node.tag;
                if (5 === tag || 6 === tag) {
                    node = node.stateNode;
                    if (target) {
                        if (8 === container.nodeType) {
                            container.parentNode.insertBefore(node, target);
                        } else {
                            container.insertBefore(node, target);
                        }
                    } else {
                        if (8 === container.nodeType) {
                            (target = container.parentNode).insertBefore(node, container);
                        } else {
                            (target = container).appendChild(node);
                        }
                        if (!(null !== (container = container._reactRootContainer) && void 0 !== container || null !== target.onclick)) {
                            /** @type {function(): undefined} */
                            target.onclick = none;
                        }
                    }
                } else {
                    if (4 !== tag && null !== (node = node.child)) {
                        check(node, target, container);
                        node = node.sibling;
                        for (; null !== node;) {
                            check(node, target, container);
                            node = node.sibling;
                        }
                    }
                }
            }
            /**
             * @param {!Object} node
             * @param {?} x
             * @param {!Node} e
             * @return {undefined}
             */
            function print(node, x, e) {
                var tag = node.tag;
                if (5 === tag || 6 === tag) {
                    node = node.stateNode;
                    if (x) {
                        e.insertBefore(node, x);
                    } else {
                        e.appendChild(node);
                    }
                } else {
                    if (4 !== tag && null !== (node = node.child)) {
                        print(node, x, e);
                        node = node.sibling;
                        for (; null !== node;) {
                            print(node, x, e);
                            node = node.sibling;
                        }
                    }
                }
            }
            /**
             * @param {!Object} path
             * @param {!Object} root
             * @param {!Object} node
             * @return {undefined}
             */
            function replaceNode(path, root, node) {
                node = node.child;
                for (; null !== node;) {
                    connect(path, root, node);
                    node = node.sibling;
                }
            }
            /**
             * @param {!Object} el
             * @param {!Object} path
             * @param {!Object} node
             * @return {undefined}
             */
            function connect(el, path, node) {
                if (template && "function" === typeof template.onCommitFiberUnmount) {
                    try {
                        template.onCommitFiberUnmount(content, node);
                    } catch (l) {
                    }
                }
                switch (node.tag) {
                    case 5:
                        if (!context) {
                            func(node, path);
                        }
                    case 6:
                        var c = temp;
                        var v = video;
                        /** @type {null} */
                        temp = null;
                        replaceNode(el, path, node);
                        video = v;
                        if (null !== (temp = c)) {
                            if (video) {
                                el = temp;
                                node = node.stateNode;
                                if (8 === el.nodeType) {
                                    el.parentNode.removeChild(node);
                                } else {
                                    el.removeChild(node);
                                }
                            } else {
                                temp.removeChild(node.stateNode);
                            }
                        }
                        break;
                    case 18:
                        if (null !== temp) {
                            if (video) {
                                el = temp;
                                node = node.stateNode;
                                if (8 === el.nodeType) {
                                    removeElement(el.parentNode, node);
                                } else {
                                    if (1 === el.nodeType) {
                                        removeElement(el, node);
                                    }
                                }
                                move(el);
                            } else {
                                removeElement(temp, node.stateNode);
                            }
                        }
                        break;
                    case 4:
                        c = temp;
                        v = video;
                        temp = node.stateNode.containerInfo;
                        /** @type {boolean} */
                        video = true;
                        replaceNode(el, path, node);
                        temp = c;
                        video = v;
                        break;
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                        if (!context && (null !== (c = node.updateQueue) && null !== (c = c.lastEffect))) {
                            v = c = c.next;
                            do {
                                var b = v;
                                var tmp = b.destroy;
                                b = b.tag;
                                if (void 0 !== tmp && (0 !== (2 & b) || 0 !== (4 & b))) {
                                    off(node, path, tmp);
                                }
                                v = v.next;
                            } while (v !== c);
                        }
                        replaceNode(el, path, node);
                        break;
                    case 1:
                        if (!context && (func(node, path), "function" === typeof (c = node.stateNode).componentWillUnmount)) {
                            try {
                                c.props = node.memoizedProps;
                                c.state = node.memoizedState;
                                c.componentWillUnmount();
                            } catch (debugInfo) {
                                cb(node, path, debugInfo);
                            }
                        }
                        replaceNode(el, path, node);
                        break;
                    case 21:
                        replaceNode(el, path, node);
                        break;
                    case 22:
                        if (1 & node.mode) {
                            context = (c = context) || null !== node.memoizedState;
                            replaceNode(el, path, node);
                            context = c;
                        } else {
                            replaceNode(el, path, node);
                        }
                        break;
                    default:
                        replaceNode(el, path, node);
                }
            }
            /**
             * @param {!Object} res
             * @return {undefined}
             */
            function route(res) {
                var repoArray = res.updateQueue;
                if (null !== repoArray) {
                    /** @type {null} */
                    res.updateQueue = null;
                    var n = res.stateNode;
                    if (null === n) {
                        n = res.stateNode = new Cookies;
                    }
                    repoArray.forEach(function (c) {
                        var r = resolver.bind(null, res, c);
                        if (!n.has(c)) {
                            n.add(c);
                            c.then(r, r);
                        }
                    });
                }
            }
            /**
             * @param {(Object|string)} obj
             * @param {!Object} node
             * @return {undefined}
             */
            function recurse(obj, node) {
                var params = node.deletions;
                if (null !== params) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < params.length; i++) {
                        var item = params[i];
                        try {
                            /** @type {(Object|string)} */
                            var target = obj;
                            /** @type {!Object} */
                            var x = node;
                            var inst = x;
                            e: for (; null !== inst;) {
                                switch (inst.tag) {
                                    case 5:
                                        temp = inst.stateNode;
                                        /** @type {boolean} */
                                        video = false;
                                        break e;
                                    case 3:
                                    case 4:
                                        temp = inst.stateNode.containerInfo;
                                        /** @type {boolean} */
                                        video = true;
                                        break e;
                                }
                                inst = inst.return;
                            }
                            if (null === temp) {
                                throw Error(call(160));
                            }
                            connect(target, x, item);
                            /** @type {null} */
                            temp = null;
                            /** @type {boolean} */
                            video = false;
                            var inner = item.alternate;
                            if (null !== inner) {
                                /** @type {null} */
                                inner.return = null;
                            }
                            /** @type {null} */
                            item.return = null;
                        } catch (debugInfo) {
                            cb(item, node, debugInfo);
                        }
                    }
                }
                if (12854 & node.subtreeFlags) {
                    node = node.child;
                    for (; null !== node;) {
                        add(node, obj);
                        node = node.sibling;
                    }
                }
            }
            /**
             * @param {!Object} item
             * @param {(Object|string)} data
             * @return {undefined}
             */
            function add(item, data) {
                var result = item.alternate;
                var tmp = item.flags;
                switch (item.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                        if (recurse(data, item), pop(item), 4 & tmp) {
                            try {
                                setAttribute(3, item, item.return);
                                onDone(3, item);
                            } catch (debugInfo) {
                                cb(item, item.return, debugInfo);
                            }
                            try {
                                setAttribute(5, item, item.return);
                            } catch (debugInfo) {
                                cb(item, item.return, debugInfo);
                            }
                        }
                        break;
                    case 1:
                        recurse(data, item);
                        pop(item);
                        if (512 & tmp && null !== result) {
                            func(result, result.return);
                        }
                        break;
                    case 5:
                        if (recurse(data, item), pop(item), 512 & tmp && null !== result && func(result, result.return), 32 & item.flags) {
                            var e = item.stateNode;
                            try {
                                setTextContent(e, "");
                            } catch (debugInfo) {
                                cb(item, item.return, debugInfo);
                            }
                        }
                        if (4 & tmp && null != (e = item.stateNode)) {
                            var el = item.memoizedProps;
                            var key = null !== result ? result.memoizedProps : el;
                            var type = item.type;
                            var obj = item.updateQueue;
                            if (item.updateQueue = null, null !== obj) {
                                try {
                                    if ("input" === type && "radio" === el.type && null != el.name) {
                                        getScopeIdentity(e, el);
                                    }
                                    factory(type, key);
                                    var value = factory(type, el);
                                    /** @type {number} */
                                    key = 0;
                                    for (; key < obj.length; key = key + 2) {
                                        var next = obj[key];
                                        var node = obj[key + 1];
                                        if ("style" === next) {
                                            style(e, node);
                                        } else {
                                            if ("dangerouslySetInnerHTML" === next) {
                                                actionAddEntity(e, node);
                                            } else {
                                                if ("children" === next) {
                                                    setTextContent(e, node);
                                                } else {
                                                    handler(e, next, node, value);
                                                }
                                            }
                                        }
                                    }
                                    switch (type) {
                                        case "input":
                                            search(e, el);
                                            break;
                                        case "textarea":
                                            drawHorizontalChampion(e, el);
                                            break;
                                        case "select":
                                            var node = e._wrapperState.wasMultiple;
                                            /** @type {boolean} */
                                            e._wrapperState.wasMultiple = !!el.multiple;
                                            var value = el.value;
                                            if (null != value) {
                                                wrap(e, !!el.multiple, value, false);
                                            } else {
                                                if (node !== !!el.multiple) {
                                                    if (null != el.defaultValue) {
                                                        wrap(e, !!el.multiple, el.defaultValue, true);
                                                    } else {
                                                        wrap(e, !!el.multiple, el.multiple ? [] : "", false);
                                                    }
                                                }
                                            }
                                    }
                                    e[field] = el;
                                } catch (debugInfo) {
                                    cb(item, item.return, debugInfo);
                                }
                            }
                        }
                        break;
                    case 6:
                        if (recurse(data, item), pop(item), 4 & tmp) {
                            if (null === item.stateNode) {
                                throw Error(call(162));
                            }
                            e = item.stateNode;
                            el = item.memoizedProps;
                            try {
                                e.nodeValue = el;
                            } catch (debugInfo) {
                                cb(item, item.return, debugInfo);
                            }
                        }
                        break;
                    case 3:
                        if (recurse(data, item), pop(item), 4 & tmp && null !== result && result.memoizedState.isDehydrated) {
                            try {
                                move(data.containerInfo);
                            } catch (debugInfo) {
                                cb(item, item.return, debugInfo);
                            }
                        }
                        break;
                    case 4:
                    default:
                        recurse(data, item);
                        pop(item);
                        break;
                    case 13:
                        recurse(data, item);
                        pop(item);
                        if (8192 & (e = item.child).flags) {
                            /** @type {boolean} */
                            el = null !== e.memoizedState;
                            /** @type {boolean} */
                            e.stateNode.isHidden = el;
                            if (!(!el || null !== e.alternate && null !== e.alternate.memoizedState)) {
                                timestamp = now();
                            }
                        }
                        if (4 & tmp) {
                            route(item);
                        }
                        break;
                    case 22:
                        if (next = null !== result && null !== result.memoizedState, 1 & item.mode ? (context = (value = context) || next, recurse(data, item), context = value) : recurse(data, item), pop(item), 8192 & tmp) {
                            if (value = null !== item.memoizedState, (item.stateNode.isHidden = value) && !next && 0 !== (1 & item.mode)) {
                                /** @type {!Object} */
                                root = item;
                                next = item.child;
                                for (; null !== next;) {
                                    node = root = next;
                                    for (; null !== root;) {
                                        switch (value = (node = root).child, node.tag) {
                                            case 0:
                                            case 11:
                                            case 14:
                                            case 15:
                                                setAttribute(4, node, node.return);
                                                break;
                                            case 1:
                                                func(node, node.return);
                                                var component = node.stateNode;
                                                if ("function" === typeof component.componentWillUnmount) {
                                                    tmp = node;
                                                    result = node.return;
                                                    try {
                                                        data = tmp;
                                                        component.props = data.memoizedProps;
                                                        component.state = data.memoizedState;
                                                        component.componentWillUnmount();
                                                    } catch (debugInfo) {
                                                        cb(tmp, result, debugInfo);
                                                    }
                                                }
                                                break;
                                            case 5:
                                                func(node, node.return);
                                                break;
                                            case 22:
                                                if (null !== node.memoizedState) {
                                                    getPath(node);
                                                    continue;
                                                }
                                        }
                                        if (null !== value) {
                                            value.return = node;
                                            root = value;
                                        } else {
                                            getPath(node);
                                        }
                                    }
                                    next = next.sibling;
                                }
                            }
                            /** @type {null} */
                            next = null;
                            /** @type {!Object} */
                            node = item;
                            e: for (; ;) {
                                if (5 === node.tag) {
                                    if (null === next) {
                                        next = node;
                                        try {
                                            e = node.stateNode;
                                            if (value) {
                                                if ("function" === typeof (el = e.style).setProperty) {
                                                    el.setProperty("display", "none", "important");
                                                } else {
                                                    /** @type {string} */
                                                    el.display = "none";
                                                }
                                            } else {
                                                type = node.stateNode;
                                                key = void 0 !== (obj = node.memoizedProps.style) && null !== obj && obj.hasOwnProperty("display") ? obj.display : null;
                                                type.style.display = traverse("display", key);
                                            }
                                        } catch (debugInfo) {
                                            cb(item, item.return, debugInfo);
                                        }
                                    }
                                } else {
                                    if (6 === node.tag) {
                                        if (null === next) {
                                            try {
                                                node.stateNode.nodeValue = value ? "" : node.memoizedProps;
                                            } catch (debugInfo) {
                                                cb(item, item.return, debugInfo);
                                            }
                                        }
                                    } else {
                                        if ((22 !== node.tag && 23 !== node.tag || null === node.memoizedState || node === item) && null !== node.child) {
                                            node.child.return = node;
                                            node = node.child;
                                            continue;
                                        }
                                    }
                                }
                                if (node === item) {
                                    break e;
                                }
                                for (; null === node.sibling;) {
                                    if (null === node.return || node.return === item) {
                                        break e;
                                    }
                                    if (next === node) {
                                        /** @type {null} */
                                        next = null;
                                    }
                                    node = node.return;
                                }
                                if (next === node) {
                                    /** @type {null} */
                                    next = null;
                                }
                                node.sibling.return = node.return;
                                node = node.sibling;
                            }
                        }
                        break;
                    case 19:
                        recurse(data, item);
                        pop(item);
                        if (4 & tmp) {
                            route(item);
                        }
                    case 21:
                }
            }
            /**
             * @param {!Object} obj
             * @return {undefined}
             */
            function pop(obj) {
                var flags = obj.flags;
                if (2 & flags) {
                    try {
                        e: {
                            var value = obj.return;
                            for (; null !== value;) {
                                if (has(value)) {
                                    var node = value;
                                    break e;
                                }
                                value = value.return;
                            }
                            throw Error(call(160));
                        }
                        switch (node.tag) {
                            case 5:
                                var e = node.stateNode;
                                if (32 & node.flags) {
                                    setTextContent(e, "");
                                    node.flags &= -33;
                                }
                                print(obj, play(obj), e);
                                break;
                            case 3:
                            case 4:
                                var summary = node.stateNode.containerInfo;
                                check(obj, play(obj), summary);
                                break;
                            default:
                                throw Error(call(161));
                        }
                    } catch (debugInfo) {
                        cb(obj, obj.return, debugInfo);
                    }
                    obj.flags &= -3;
                }
                if (4096 & flags) {
                    obj.flags &= -4097;
                }
            }
            /**
             * @param {!Object} type
             * @param {!Object} i
             * @param {?} value
             * @return {undefined}
             */
            function block(type, i, value) {
                /** @type {!Object} */
                root = type;
                action(type, i, value);
            }
            /**
             * @param {!Object} event
             * @param {!Object} data
             * @param {?} button
             * @return {undefined}
             */
            function action(event, data, button) {
                /** @type {boolean} */
                var r = 0 !== (1 & event.mode);
                for (; null !== root;) {
                    var value = root;
                    var node = value.child;
                    if (22 === value.tag && r) {
                        var current = null !== value.memoizedState || left;
                        if (!current) {
                            var alternate = value.alternate;
                            var node = null !== alternate && null !== alternate.memoizedState || context;
                            alternate = left;
                            var _context = context;
                            if (left = current, (context = node) && !_context) {
                                root = value;
                                for (; null !== root;) {
                                    node = (current = root).child;
                                    if (22 === current.tag && null !== current.memoizedState) {
                                        mount(value);
                                    } else {
                                        if (null !== node) {
                                            node.return = current;
                                            root = node;
                                        } else {
                                            mount(value);
                                        }
                                    }
                                }
                            }
                            for (; null !== node;) {
                                root = node;
                                action(node, data, button);
                                node = node.sibling;
                            }
                            root = value;
                            left = alternate;
                            context = _context;
                        }
                        onload(event);
                    } else {
                        if (0 !== (8772 & value.subtreeFlags) && null !== node) {
                            node.return = value;
                            root = node;
                        } else {
                            onload(event);
                        }
                    }
                }
            }
            /**
             * @param {!Object} context
             * @return {undefined}
             */
            function onload(context) {
                for (; null !== root;) {
                    var node = root;
                    if (0 !== (8772 & node.flags)) {
                        var item = node.alternate;
                        try {
                            if (0 !== (8772 & node.flags)) {
                                switch (node.tag) {
                                    case 0:
                                    case 11:
                                    case 15:
                                        if (!context) {
                                            onDone(5, node);
                                        }
                                        break;
                                    case 1:
                                        var inst = node.stateNode;
                                        if (4 & node.flags && !context) {
                                            if (null === item) {
                                                inst.componentDidMount();
                                            } else {
                                                var updatedChunk = node.elementType === node.type ? item.memoizedProps : iterator(node.type, item.memoizedProps);
                                                inst.componentDidUpdate(updatedChunk, item.memoizedState, inst.__reactInternalSnapshotBeforeUpdate);
                                            }
                                        }
                                        var p = node.updateQueue;
                                        if (null !== p) {
                                            h(node, p, inst);
                                        }
                                        break;
                                    case 3:
                                        var color = node.updateQueue;
                                        if (null !== color) {
                                            if (item = null, null !== node.child) {
                                                switch (node.child.tag) {
                                                    case 5:
                                                    case 1:
                                                        item = node.child.stateNode;
                                                }
                                            }
                                            h(node, color, item);
                                        }
                                        break;
                                    case 5:
                                        var publicInst = node.stateNode;
                                        if (null === item && 4 & node.flags) {
                                            item = publicInst;
                                            var params = node.memoizedProps;
                                            switch (node.type) {
                                                case "button":
                                                case "input":
                                                case "select":
                                                case "textarea":
                                                    if (params.autoFocus) {
                                                        item.focus();
                                                    }
                                                    break;
                                                case "img":
                                                    if (params.src) {
                                                        item.src = params.src;
                                                    }
                                            }
                                        }
                                        break;
                                    case 6:
                                    case 4:
                                    case 12:
                                    case 19:
                                    case 17:
                                    case 21:
                                    case 22:
                                    case 23:
                                    case 25:
                                        break;
                                    case 13:
                                        if (null === node.memoizedState) {
                                            var alternate = node.alternate;
                                            if (null !== alternate) {
                                                var mapping = alternate.memoizedState;
                                                if (null !== mapping) {
                                                    var source = mapping.dehydrated;
                                                    if (null !== source) {
                                                        move(source);
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        throw Error(call(163));
                                }
                            }
                            if (!context) {
                                if (512 & node.flags) {
                                    createNode(node);
                                }
                            }
                        } catch (debugInfo) {
                            cb(node, node.return, debugInfo);
                        }
                    }
                    if (node === context) {
                        /** @type {null} */
                        root = null;
                        break;
                    }
                    if (null !== (item = node.sibling)) {
                        item.return = node.return;
                        root = item;
                        break;
                    }
                    root = node.return;
                }
            }
            /**
             * @param {?} ancestor
             * @return {undefined}
             */
            function getPath(ancestor) {
                for (; null !== root;) {
                    var node = root;
                    if (node === ancestor) {
                        /** @type {null} */
                        root = null;
                        break;
                    }
                    var state = node.sibling;
                    if (null !== state) {
                        state.return = node.return;
                        root = state;
                        break;
                    }
                    root = node.return;
                }
            }
            /**
             * @param {?} elem
             * @return {undefined}
             */
            function mount(elem) {
                for (; null !== root;) {
                    var node = root;
                    try {
                        switch (node.tag) {
                            case 0:
                            case 11:
                            case 15:
                                var a = node.return;
                                try {
                                    onDone(4, node);
                                } catch (debugInfo) {
                                    cb(node, a, debugInfo);
                                }
                                break;
                            case 1:
                                var publicInst = node.stateNode;
                                if ("function" === typeof publicInst.componentDidMount) {
                                    var a = node.return;
                                    try {
                                        publicInst.componentDidMount();
                                    } catch (debugInfo) {
                                        cb(node, a, debugInfo);
                                    }
                                }
                                var target = node.return;
                                try {
                                    createNode(node);
                                } catch (debugInfo) {
                                    cb(node, target, debugInfo);
                                }
                                break;
                            case 5:
                                var x = node.return;
                                try {
                                    createNode(node);
                                } catch (debugInfo) {
                                    cb(node, x, debugInfo);
                                }
                        }
                    } catch (debugInfo) {
                        cb(node, node.return, debugInfo);
                    }
                    if (node === elem) {
                        /** @type {null} */
                        root = null;
                        break;
                    }
                    var state = node.sibling;
                    if (null !== state) {
                        state.return = node.return;
                        root = state;
                        break;
                    }
                    root = node.return;
                }
            }
            /**
             * @return {?}
             */
            function requestAnimationFrame() {
                return 0 !== (6 & method) ? now() : -1 !== renderEnd ? renderEnd : renderEnd = now();
            }
            /**
             * @param {!Object} data
             * @return {?}
             */
            function Number(data) {
                return 0 === (1 & data.mode) ? 1 : 0 !== (2 & method) && 0 !== undefined ? undefined & -undefined : null !== linedUpMareyLines.transition ? (0 === udist && (udist = min()), udist) : 0 !== (data = touch) ? data : data = void 0 === (data = window.event) ? 16 : bindEvents(data.type);
            }
            /**
             * @param {!Object} obj
             * @param {!Object} message
             * @param {number} t
             * @param {number} data
             * @return {undefined}
             */
            function assert(obj, message, t, data) {
                if (50 < isEvaluating) {
                    throw isEvaluating = 0, source = null, Error(call(185));
                }
                write(obj, t, data);
                if (!(0 !== (2 & method) && obj === value)) {
                    if (obj === value) {
                        if (0 === (2 & method)) {
                            /** @type {number} */
                            mask = mask | t;
                        }
                        if (4 === NIL) {
                            is(obj, undefined);
                        }
                    }
                    get(obj, data);
                    if (1 === t && 0 === method && 0 === (1 & message.mode)) {
                        ttl = now() + 500;
                        if (Vo) {
                            replace();
                        }
                    }
                }
            }
            /**
             * @param {!Object} data
             * @param {number} a
             * @return {undefined}
             */
            function get(data, a) {
                var id = data.callbackNode;
                !function (_, value) {
                    var b2 = _.suspendedLanes;
                    var b1 = _.pingedLanes;
                    var o = _.expirationTimes;
                    var b = _.pendingLanes;
                    for (; 0 < b;) {
                        /** @type {number} */
                        var name = 31 - isArray(b);
                        /** @type {number} */
                        var a = 1 << name;
                        var actualValue = o[name];
                        if (-1 === actualValue) {
                            if (!(0 !== (a & b2) && 0 === (a & b1))) {
                                o[name] = parseFloat(a, value);
                            }
                        } else {
                            if (actualValue <= value) {
                                _.expiredLanes |= a;
                            }
                        }
                        /** @type {number} */
                        b = b & ~a;
                    }
                }(data, a);
                var actual = serialize(data, data === value ? undefined : 0);
                if (0 === actual) {
                    if (null !== id) {
                        startsWith(id);
                    }
                    /** @type {null} */
                    data.callbackNode = null;
                    /** @type {number} */
                    data.callbackPriority = 0;
                } else {
                    if (a = actual & -actual, data.callbackPriority !== a) {
                        if (null != id && startsWith(id), 1 === a) {
                            if (0 === data.tag) {
                                (function (type) {
                                    /** @type {boolean} */
                                    Vo = true;
                                    onError(type);
                                })(listener.bind(null, data));
                            } else {
                                onError(listener.bind(null, data));
                            }
                            _extGetter(function () {
                                if (0 === (6 & method)) {
                                    replace();
                                }
                            });
                            /** @type {null} */
                            id = null;
                        } else {
                            switch (puts(actual)) {
                                case 1:
                                    id = filename;
                                    break;
                                case 4:
                                    id = _onload;
                                    break;
                                case 16:
                                default:
                                    id = user;
                                    break;
                                case 536870912:
                                    id = finalId;
                            }
                            id = getId(id, start.bind(null, data));
                        }
                        /** @type {number} */
                        data.callbackPriority = a;
                        data.callbackNode = id;
                    }
                }
            }
            /**
             * @param {!Object} data
             * @param {number} x
             * @return {?}
             */
            function start(data, x) {
                if (renderEnd = -1, udist = 0, 0 !== (6 & method)) {
                    throw Error(call(327));
                }
                var list = data.callbackNode;
                if (done() && data.callbackNode !== list) {
                    return null;
                }
                var i = serialize(data, data === value ? undefined : 0);
                if (0 === i) {
                    return null;
                }
                if (0 !== (30 & i) || 0 !== (i & data.expiredLanes) || x) {
                    x = copy(data, i);
                } else {
                    x = i;
                    var obj = method;
                    /** @type {number} */
                    method = method | 2;
                    var a = initCTAValue();
                    if (!(value === data && undefined === x)) {
                        /** @type {null} */
                        url = null;
                        ttl = now() + 500;
                        map(data, x);
                    }
                    for (; ;) {
                        try {
                            waitUntilQuiet();
                            break;
                        } catch (LAST) {
                            update(data, LAST);
                        }
                    }
                    _callUserDefinedCallback();
                    $scope.current = a;
                    method = obj;
                    if (null !== c) {
                        /** @type {number} */
                        x = 0;
                    } else {
                        /** @type {null} */
                        value = null;
                        /** @type {number} */
                        undefined = 0;
                        x = NIL;
                    }
                }
                if (0 !== x) {
                    if (2 === x && (0 !== (obj = unpack(data)) && (i = obj, x = getList(data, obj))), 1 === x) {
                        throw list = domains, map(data, 0), is(data, i), get(data, now()), list;
                    }
                    if (6 === x) {
                        is(data, i);
                    } else {
                        if (obj = data.current.alternate, 0 === (30 & i) && !function (message) {
                            var node = message;
                            for (; ;) {
                                if (16384 & node.flags) {
                                    var parent = node.updateQueue;
                                    if (null !== parent && null !== (parent = parent.stores)) {
                                        /** @type {number} */
                                        var i = 0;
                                        for (; i < parent.length; i++) {
                                            var obj = parent[i];
                                            var max = obj.getSnapshot;
                                            obj = obj.value;
                                            try {
                                                if (!compare(max(), obj)) {
                                                    return false;
                                                }
                                            } catch (l) {
                                                return false;
                                            }
                                        }
                                    }
                                }
                                if (parent = node.child, 16384 & node.subtreeFlags && null !== parent) {
                                    parent.return = node;
                                    node = parent;
                                } else {
                                    if (node === message) {
                                        break;
                                    }
                                    for (; null === node.sibling;) {
                                        if (null === node.return || node.return === message) {
                                            return true;
                                        }
                                        node = node.return;
                                    }
                                    node.sibling.return = node.return;
                                    node = node.sibling;
                                }
                            }
                            return true;
                        }(obj) && (2 === (x = copy(data, i)) && (0 !== (a = unpack(data)) && (i = a, x = getList(data, a))), 1 === x)) {
                            throw list = domains, map(data, 0), is(data, i), get(data, now()), list;
                        }
                        switch (data.finishedWork = obj, data.finishedLanes = i, x) {
                            case 0:
                            case 1:
                                throw Error(call(345));
                            case 2:
                            case 5:
                                load(data, d, url);
                                break;
                            case 3:
                                if (is(data, i), (130023424 & i) === i && 10 < (x = timestamp + 500 - now())) {
                                    if (0 !== serialize(data, 0)) {
                                        break;
                                    }
                                    if (((obj = data.suspendedLanes) & i) !== i) {
                                        requestAnimationFrame();
                                        data.pingedLanes |= data.suspendedLanes & obj;
                                        break;
                                    }
                                    /** @type {number} */
                                    data.timeoutHandle = getItem(load.bind(null, data, d, url), x);
                                    break;
                                }
                                load(data, d, url);
                                break;
                            case 4:
                                if (is(data, i), (4194240 & i) === i) {
                                    break;
                                }
                                x = data.eventTimes;
                                /** @type {number} */
                                obj = -1;
                                for (; 0 < i;) {
                                    /** @type {number} */
                                    var type = 31 - isArray(i);
                                    /** @type {number} */
                                    a = 1 << type;
                                    if ((type = x[type]) > obj) {
                                        obj = type;
                                    }
                                    /** @type {number} */
                                    i = i & ~a;
                                }
                                if (i = obj, 10 < (i = (120 > (i = now() - i) ? 120 : 480 > i ? 480 : 1080 > i ? 1080 : 1920 > i ? 1920 : 3E3 > i ? 3E3 : 4320 > i ? 4320 : 1960 * ceil(i / 1960)) - i)) {
                                    /** @type {number} */
                                    data.timeoutHandle = getItem(load.bind(null, data, d, url), i);
                                    break;
                                }
                                load(data, d, url);
                                break;
                            default:
                                throw Error(call(329));
                        }
                    }
                }
                return get(data, now()), data.callbackNode === list ? start.bind(null, data) : null;
            }
            /**
             * @param {!Object} value
             * @param {!Object} name
             * @return {?}
             */
            function getList(value, name) {
                var darkThemeBackground = entries;
                return value.current.memoizedState.isDehydrated && (map(value, name).flags |= 256), 2 !== (value = copy(value, name)) && (name = d, d = darkThemeBackground, null !== name && flatten(name)), value;
            }
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            function flatten(a) {
                if (null === d) {
                    /** @type {!Object} */
                    d = a;
                } else {
                    d.push.apply(d, a);
                }
            }
            /**
             * @param {!Object} node
             * @param {number} value
             * @return {undefined}
             */
            function is(node, value) {
                /** @type {number} */
                value = value & ~DndMode;
                /** @type {number} */
                value = value & ~mask;
                node.suspendedLanes |= value;
                node.pingedLanes &= ~value;
                node = node.expirationTimes;
                for (; 0 < value;) {
                    /** @type {number} */
                    var line = 31 - isArray(value);
                    /** @type {number} */
                    var lmask = 1 << line;
                    /** @type {number} */
                    node[line] = -1;
                    /** @type {number} */
                    value = value & ~lmask;
                }
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function listener(value) {
                if (0 !== (6 & method)) {
                    throw Error(call(327));
                }
                done();
                var data = serialize(value, 0);
                if (0 === (1 & data)) {
                    return get(value, now()), null;
                }
                var list = copy(value, data);
                if (0 !== value.tag && 2 === list) {
                    var msg = unpack(value);
                    if (0 !== msg) {
                        data = msg;
                        list = getList(value, msg);
                    }
                }
                if (1 === list) {
                    throw list = domains, map(value, 0), is(value, data), get(value, now()), list;
                }
                if (6 === list) {
                    throw Error(call(345));
                }
                return value.finishedWork = value.current.alternate, value.finishedLanes = data, load(value, d, url), get(value, now()), null;
            }
            /**
             * @param {!Function} callback
             * @param {!Array} filename
             * @return {?}
             */
            function download(callback, filename) {
                var m = method;
                /** @type {number} */
                method = method | 1;
                try {
                    return callback(filename);
                } finally {
                    if (0 === (method = m)) {
                        ttl = now() + 500;
                        if (Vo) {
                            replace();
                        }
                    }
                }
            }
            /**
             * @param {!Function} cb
             * @return {?}
             */
            function toggle(cb) {
                if (null !== n && 0 === n.tag && 0 === (6 & method)) {
                    done();
                }
                var m = method;
                /** @type {number} */
                method = method | 1;
                var transition = anim.transition;
                var nativeEvent = touch;
                try {
                    if (anim.transition = null, touch = 1, cb) {
                        return cb();
                    }
                } finally {
                    touch = nativeEvent;
                    anim.transition = transition;
                    if (0 === (6 & (method = m))) {
                        replace();
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function updateSlider() {
                ret = str.current;
                isEmpty(str);
            }
            /**
             * @param {!Object} o
             * @param {number} index
             * @return {?}
             */
            function map(o, index) {
                /** @type {null} */
                o.finishedWork = null;
                /** @type {number} */
                o.finishedLanes = 0;
                var node = o.timeoutHandle;
                if (-1 !== node && (o.timeoutHandle = -1, addDoc(node)), null !== c) {
                    node = c.return;
                    for (; null !== node;) {
                        var element = node;
                        switch (fun(element), element.tag) {
                            case 1:
                                if (null !== (element = element.type.childContextTypes) && void 0 !== element) {
                                    isFn();
                                }
                                break;
                            case 3:
                                baseEach();
                                isEmpty(users);
                                isEmpty(obj);
                                mapArray();
                                break;
                            case 5:
                                param(element);
                                break;
                            case 4:
                                baseEach();
                                break;
                            case 13:
                            case 19:
                                isEmpty(config);
                                break;
                            case 10:
                                createCallback(element.type._context);
                                break;
                            case 22:
                            case 23:
                                updateSlider();
                        }
                        node = node.return;
                    }
                }
                if (value = o, c = o = clone(o.current, null), undefined = ret = index, NIL = 0, domains = null, DndMode = mask = res = 0, d = entries = null, null !== ast) {
                    /** @type {number} */
                    index = 0;
                    for (; index < ast.length; index++) {
                        if (null !== (element = (node = ast[index]).interleaved)) {
                            /** @type {null} */
                            node.interleaved = null;
                            var c = element.next;
                            var callbacks = node.pending;
                            if (null !== callbacks) {
                                var i = callbacks.next;
                                callbacks.next = c;
                                element.next = i;
                            }
                            node.pending = element;
                        }
                    }
                    /** @type {null} */
                    ast = null;
                }
                return o;
            }
            /**
             * @param {!Object} data
             * @param {number} value
             * @return {undefined}
             */
            function update(data, value) {
                for (; ;) {
                    var n = c;
                    try {
                        if (_callUserDefinedCallback(), water.current = current, header_map) {
                            var entry = result.memoizedState;
                            for (; null !== entry;) {
                                var q = entry.queue;
                                if (null !== q) {
                                    /** @type {null} */
                                    q.pending = null;
                                }
                                entry = entry.next;
                            }
                            /** @type {boolean} */
                            header_map = false;
                        }
                        if (base = 0, element = scope = result = null, tmp_headers = false, x$$ = 0, timestampGenerator.current = null, null === n || null === n.return) {
                            /** @type {number} */
                            NIL = 1;
                            /** @type {number} */
                            domains = value;
                            /** @type {null} */
                            c = null;
                            break;
                        }
                        e: {
                            /** @type {!Object} */
                            var node = data;
                            var x = n.return;
                            var key = n;
                            /** @type {number} */
                            var obj = value;
                            if (value = undefined, key.flags |= 32768, null !== obj && "object" === typeof obj && "function" === typeof obj.then) {
                                var prop = obj;
                                var item = key;
                                var tag = item.tag;
                                if (0 === (1 & item.mode) && (0 === tag || 11 === tag || 15 === tag)) {
                                    var p = item.alternate;
                                    if (p) {
                                        item.updateQueue = p.updateQueue;
                                        item.memoizedState = p.memoizedState;
                                        item.lanes = p.lanes;
                                    } else {
                                        /** @type {null} */
                                        item.updateQueue = null;
                                        /** @type {null} */
                                        item.memoizedState = null;
                                    }
                                }
                                var w = clamp(x);
                                if (null !== w) {
                                    w.flags &= -257;
                                    convert(w, x, key, 0, value);
                                    if (1 & w.mode) {
                                        fill(node, prop, value);
                                    }
                                    obj = prop;
                                    var exMap = (value = w).updateQueue;
                                    if (null === exMap) {
                                        /** @type {!Set} */
                                        var select = new Set;
                                        select.add(obj);
                                        /** @type {!Set} */
                                        value.updateQueue = select;
                                    } else {
                                        exMap.add(obj);
                                    }
                                    break e;
                                }
                                if (0 === (1 & value)) {
                                    fill(node, prop, value);
                                    fadeOut();
                                    break e;
                                }
                                /** @type {!Error} */
                                obj = Error(call(426));
                            } else {
                                if (err && 1 & key.mode) {
                                    var b = clamp(x);
                                    if (null !== b) {
                                        if (0 === (65536 & b.flags)) {
                                            b.flags |= 256;
                                        }
                                        convert(b, x, key, 0, value);
                                        expect(next(obj, key));
                                        break e;
                                    }
                                }
                            }
                            node = obj = next(obj, key);
                            if (4 !== NIL) {
                                /** @type {number} */
                                NIL = 2;
                            }
                            if (null === entries) {
                                /** @type {!Array} */
                                entries = [node];
                            } else {
                                entries.push(node);
                            }
                            node = x;
                            do {
                                switch (node.tag) {
                                    case 3:
                                        node.flags |= 65536;
                                        /** @type {number} */
                                        value = value & -value;
                                        node.lanes |= value;
                                        dispatch(node, push(0, obj, value));
                                        break e;
                                    case 1:
                                        key = obj;
                                        var tempNodeType = node.type;
                                        var b = node.stateNode;
                                        if (0 === (128 & node.flags) && ("function" === typeof tempNodeType.getDerivedStateFromError || null !== b && "function" === typeof b.componentDidCatch && (null === laxCharList || !laxCharList.has(b)))) {
                                            node.flags |= 65536;
                                            /** @type {number} */
                                            value = value & -value;
                                            node.lanes |= value;
                                            dispatch(node, initialize(node, key, value));
                                            break e;
                                        }
                                }
                                node = node.return;
                            } while (null !== node);
                        }
                        leave(n);
                    } catch (sequence_values) {
                        value = sequence_values;
                        if (c === n && null !== n) {
                            c = n = n.return;
                        }
                        continue;
                    }
                    break;
                }
            }
            /**
             * @return {?}
             */
            function initCTAValue() {
                var page = $scope.current;
                return $scope.current = current, null === page ? current : page;
            }
            /**
             * @return {undefined}
             */
            function fadeOut() {
                if (!(0 !== NIL && 3 !== NIL && 2 !== NIL)) {
                    /** @type {number} */
                    NIL = 4;
                }
                if (!(null === value || 0 === (268435455 & res) && 0 === (268435455 & mask))) {
                    is(value, undefined);
                }
            }
            /**
             * @param {!Object} array
             * @param {boolean} object
             * @return {?}
             */
            function copy(array, object) {
                var m = method;
                /** @type {number} */
                method = method | 2;
                var a = initCTAValue();
                if (!(value === array && undefined === object)) {
                    /** @type {null} */
                    url = null;
                    map(array, object);
                }
                for (; ;) {
                    try {
                        reviveFn();
                        break;
                    } catch (LAST) {
                        update(array, LAST);
                    }
                }
                if (_callUserDefinedCallback(), method = m, $scope.current = a, null !== c) {
                    throw Error(call(261));
                }
                return value = null, undefined = 0, NIL;
            }
            /**
             * @return {undefined}
             */
            function reviveFn() {
                for (; null !== c;) {
                    disconnect(c);
                }
            }
            /**
             * @return {undefined}
             */
            function waitUntilQuiet() {
                for (; null !== c && !activable();) {
                    disconnect(c);
                }
            }
            /**
             * @param {!Object} node
             * @return {undefined}
             */
            function disconnect(node) {
                var i = render(node.alternate, node, ret);
                node.memoizedProps = node.pendingProps;
                if (null === i) {
                    leave(node);
                } else {
                    c = i;
                }
                /** @type {null} */
                timestampGenerator.current = null;
            }
            /**
             * @param {!Object} parent
             * @return {?}
             */
            function leave(parent) {
                /** @type {!Object} */
                var node = parent;
                do {
                    var value = node.alternate;
                    if (parent = node.return, 0 === (32768 & node.flags)) {
                        if (null !== (value = callback(value, node, ret))) {
                            return void (c = value);
                        }
                    } else {
                        if (null !== (value = max(value, node))) {
                            return value.flags &= 32767, void (c = value);
                        }
                        if (null === parent) {
                            return NIL = 6, void (c = null);
                        }
                        parent.flags |= 32768;
                        /** @type {number} */
                        parent.subtreeFlags = 0;
                        /** @type {null} */
                        parent.deletions = null;
                    }
                    if (null !== (node = node.sibling)) {
                        return void (c = node);
                    }
                    c = node = parent;
                } while (null !== node);
                if (0 === NIL) {
                    /** @type {number} */
                    NIL = 5;
                }
            }
            /**
             * @param {!Object} klass
             * @param {string} id
             * @param {string} n
             * @return {?}
             */
            function load(klass, id, n) {
                var nativeEvent = touch;
                var transition = anim.transition;
                try {
                    /** @type {null} */
                    anim.transition = null;
                    /** @type {number} */
                    touch = 1;
                    (function (name, text, i, send) {
                        do {
                            done();
                        } while (null !== n);
                        if (0 !== (6 & method)) {
                            throw Error(call(327));
                        }
                        i = name.finishedWork;
                        var token = name.finishedLanes;
                        if (null === i) {
                            return null;
                        }
                        if (name.finishedWork = null, name.finishedLanes = 0, i === name.current) {
                            throw Error(call(177));
                        }
                        /** @type {null} */
                        name.callbackNode = null;
                        /** @type {number} */
                        name.callbackPriority = 0;
                        /** @type {number} */
                        var transition = i.lanes | i.childLanes;
                        if (function (cell, result) {
                            /** @type {number} */
                            var b = cell.pendingLanes & ~result;
                            /** @type {number} */
                            cell.pendingLanes = result;
                            /** @type {number} */
                            cell.suspendedLanes = 0;
                            /** @type {number} */
                            cell.pingedLanes = 0;
                            cell.expiredLanes &= result;
                            cell.mutableReadLanes &= result;
                            cell.entangledLanes &= result;
                            result = cell.entanglements;
                            var column = cell.eventTimes;
                            cell = cell.expirationTimes;
                            for (; 0 < b;) {
                                /** @type {number} */
                                var r = 31 - isArray(b);
                                /** @type {number} */
                                var c = 1 << r;
                                /** @type {number} */
                                result[r] = 0;
                                /** @type {number} */
                                column[r] = -1;
                                /** @type {number} */
                                cell[r] = -1;
                                /** @type {number} */
                                b = b & ~c;
                            }
                        }(name, transition), name === value && (c = value = null, undefined = 0), 0 === (2064 & i.subtreeFlags) && 0 === (2064 & i.flags) || _localExports || (_localExports = true, getId(user, function () {
                            return done(), null;
                        })), transition = 0 !== (15990 & i.flags), 0 !== (15990 & i.subtreeFlags) || transition) {
                            transition = anim.transition;
                            /** @type {null} */
                            anim.transition = null;
                            var nativeEvent = touch;
                            /** @type {number} */
                            touch = 1;
                            var m = method;
                            /** @type {number} */
                            method = method | 4;
                            /** @type {null} */
                            timestampGenerator.current = null;
                            (function (element, node) {
                                if (proto$0 = so, handleKeyEvent(element = html())) {
                                    if ("selectionStart" in element) {
                                        var target = {
                                            start: element.selectionStart,
                                            end: element.selectionEnd
                                        };
                                    } else {
                                        e: {
                                            var selection = (target = (target = element.ownerDocument) && target.defaultView || window).getSelection && target.getSelection();
                                            if (selection && 0 !== selection.rangeCount) {
                                                target = selection.anchorNode;
                                                var leftOffset = selection.anchorOffset;
                                                var endNode = selection.focusNode;
                                                selection = selection.focusOffset;
                                                try {
                                                    target.nodeType;
                                                    endNode.nodeType;
                                                } catch (x) {
                                                    /** @type {null} */
                                                    target = null;
                                                    break e;
                                                }
                                                /** @type {number} */
                                                var left = 0;
                                                /** @type {number} */
                                                var x = -1;
                                                /** @type {number} */
                                                var right = -1;
                                                /** @type {number} */
                                                var broadcasts = 0;
                                                /** @type {number} */
                                                var f = 0;
                                                /** @type {!Object} */
                                                var node = element;
                                                /** @type {null} */
                                                var current = null;
                                                t: for (; ;) {
                                                    var nextNode;
                                                    for (; node !== target || 0 !== leftOffset && 3 !== node.nodeType || (x = left + leftOffset), node !== endNode || 0 !== selection && 3 !== node.nodeType || (right = left + selection), 3 === node.nodeType && (left = left + node.nodeValue.length), null !== (nextNode = node.firstChild);) {
                                                        current = node;
                                                        node = nextNode;
                                                    }
                                                    for (; ;) {
                                                        if (node === element) {
                                                            break t;
                                                        }
                                                        if (current === target && ++broadcasts === leftOffset && (x = left), current === endNode && ++f === selection && (right = left), null !== (nextNode = node.nextSibling)) {
                                                            break;
                                                        }
                                                        current = (node = current).parentNode;
                                                    }
                                                    node = nextNode;
                                                }
                                                /** @type {(null|{end: ?, start: ?})} */
                                                target = -1 === x || -1 === right ? null : {
                                                    start: x,
                                                    end: right
                                                };
                                            } else {
                                                /** @type {null} */
                                                target = null;
                                            }
                                        }
                                    }
                                    /** @type {({end: ?, start: ?}|{end: number, start: number})} */
                                    target = target || {
                                        start: 0,
                                        end: 0
                                    };
                                } else {
                                    /** @type {null} */
                                    target = null;
                                }
                                static$0 = {
                                    focusedElem: element,
                                    selectionRange: target
                                };
                                /** @type {boolean} */
                                so = false;
                                /** @type {!Object} */
                                root = node;
                                for (; null !== root;) {
                                    if (element = (node = root).child, 0 !== (1028 & node.subtreeFlags) && null !== element) {
                                        /** @type {!Object} */
                                        element.return = node;
                                        /** @type {!Object} */
                                        root = element;
                                    } else {
                                        for (; null !== root;) {
                                            node = root;
                                            try {
                                                var alternate = node.alternate;
                                                if (0 !== (1024 & node.flags)) {
                                                    switch (node.tag) {
                                                        case 0:
                                                        case 11:
                                                        case 15:
                                                        case 5:
                                                        case 6:
                                                        case 4:
                                                        case 17:
                                                            break;
                                                        case 1:
                                                            if (null !== alternate) {
                                                                var value = alternate.memoizedProps;
                                                                var v2y = alternate.memoizedState;
                                                                var p = node.stateNode;
                                                                var a = p.getSnapshotBeforeUpdate(node.elementType === node.type ? value : iterator(node.type, value), v2y);
                                                                p.__reactInternalSnapshotBeforeUpdate = a;
                                                            }
                                                            break;
                                                        case 3:
                                                            var aNode = node.stateNode.containerInfo;
                                                            if (1 === aNode.nodeType) {
                                                                /** @type {string} */
                                                                aNode.textContent = "";
                                                            } else {
                                                                if (9 === aNode.nodeType && aNode.documentElement) {
                                                                    aNode.removeChild(aNode.documentElement);
                                                                }
                                                            }
                                                            break;
                                                        default:
                                                            throw Error(call(163));
                                                    }
                                                }
                                            } catch (debugInfo) {
                                                cb(node, node.return, debugInfo);
                                            }
                                            if (null !== (element = node.sibling)) {
                                                element.return = node.return;
                                                /** @type {!Object} */
                                                root = element;
                                                break;
                                            }
                                            root = node.return;
                                        }
                                    }
                                }
                                alternate = quoteValue;
                                /** @type {boolean} */
                                quoteValue = false;
                            })(name, i);
                            add(i, name);
                            getCursorPosition(static$0);
                            /** @type {boolean} */
                            so = !!proto$0;
                            /** @type {null} */
                            static$0 = proto$0 = null;
                            /** @type {string} */
                            name.current = i;
                            block(i, name, token);
                            reBase();
                            method = m;
                            touch = nativeEvent;
                            anim.transition = transition;
                        } else {
                            /** @type {string} */
                            name.current = i;
                        }
                        if (_localExports && (_localExports = false, n = name, actual = token), 0 === (transition = name.pendingLanes) && (laxCharList = null), function (m) {
                            if (template && "function" === typeof template.onCommitFiberRoot) {
                                try {
                                    template.onCommitFiberRoot(content, m, void 0, 128 === (128 & m.current.flags));
                                } catch (t) {
                                }
                            }
                        }(i.stateNode), get(name, now()), null !== text) {
                            send = name.onRecoverableError;
                            /** @type {number} */
                            i = 0;
                            for (; i < text.length; i++) {
                                send((token = text[i]).value, {
                                    componentStack: token.stack,
                                    digest: token.digest
                                });
                            }
                        }
                        if (_cx) {
                            throw _cx = false, name = selected, selected = null, name;
                        }
                        if (0 !== (1 & actual) && 0 !== name.tag) {
                            done();
                        }
                        if (0 !== (1 & (transition = name.pendingLanes))) {
                            if (name === source) {
                                isEvaluating++;
                            } else {
                                /** @type {number} */
                                isEvaluating = 0;
                                /** @type {!Object} */
                                source = name;
                            }
                        } else {
                            /** @type {number} */
                            isEvaluating = 0;
                        }
                        replace();
                    })(klass, id, n, nativeEvent);
                } finally {
                    anim.transition = transition;
                    touch = nativeEvent;
                }
                return null;
            }
            /**
             * @return {?}
             */
            function done() {
                if (null !== n) {
                    var t = puts(actual);
                    var transition = anim.transition;
                    var nativeEvent = touch;
                    try {
                        if (anim.transition = null, touch = 16 > t ? 16 : t, null === n) {
                            /** @type {boolean} */
                            var _done = false;
                        } else {
                            if (t = n, n = null, actual = 0, 0 !== (6 & method)) {
                                throw Error(call(331));
                            }
                            var m = method;
                            /** @type {number} */
                            method = method | 4;
                            root = t.current;
                            for (; null !== root;) {
                                var node = root;
                                var value = node.child;
                                if (0 !== (16 & root.flags)) {
                                    var obj = node.deletions;
                                    if (null !== obj) {
                                        /** @type {number} */
                                        var i = 0;
                                        for (; i < obj.length; i++) {
                                            var state = obj[i];
                                            root = state;
                                            for (; null !== root;) {
                                                var value = root;
                                                switch (value.tag) {
                                                    case 0:
                                                    case 11:
                                                    case 15:
                                                        setAttribute(8, value, node);
                                                }
                                                var item = value.child;
                                                if (null !== item) {
                                                    item.return = value;
                                                    root = item;
                                                } else {
                                                    for (; null !== root;) {
                                                        var tree = (value = root).sibling;
                                                        var result = value.return;
                                                        if (hasDataChanged(value), value === state) {
                                                            /** @type {null} */
                                                            root = null;
                                                            break;
                                                        }
                                                        if (null !== tree) {
                                                            tree.return = result;
                                                            root = tree;
                                                            break;
                                                        }
                                                        root = result;
                                                    }
                                                }
                                            }
                                        }
                                        var alt = node.alternate;
                                        if (null !== alt) {
                                            var childGroup = alt.child;
                                            if (null !== childGroup) {
                                                /** @type {null} */
                                                alt.child = null;
                                                do {
                                                    var evalMarker = childGroup.sibling;
                                                    /** @type {null} */
                                                    childGroup.sibling = null;
                                                    childGroup = evalMarker;
                                                } while (null !== childGroup);
                                            }
                                        }
                                        root = node;
                                    }
                                }
                                if (0 !== (2064 & node.subtreeFlags) && null !== value) {
                                    value.return = node;
                                    root = value;
                                } else {
                                    e: for (; null !== root;) {
                                        if (0 !== (2048 & (node = root).flags)) {
                                            switch (node.tag) {
                                                case 0:
                                                case 11:
                                                case 15:
                                                    setAttribute(9, node, node.return);
                                            }
                                        }
                                        var state = node.sibling;
                                        if (null !== state) {
                                            state.return = node.return;
                                            root = state;
                                            break e;
                                        }
                                        root = node.return;
                                    }
                                }
                            }
                            var tag = t.current;
                            root = tag;
                            for (; null !== root;) {
                                var item = (value = root).child;
                                if (0 !== (2064 & value.subtreeFlags) && null !== item) {
                                    item.return = value;
                                    root = item;
                                } else {
                                    value = tag;
                                    e: for (; null !== root;) {
                                        if (0 !== (2048 & (obj = root).flags)) {
                                            try {
                                                switch (obj.tag) {
                                                    case 0:
                                                    case 11:
                                                    case 15:
                                                        onDone(9, obj);
                                                }
                                            } catch (debugInfo) {
                                                cb(obj, obj.return, debugInfo);
                                            }
                                        }
                                        if (obj === value) {
                                            /** @type {null} */
                                            root = null;
                                            break e;
                                        }
                                        var body = obj.sibling;
                                        if (null !== body) {
                                            body.return = obj.return;
                                            root = body;
                                            break e;
                                        }
                                        root = obj.return;
                                    }
                                }
                            }
                            if (method = m, replace(), template && "function" === typeof template.onPostCommitFiberRoot) {
                                try {
                                    template.onPostCommitFiberRoot(content, t);
                                } catch (C) {
                                }
                            }
                            /** @type {boolean} */
                            _done = true;
                        }
                        return _done;
                    } finally {
                        touch = nativeEvent;
                        anim.transition = transition;
                    }
                }
                return false;
            }
            /**
             * @param {!Object} data
             * @param {!Array} id
             * @param {?} o
             * @return {undefined}
             */
            function clear(data, id, o) {
                data = filter(data, id = push(0, id = next(o, id), 1), 1);
                id = requestAnimationFrame();
                if (null !== data) {
                    write(data, 1, id);
                    get(data, id);
                }
            }
            /**
             * @param {?} id
             * @param {!Object} node
             * @param {?} s
             * @return {undefined}
             */
            function cb(id, node, s) {
                if (3 === id.tag) {
                    clear(id, id, s);
                } else {
                    for (; null !== node;) {
                        if (3 === node.tag) {
                            clear(node, id, s);
                            break;
                        }
                        if (1 === node.tag) {
                            var r = node.stateNode;
                            if ("function" === typeof node.type.getDerivedStateFromError || "function" === typeof r.componentDidCatch && (null === laxCharList || !laxCharList.has(r))) {
                                node = filter(node, id = initialize(node, id = next(s, id), 1), 1);
                                id = requestAnimationFrame();
                                if (null !== node) {
                                    write(node, 1, id);
                                    get(node, id);
                                }
                                break;
                            }
                        }
                        node = node.return;
                    }
                }
            }
            /**
             * @param {!Object} filter
             * @param {!Array} id
             * @param {undefined} mode
             * @return {undefined}
             */
            function analyze(filter, id, mode) {
                var m = filter.pingCache;
                if (null !== m) {
                    m.delete(id);
                }
                id = requestAnimationFrame();
                filter.pingedLanes |= filter.suspendedLanes & mode;
                if (value === filter && (undefined & mode) === mode) {
                    if (4 === NIL || 3 === NIL && (130023424 & undefined) === undefined && 500 > now() - timestamp) {
                        map(filter, 0);
                    } else {
                        /** @type {number} */
                        DndMode = DndMode | mode;
                    }
                }
                get(filter, id);
            }
            /**
             * @param {!Object} obj
             * @param {number} data
             * @return {undefined}
             */
            function sync(obj, data) {
                if (0 === data) {
                    if (0 === (1 & obj.mode)) {
                        /** @type {number} */
                        data = 1;
                    } else {
                        data = pattern;
                        if (0 === (130023424 & (pattern = pattern << 1))) {
                            /** @type {number} */
                            pattern = 4194304;
                        }
                    }
                }
                var id = requestAnimationFrame();
                if (null !== (obj = $(obj, data))) {
                    write(obj, data, id);
                    get(obj, id);
                }
            }
            /**
             * @param {!Object} data
             * @return {undefined}
             */
            function sendDataToClient(data) {
                var request = data.memoizedState;
                /** @type {number} */
                var message = 0;
                if (null !== request) {
                    message = request.retryLane;
                }
                sync(data, message);
            }
            /**
             * @param {!Object} data
             * @param {!Object} value
             * @return {undefined}
             */
            function resolver(data, value) {
                /** @type {number} */
                var message = 0;
                switch (data.tag) {
                    case 13:
                        var y = data.stateNode;
                        var request = data.memoizedState;
                        if (null !== request) {
                            message = request.retryLane;
                        }
                        break;
                    case 19:
                        y = data.stateNode;
                        break;
                    default:
                        throw Error(call(314));
                }
                if (null !== y) {
                    y.delete(value);
                }
                sync(data, message);
            }
            /**
             * @param {undefined} url
             * @param {!Function} key
             * @return {?}
             */
            function getId(url, key) {
                return hash(url, key);
            }
            /**
             * @param {string} tag
             * @param {?} classes
             * @param {string} name
             * @param {number} type
             * @return {undefined}
             */
            function Node(tag, classes, name, type) {
                /** @type {string} */
                this.tag = tag;
                /** @type {string} */
                this.key = name;
                /** @type {null} */
                this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
                /** @type {number} */
                this.index = 0;
                /** @type {null} */
                this.ref = null;
                this.pendingProps = classes;
                /** @type {null} */
                this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
                /** @type {number} */
                this.mode = type;
                /** @type {number} */
                this.subtreeFlags = this.flags = 0;
                /** @type {null} */
                this.deletions = null;
                /** @type {number} */
                this.childLanes = this.lanes = 0;
                /** @type {null} */
                this.alternate = null;
            }
            /**
             * @param {number} object
             * @param {!Object} data
             * @param {!Object} parent
             * @param {number} name
             * @return {?}
             */
            function toString(object, data, parent, name) {
                return new Node(object, data, parent, name);
            }
            /**
             * @param {!Object} object
             * @return {?}
             */
            function dump(object) {
                return !(!(object = object.prototype) || !object.isReactComponent);
            }
            /**
             * @param {!Object} options
             * @param {!Object} data
             * @return {?}
             */
            function clone(options, data) {
                var node = options.alternate;
                return null === node ? ((node = toString(options.tag, data, options.key, options.mode)).elementType = options.elementType, node.type = options.type, node.stateNode = options.stateNode, node.alternate = options, options.alternate = node) : (node.pendingProps = data, node.type = options.type, node.flags = 0, node.subtreeFlags = 0, node.deletions = null), node.flags = 14680064 & options.flags, node.childLanes = options.childLanes, node.lanes = options.lanes, node.child = options.child, node.memoizedProps =
                    options.memoizedProps, node.memoizedState = options.memoizedState, node.updateQueue = options.updateQueue, data = options.dependencies, node.dependencies = null === data ? null : {
                        lanes: data.lanes,
                        firstContext: data.firstContext
                    }, node.sibling = options.sibling, node.index = options.index, node.ref = options.ref, node;
            }
            /**
             * @param {!Object} a
             * @param {!Object} result
             * @param {!Object} data
             * @param {!Object} text
             * @param {number} value
             * @param {!Object} i
             * @return {?}
             */
            function debug(a, result, data, text, value, i) {
                /** @type {number} */
                var node_1 = 2;
                if (text = a, "function" === typeof a) {
                    if (dump(a)) {
                        /** @type {number} */
                        node_1 = 1;
                    }
                } else {
                    if ("string" === typeof a) {
                        /** @type {number} */
                        node_1 = 5;
                    } else {
                        e: {
                            switch (a) {
                                case string:
                                    return f(data.children, value, i, result);
                                case D:
                                    /** @type {number} */
                                    node_1 = 8;
                                    /** @type {number} */
                                    value = value | 8;
                                    break;
                                case searchParams:
                                    return (a = toString(12, data, result, 2 | value)).elementType = searchParams, a.lanes = i, a;
                                case tempMatch:
                                    return (a = toString(13, data, result, value)).elementType = tempMatch, a.lanes = i, a;
                                case colors:
                                    return (a = toString(19, data, result, value)).elementType = colors, a.lanes = i, a;
                                case w:
                                    return indexOf(data, value, i, result);
                                default:
                                    if ("object" === typeof a && null !== a) {
                                        switch (a.$$typeof) {
                                            case Bite:
                                                /** @type {number} */
                                                node_1 = 10;
                                                break e;
                                            case togglelayer:
                                                /** @type {number} */
                                                node_1 = 9;
                                                break e;
                                            case toggle_mute_video:
                                                /** @type {number} */
                                                node_1 = 11;
                                                break e;
                                            case random:
                                                /** @type {number} */
                                                node_1 = 14;
                                                break e;
                                            case vega:
                                                /** @type {number} */
                                                node_1 = 16;
                                                /** @type {null} */
                                                text = null;
                                                break e;
                                        }
                                    }
                                    throw Error(call(130, null == a ? a : typeof a, ""));
                            }
                        }
                    }
                }
                return (result = toString(node_1, data, result, value)).elementType = a, result.type = text, result.lanes = i, result;
            }
            /**
             * @param {!Object} value
             * @param {?} instance
             * @param {!Object} name
             * @param {!Object} parent
             * @return {?}
             */
            function f(value, instance, name, parent) {
                return (value = toString(7, value, parent, instance)).lanes = name, value;
            }
            /**
             * @param {!Object} node
             * @param {?} value
             * @param {!Function} p
             * @param {!Object} message
             * @return {?}
             */
            function indexOf(node, value, p, message) {
                return (node = toString(22, node, message, value)).elementType = w, node.lanes = p, node.stateNode = {
                    isHidden: false
                }, node;
            }
            /**
             * @param {!Object} result
             * @param {undefined} value
             * @param {!Object} input
             * @return {?}
             */
            function equal(result, value, input) {
                return (result = toString(6, result, null, value)).lanes = input, result;
            }
            /**
             * @param {!Object} options
             * @param {number} value
             * @param {!Object} name
             * @return {?}
             */
            function validator(options, value, name) {
                return (value = toString(4, null !== options.children ? options.children : [], options.key, value)).lanes = name, value.stateNode = {
                    containerInfo: options.containerInfo,
                    pendingChildren: null,
                    implementation: options.implementation
                }, value;
            }
            /**
             * @param {?} name
             * @param {string} tag
             * @param {?} close
             * @param {?} rawAttributes
             * @param {string} options
             * @return {undefined}
             */
            function Tag(name, tag, close, rawAttributes, options) {
                /** @type {string} */
                this.tag = tag;
                this.containerInfo = name;
                /** @type {null} */
                this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
                /** @type {number} */
                this.timeoutHandle = -1;
                /** @type {null} */
                this.callbackNode = this.pendingContext = this.context = null;
                /** @type {number} */
                this.callbackPriority = 0;
                this.eventTimes = _parseName(0);
                this.expirationTimes = _parseName(-1);
                /** @type {number} */
                this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
                this.entanglements = _parseName(0);
                this.identifierPrefix = rawAttributes;
                /** @type {string} */
                this.onRecoverableError = options;
                /** @type {null} */
                this.mutableSourceEagerHydrationData = null;
            }
            /**
             * @param {!Object} child
             * @param {number} value
             * @param {!Object} name
             * @param {!Object} table
             * @param {number} i
             * @param {number} node
             * @param {number} attribs
             * @param {string} parent
             * @param {!Object} num
             * @return {?}
             */
            function insert(child, value, name, table, i, node, attribs, parent, num) {
                return child = new Tag(child, value, name, parent, num), 1 === value ? (value = 1, true === node && (value = value | 8)) : value = 0, node = toString(3, null, null, value), child.current = node, node.stateNode = child, node.memoizedState = {
                    element: table,
                    isDehydrated: name,
                    cache: null,
                    transitions: null,
                    pendingSuspenseBoundaries: null
                }, objectKeys(node), child;
            }
            /**
             * @param {!Array} data
             * @param {!Object} expected
             * @param {!Object} callback
             * @return {?}
             */
            function onVerify(data, expected, callback) {
                var title = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
                return {
                    $$typeof: array,
                    key: null == title ? null : "" + title,
                    children: data,
                    containerInfo: expected,
                    implementation: callback
                };
            }
            /**
             * @param {!Object} n
             * @return {?}
             */
            function find(n) {
                if (!n) {
                    return object;
                }
                e: {
                    if (parseInt(n = n._reactInternals) !== n || 1 !== n.tag) {
                        throw Error(call(170));
                    }
                    /** @type {!Object} */
                    var node = n;
                    do {
                        switch (node.tag) {
                            case 3:
                                node = node.stateNode.context;
                                break e;
                            case 1:
                                if (isString(node.type)) {
                                    node = node.stateNode.__reactInternalMemoizedMergedChildContext;
                                    break e;
                                }
                        }
                        node = node.return;
                    } while (null !== node);
                    throw Error(call(171));
                }
                if (1 === n.tag) {
                    var fn = n.type;
                    if (isString(fn)) {
                        return getChildContext(n, fn, node);
                    }
                }
                return node;
            }
            /**
             * @param {!Object} result
             * @param {string} callback
             * @param {!Object} value
             * @param {number} id
             * @param {number} i
             * @param {boolean} key
             * @param {number} out
             * @param {string} type
             * @param {string} h
             * @return {?}
             */
            function complete(result, callback, value, id, i, key, out, type, h) {
                return (result = insert(value, id, true, result, 0, key, 0, type, h)).context = find(null), value = result.current, (key = concat(id = requestAnimationFrame(), i = Number(value))).callback = void 0 !== callback && null !== callback ? callback : null, filter(value, key, i), result.current.lanes = i, write(result, i, id), get(result, id), result;
            }
            /**
             * @param {!Object} text
             * @param {!Object} result
             * @param {!Object} name
             * @param {string} callback
             * @return {?}
             */
            function resolve(text, result, name, callback) {
                var i = result.current;
                var value = requestAnimationFrame();
                var key = Number(i);
                return name = find(name), null === result.context ? result.context = name : result.pendingContext = name, (result = concat(value, key)).payload = {
                    element: text
                }, null !== (callback = void 0 === callback ? null : callback) && (result.callback = callback), null !== (text = filter(i, result, key)) && (assert(text, i, key, value), test(text, i, key)), key;
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function m(value) {
                return (value = value.current).child ? (value.child.tag, value.child.stateNode) : null;
            }
            /**
             * @param {(Object|string)} tag
             * @param {number} size
             * @return {undefined}
             */
            function refresh(tag, size) {
                if (null !== (tag = tag.memoizedState) && null !== tag.dehydrated) {
                    var src = tag.retryLane;
                    tag.retryLane = 0 !== src && src < size ? src : size;
                }
            }
            /**
             * @param {!Object} node
             * @param {number} options
             * @return {undefined}
             */
            function removeClass(node, options) {
                refresh(node, options);
                if (node = node.alternate) {
                    refresh(node, options);
                }
            }
            /**
             * @param {!Object} menu_handler
             * @return {undefined}
             */
            function Tree(menu_handler) {
                /** @type {!Object} */
                this._internalRoot = menu_handler;
            }
            /**
             * @param {!Object} indata2
             * @return {undefined}
             */
            function a(indata2) {
                /** @type {!Object} */
                this._internalRoot = indata2;
            }
            /**
             * @param {!Object} data
             * @return {?}
             */
            function detach(data) {
                return !(!data || 1 !== data.nodeType && 9 !== data.nodeType && 11 !== data.nodeType);
            }
            /**
             * @param {!Object} object
             * @return {?}
             */
            function extract(object) {
                return !(!object || 1 !== object.nodeType && 9 !== object.nodeType && 11 !== object.nodeType && (8 !== object.nodeType || " react-mount-point-unstable " !== object.nodeValue));
            }
            /**
             * @return {undefined}
             */
            function bottom() {
            }
            /**
             * @param {!Object} id
             * @param {!Object} text
             * @param {string} element
             * @param {string} e
             * @param {!Function} o
             * @return {?}
             */
            function link(id, text, element, e, o) {
                var h = element._reactRootContainer;
                if (h) {
                    var p = h;
                    if ("function" === typeof o) {
                        /** @type {!Function} */
                        var current = o;
                        /**
                         * @return {undefined}
                         */
                        o = function () {
                            var x = m(p);
                            current.call(x);
                        };
                    }
                    resolve(text, p, id, o);
                } else {
                    p = function (target, response, moduleName, data, el) {
                        if (el) {
                            if ("function" === typeof data) {
                                /** @type {!Function} */
                                var attach = data;
                                /**
                                 * @return {undefined}
                                 */
                                data = function () {
                                    var e = m(obj);
                                    attach.call(e);
                                };
                            }
                            var obj = complete(response, data, target, 0, null, false, 0, "", bottom);
                            return target._reactRootContainer = obj, target[name] = obj.current, save(8 === target.nodeType ? target.parentNode : target), toggle(), obj;
                        }
                        for (; el = target.lastChild;) {
                            target.removeChild(el);
                        }
                        if ("function" === typeof data) {
                            /** @type {!Function} */
                            var context = data;
                            /**
                             * @return {undefined}
                             */
                            data = function () {
                                var x = m(result);
                                context.call(x);
                            };
                        }
                        var result = insert(target, 0, false, null, 0, false, 0, "", bottom);
                        return target._reactRootContainer = result, target[name] = result.current, save(8 === target.nodeType ? target.parentNode : target), toggle(function () {
                            resolve(response, result, moduleName, data);
                        }), result;
                    }(element, text, id, o, e);
                }
                return m(p);
            }
            var ctx = _dereq_(2791);
            var params = _dereq_(5296);
            /** @type {!Set} */
            var ids = new Set;
            var l = {};
            /** @type {boolean} */
            var reverseName = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
            /** @type {function(this:Object, *): boolean} */
            var util = Object.prototype.hasOwnProperty;
            /** @type {!RegExp} */
            var matchLetter = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
            var selectorValue = {};
            var p = {};
            var args = {};
            "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (e) {
                args[e] = new ProjectionPlan(e, 0, false, e, null, false, false);
            });
            [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (nameAndE) {
                var e = nameAndE[0];
                args[e] = new ProjectionPlan(e, 1, false, nameAndE[1], null, false, false);
            });
            ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 2, false, e.toLowerCase(), null, false, false);
            });
            ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 2, false, e, null, false, false);
            });
            "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (e) {
                args[e] = new ProjectionPlan(e, 3, false, e.toLowerCase(), null, false, false);
            });
            ["checked", "multiple", "muted", "selected"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 3, true, e, null, false, false);
            });
            ["capture", "download"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 4, false, e, null, false, false);
            });
            ["cols", "rows", "size", "span"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 6, false, e, null, false, false);
            });
            ["rowSpan", "start"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 5, false, e.toLowerCase(), null, false, false);
            });
            /** @type {!RegExp} */
            var component = /[\-:]([a-z])/g;
            "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (t) {
                /** @type {string} */
                var e = t.replace(component, k);
                args[e] = new ProjectionPlan(e, 1, false, t, null, false, false);
            });
            "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (t) {
                /** @type {string} */
                var e = t.replace(component, k);
                args[e] = new ProjectionPlan(e, 1, false, t, "http://www.w3.org/1999/xlink", false, false);
            });
            ["xml:base", "xml:lang", "xml:space"].forEach(function (t) {
                var e = t.replace(component, k);
                args[e] = new ProjectionPlan(e, 1, false, t, "http://www.w3.org/XML/1998/namespace", false, false);
            });
            ["tabIndex", "crossOrigin"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 1, false, e.toLowerCase(), null, false, false);
            });
            args.xlinkHref = new ProjectionPlan("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
            ["src", "href", "action", "formAction"].forEach(function (e) {
                args[e] = new ProjectionPlan(e, 1, false, e.toLowerCase(), null, true, true);
            });
            var that = ctx.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            var normal = Symbol.for("react.element");
            var array = Symbol.for("react.portal");
            var string = Symbol.for("react.fragment");
            var D = Symbol.for("react.strict_mode");
            var searchParams = Symbol.for("react.profiler");
            var Bite = Symbol.for("react.provider");
            var togglelayer = Symbol.for("react.context");
            var toggle_mute_video = Symbol.for("react.forward_ref");
            var tempMatch = Symbol.for("react.suspense");
            var colors = Symbol.for("react.suspense_list");
            var random = Symbol.for("react.memo");
            var vega = Symbol.for("react.lazy");
            Symbol.for("react.scope");
            Symbol.for("react.debug_trace_mode");
            var w = Symbol.for("react.offscreen");
            Symbol.for("react.legacy_hidden");
            Symbol.for("react.cache");
            Symbol.for("react.tracing_marker");
            var iteratorSymbol = Symbol.iterator;
            var room;
            /** @type {function(!Object, ...(Object|null)): !Object} */
            var assign = Object.assign;
            /** @type {boolean} */
            var evaluatedScripts = false;
            /** @type {function(*): boolean} */
            var isFunction = Array.isArray;
            var summary;
            var $e;
            /** @type {!Function} */
            var actionAddEntity = ($e = function (target, key) {
                if ("http://www.w3.org/2000/svg" !== target.namespaceURI || "innerHTML" in target) {
                    /** @type {!Object} */
                    target.innerHTML = key;
                } else {
                    /** @type {string} */
                    (summary = summary || document.createElement("div")).innerHTML = "<svg>" + key.valueOf().toString() + "</svg>";
                    key = summary.firstChild;
                    for (; target.firstChild;) {
                        target.removeChild(target.firstChild);
                    }
                    for (; key.firstChild;) {
                        target.appendChild(key.firstChild);
                    }
                }
            }, "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (temp, feed, n, canCreateDiscussions) {
                MSApp.execUnsafeLocalFunction(function () {
                    return $e(temp, feed);
                });
            } : $e);
            var options = {
                animationIterationCount: true,
                aspectRatio: true,
                borderImageOutset: true,
                borderImageSlice: true,
                borderImageWidth: true,
                boxFlex: true,
                boxFlexGroup: true,
                boxOrdinalGroup: true,
                columnCount: true,
                columns: true,
                flex: true,
                flexGrow: true,
                flexPositive: true,
                flexShrink: true,
                flexNegative: true,
                flexOrder: true,
                gridArea: true,
                gridRow: true,
                gridRowEnd: true,
                gridRowSpan: true,
                gridRowStart: true,
                gridColumn: true,
                gridColumnEnd: true,
                gridColumnSpan: true,
                gridColumnStart: true,
                fontWeight: true,
                lineClamp: true,
                lineHeight: true,
                opacity: true,
                order: true,
                orphans: true,
                tabSize: true,
                widows: true,
                zIndex: true,
                zoom: true,
                fillOpacity: true,
                floodOpacity: true,
                stopOpacity: true,
                strokeDasharray: true,
                strokeDashoffset: true,
                strokeMiterlimit: true,
                strokeOpacity: true,
                strokeWidth: true
            };
            /** @type {!Array} */
            var prefixes = ["Webkit", "ms", "Moz", "O"];
            Object.keys(options).forEach(function (attrName) {
                prefixes.forEach(function (name) {
                    /** @type {string} */
                    name = name + attrName.charAt(0).toUpperCase() + attrName.substring(1);
                    options[name] = options[attrName];
                });
            });
            /** @type {!Object} */
            var minimizeOptions = assign({
                menuitem: true
            }, {
                area: true,
                base: true,
                br: true,
                col: true,
                embed: true,
                hr: true,
                img: true,
                input: true,
                keygen: true,
                link: true,
                meta: true,
                param: true,
                source: true,
                track: true,
                wbr: true
            });
            /** @type {null} */
            var eventName = null;
            /** @type {null} */
            var setup = null;
            /** @type {null} */
            var fault = null;
            /** @type {null} */
            var errors = null;
            /** @type {boolean} */
            var Me = false;
            /** @type {boolean} */
            var Fe = false;
            if (reverseName) {
                try {
                    var c = {};
                    Object.defineProperty(c, "passive", {
                        get: function () {
                            /** @type {boolean} */
                            Fe = true;
                        }
                    });
                    window.addEventListener("test", c, c);
                    window.removeEventListener("test", c, c);
                } catch (se) {
                    /** @type {boolean} */
                    Fe = false;
                }
            }
            /** @type {boolean} */
            var _dispatch = false;
            /** @type {null} */
            var active = null;
            /** @type {boolean} */
            var $b = false;
            /** @type {null} */
            var location = null;
            var bc = {
                onError: function (xhr) {
                    /** @type {boolean} */
                    _dispatch = true;
                    /** @type {string} */
                    active = xhr;
                }
            };
            var hash = params.unstable_scheduleCallback;
            var startsWith = params.unstable_cancelCallback;
            var activable = params.unstable_shouldYield;
            var reBase = params.unstable_requestPaint;
            var now = params.unstable_now;
            var sortby = params.unstable_getCurrentPriorityLevel;
            var filename = params.unstable_ImmediatePriority;
            var _onload = params.unstable_UserBlockingPriority;
            var user = params.unstable_NormalPriority;
            var description = params.unstable_LowPriority;
            var finalId = params.unstable_IdlePriority;
            /** @type {null} */
            var content = null;
            /** @type {null} */
            var template = null;
            /** @type {!Function} */
            var isArray = Math.clz32 ? Math.clz32 : function (value) {
                return 0 === (value = value >>> 0) ? 32 : 31 - (original(value) / LN2 | 0) | 0;
            };
            /** @type {function(?): number} */
            var original = Math.log;
            /** @type {number} */
            var LN2 = Math.LN2;
            /** @type {number} */
            var height = 64;
            /** @type {number} */
            var pattern = 4194304;
            /** @type {number} */
            var touch = 0;
            var animate;
            var triggerEvent;
            var split;
            var toPriority;
            var ok;
            /** @type {boolean} */
            var Nt = false;
            /** @type {!Array} */
            var files = [];
            /** @type {null} */
            var val = null;
            /** @type {null} */
            var item = null;
            /** @type {null} */
            var child = null;
            /** @type {!Map} */
            var self = new Map;
            /** @type {!Map} */
            var _ = new Map;
            /** @type {!Array} */
            var data = [];
            /** @type {!Array<string>} */
            var NOT_VISIBLE_TRIGGER_TYPES = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
            var state = that.ReactCurrentBatchConfig;
            /** @type {boolean} */
            var so = true;
            /** @type {null} */
            var width = null;
            /** @type {null} */
            var cursor = null;
            /** @type {null} */
            var axis = null;
            /** @type {null} */
            var oldValue = null;
            var _jsons;
            var emularity;
            var pos;
            var defaults = {
                eventPhase: 0,
                bubbles: 0,
                cancelable: 0,
                timeStamp: function (event) {
                    return event.timeStamp || Date.now();
                },
                defaultPrevented: 0,
                isTrusted: 0
            };
            var Error = coerce(defaults);
            /** @type {!Object} */
            var z = assign({}, defaults, {
                view: 0,
                detail: 0
            });
            var sum = coerce(z);
            /** @type {!Object} */
            var path = assign({}, z, {
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                pageX: 0,
                pageY: 0,
                ctrlKey: 0,
                shiftKey: 0,
                altKey: 0,
                metaKey: 0,
                getModifierState: movementCost,
                button: 0,
                buttons: 0,
                relatedTarget: function (event) {
                    return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
                },
                movementX: function (event) {
                    return "movementX" in event ? event.movementX : (event !== pos && (pos && "mousemove" === event.type ? (_jsons = event.screenX - pos.screenX, emularity = event.screenY - pos.screenY) : emularity = _jsons = 0, pos = event), _jsons);
                },
                movementY: function (_game_data) {
                    return "movementY" in _game_data ? _game_data.movementY : emularity;
                }
            });
            var elem = coerce(path);
            var tryObj = coerce(assign({}, path, {
                dataTransfer: 0
            }));
            var id_domain = coerce(assign({}, z, {
                relatedTarget: 0
            }));
            var objOOUI = coerce(assign({}, defaults, {
                animationName: 0,
                elapsedTime: 0,
                pseudoElement: 0
            }));
            /** @type {!Object} */
            var db = assign({}, defaults, {
                clipboardData: function (event) {
                    return "clipboardData" in event ? event.clipboardData : window.clipboardData;
                }
            });
            var cmd = coerce(db);
            var Buffer = coerce(assign({}, defaults, {
                data: 0
            }));
            var keyFixTable = {
                Esc: "Escape",
                Spacebar: " ",
                Left: "ArrowLeft",
                Up: "ArrowUp",
                Right: "ArrowRight",
                Down: "ArrowDown",
                Del: "Delete",
                Win: "OS",
                Menu: "ContextMenu",
                Apps: "ContextMenu",
                Scroll: "ScrollLock",
                MozPrintableKey: "Unidentified"
            };
            var relevant_keycodes = {
                8: "Backspace",
                9: "Tab",
                12: "Clear",
                13: "Enter",
                16: "Shift",
                17: "Control",
                18: "Alt",
                19: "Pause",
                20: "CapsLock",
                27: "Escape",
                32: " ",
                33: "PageUp",
                34: "PageDown",
                35: "End",
                36: "Home",
                37: "ArrowLeft",
                38: "ArrowUp",
                39: "ArrowRight",
                40: "ArrowDown",
                45: "Insert",
                46: "Delete",
                112: "F1",
                113: "F2",
                114: "F3",
                115: "F4",
                116: "F5",
                117: "F6",
                118: "F7",
                119: "F8",
                120: "F9",
                121: "F10",
                122: "F11",
                123: "F12",
                144: "NumLock",
                145: "ScrollLock",
                224: "Meta"
            };
            var keymap = {
                Alt: "altKey",
                Control: "ctrlKey",
                Meta: "metaKey",
                Shift: "shiftKey"
            };
            /** @type {!Object} */
            var color = assign({}, z, {
                key: function (e) {
                    if (e.key) {
                        var valueType = keyFixTable[e.key] || e.key;
                        if ("Unidentified" !== valueType) {
                            return valueType;
                        }
                    }
                    return "keypress" === e.type ? 13 === (e = createEvent(e)) ? "Enter" : String.fromCharCode(e) : "keydown" === e.type || "keyup" === e.type ? relevant_keycodes[e.keyCode] || "Unidentified" : "";
                },
                code: 0,
                location: 0,
                ctrlKey: 0,
                shiftKey: 0,
                altKey: 0,
                metaKey: 0,
                repeat: 0,
                locale: 0,
                getModifierState: movementCost,
                charCode: function (event) {
                    return "keypress" === event.type ? createEvent(event) : 0;
                },
                keyCode: function (e) {
                    return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
                },
                which: function (e) {
                    return "keypress" === e.type ? createEvent(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
                }
            });
            var vals = coerce(color);
            var nil = coerce(assign({}, path, {
                pointerId: 0,
                width: 0,
                height: 0,
                pressure: 0,
                tangentialPressure: 0,
                tiltX: 0,
                tiltY: 0,
                twist: 0,
                pointerType: 0,
                isPrimary: 0
            }));
            var objtemp = coerce(assign({}, z, {
                touches: 0,
                targetTouches: 0,
                changedTouches: 0,
                altKey: 0,
                metaKey: 0,
                ctrlKey: 0,
                shiftKey: 0,
                getModifierState: movementCost
            }));
            var objnew = coerce(assign({}, defaults, {
                propertyName: 0,
                elapsedTime: 0,
                pseudoElement: 0
            }));
            /** @type {!Object} */
            var request = assign({}, path, {
                deltaX: function (event) {
                    return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
                },
                deltaY: function (event) {
                    return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
                },
                deltaZ: 0,
                deltaMode: 0
            });
            var values = coerce(request);
            /** @type {!Array} */
            var skillHotKey = [9, 13, 27, 32];
            /** @type {boolean} */
            var choosePlain = reverseName && "CompositionEvent" in window;
            /** @type {null} */
            var version = null;
            if (reverseName && "documentMode" in document) {
                version = document.documentMode;
            }
            /** @type {boolean} */
            var isD6F10 = reverseName && "TextEvent" in window && !version;
            var reverseIsSingle = reverseName && (!choosePlain || version && 8 < version && 11 >= version);
            /** @type {string} */
            var voronoi = String.fromCharCode(32);
            /** @type {boolean} */
            var y$$ = false;
            /** @type {boolean} */
            var needsProperty = false;
            var $inputTypes = {
                color: true,
                date: true,
                datetime: true,
                "datetime-local": true,
                email: true,
                month: true,
                number: true,
                password: true,
                range: true,
                search: true,
                tel: true,
                text: true,
                time: true,
                url: true,
                week: true
            };
            /** @type {null} */
            var el = null;
            /** @type {null} */
            var body = null;
            /** @type {boolean} */
            var shouldAvoid = false;
            if (reverseName) {
                var avoidLocations;
                if (reverseName) {
                    /** @type {boolean} */
                    var isSupported = "oninput" in document;
                    if (!isSupported) {
                        /** @type {!Element} */
                        var element = document.createElement("div");
                        element.setAttribute("oninput", "return;");
                        /** @type {boolean} */
                        isSupported = "function" === typeof element.oninput;
                    }
                    /** @type {boolean} */
                    avoidLocations = isSupported;
                } else {
                    /** @type {boolean} */
                    avoidLocations = false;
                }
                /** @type {boolean} */
                shouldAvoid = avoidLocations && (!document.documentMode || 9 < document.documentMode);
            }
            /** @type {!Function} */
            var compare = "function" === typeof Object.is ? Object.is : function (value, other) {
                return value === other && (0 !== value || 1 / value === 1 / other) || value !== value && other !== other;
            };
            /** @type {boolean} */
            var hr = reverseName && "documentMode" in document && 11 >= document.documentMode;
            /** @type {null} */
            var x = null;
            /** @type {null} */
            var input = null;
            /** @type {null} */
            var props = null;
            /** @type {boolean} */
            var labelWidth = false;
            var EVENT_NAME_MAP = {
                animationend: _prefixedEvent("Animation", "AnimationEnd"),
                animationiteration: _prefixedEvent("Animation", "AnimationIteration"),
                animationstart: _prefixedEvent("Animation", "AnimationStart"),
                transitionend: _prefixedEvent("Transition", "TransitionEnd")
            };
            var dict = {};
            var testStyle = {};
            if (reverseName) {
                /** @type {!CSSStyleDeclaration} */
                testStyle = document.createElement("div").style;
                if (!("AnimationEvent" in window)) {
                    delete EVENT_NAME_MAP.animationend.animation;
                    delete EVENT_NAME_MAP.animationiteration.animation;
                    delete EVENT_NAME_MAP.animationstart.animation;
                }
                if (!("TransitionEvent" in window)) {
                    delete EVENT_NAME_MAP.transitionend.transition;
                }
            }
            var _handleActions = commaStringToArray("animationend");
            var _extends5 = commaStringToArray("animationiteration");
            var _TOOL2MODE = commaStringToArray("animationstart");
            var _extends4 = commaStringToArray("transitionend");
            /** @type {!Map} */
            var executionContextNamesByOrigin = new Map;
            /** @type {!Array<string>} */
            var crossfilterable_layers = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
            /** @type {number} */
            var layer_i = 0;
            for (; layer_i < crossfilterable_layers.length; layer_i++) {
                /** @type {string} */
                var associatedName = crossfilterable_layers[layer_i];
                _defineProperty(associatedName.toLowerCase(), "on" + (associatedName[0].toUpperCase() + associatedName.slice(1)));
            }
            _defineProperty(_handleActions, "onAnimationEnd");
            _defineProperty(_extends5, "onAnimationIteration");
            _defineProperty(_TOOL2MODE, "onAnimationStart");
            _defineProperty("dblclick", "onDoubleClick");
            _defineProperty("focusin", "onFocus");
            _defineProperty("focusout", "onBlur");
            _defineProperty(_extends4, "onTransitionEnd");
            warn("onMouseEnter", ["mouseout", "mouseover"]);
            warn("onMouseLeave", ["mouseout", "mouseover"]);
            warn("onPointerEnter", ["pointerout", "pointerover"]);
            warn("onPointerLeave", ["pointerout", "pointerover"]);
            event("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
            event("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
            event("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            event("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
            event("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
            event("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
            /** @type {!Array<string>} */
            var sequences = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
            /** @type {!Set} */
            var changedObjects = new Set("cancel close invalid load scroll toggle".split(" ").concat(sequences));
            /** @type {string} */
            var mark = "_reactListening" + Math.random().toString(36).slice(2);
            /** @type {!RegExp} */
            var savedRegExp = /\r\n?/g;
            /** @type {!RegExp} */
            var regNewline = /\u0000|\uFFFD/g;
            /** @type {null} */
            var proto$0 = null;
            /** @type {null} */
            var static$0 = null;
            /** @type {(function((!Function|null|string), number=, ...*): number|undefined)} */
            var getItem = "function" === typeof setTimeout ? setTimeout : void 0;
            /** @type {(function((null|number|undefined)): undefined|undefined)} */
            var addDoc = "function" === typeof clearTimeout ? clearTimeout : void 0;
            /** @type {(function(new:Promise, function(function((IThenable<TYPE>|TYPE|Thenable|null)=): ?, function(*=): ?): ?): ?|undefined)} */
            var constraint = "function" === typeof Promise ? Promise : void 0;
            var _extGetter = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof constraint ? function (f) {
                return constraint.resolve(null).then(f).catch(do_reload);
            } : getItem;
            /** @type {string} */
            var idx = Math.random().toString(36).slice(2);
            /** @type {string} */
            var key = "__reactFiber$" + idx;
            /** @type {string} */
            var field = "__reactProps$" + idx;
            /** @type {string} */
            var name = "__reactContainer$" + idx;
            /** @type {string} */
            var id = "__reactEvents$" + idx;
            /** @type {string} */
            var accessor = "__reactListeners$" + idx;
            /** @type {string} */
            var tabId = "__reactHandles$" + idx;
            /** @type {!Array} */
            var fields = [];
            /** @type {number} */
            var i = -1;
            var object = {};
            var obj = jQuery(object);
            var users = jQuery(false);
            var parent = object;
            /** @type {null} */
            var table = null;
            /** @type {boolean} */
            var Vo = false;
            /** @type {boolean} */
            var skipReorder = false;
            /** @type {!Array} */
            var openFilesIds = [];
            /** @type {number} */
            var openFileIdIndex = 0;
            /** @type {null} */
            var optsName = null;
            /** @type {number} */
            var tag = 0;
            /** @type {!Array} */
            var cache = [];
            /** @type {number} */
            var j = 0;
            /** @type {null} */
            var resolvedLink = null;
            /** @type {number} */
            var v = 1;
            /** @type {string} */
            var msg = "";
            /** @type {null} */
            var doc = null;
            /** @type {null} */
            var r = null;
            /** @type {boolean} */
            var err = false;
            /** @type {null} */
            var paths = null;
            var linedUpMareyLines = that.ReactCurrentBatchConfig;
            var info = jQuery(null);
            /** @type {null} */
            var autoReview = null;
            /** @type {null} */
            var $key = null;
            /** @type {null} */
            var currentItem = null;
            /** @type {null} */
            var ast = null;
            /** @type {boolean} */
            var definition = false;
            var refs = (new ctx.Component).refs;
            var _this = {
                isMounted: function (id) {
                    return !!(id = id._reactInternals) && parseInt(id) === id;
                },
                enqueueSetState: function (result, url, callback) {
                    result = result._reactInternals;
                    var value = requestAnimationFrame();
                    var key = Number(result);
                    var v = concat(value, key);
                    /** @type {!Object} */
                    v.payload = url;
                    if (void 0 !== callback && null !== callback) {
                        /** @type {number} */
                        v.callback = callback;
                    }
                    if (null !== (url = filter(result, v, key))) {
                        assert(url, result, key, value);
                        test(url, result, key);
                    }
                },
                enqueueReplaceState: function (val, msg, callback) {
                    val = val._reactInternals;
                    var name = requestAnimationFrame();
                    var key = Number(val);
                    var value = concat(name, key);
                    /** @type {number} */
                    value.tag = 1;
                    /** @type {(Object|string)} */
                    value.payload = msg;
                    if (void 0 !== callback && null !== callback) {
                        /** @type {string} */
                        value.callback = callback;
                    }
                    if (null !== (msg = filter(val, value, key))) {
                        assert(msg, val, key, name);
                        test(msg, val, key);
                    }
                },
                enqueueForceUpdate: function (name, value) {
                    name = name._reactInternals;
                    var done = requestAnimationFrame();
                    var key = Number(name);
                    var s = concat(done, key);
                    /** @type {number} */
                    s.tag = 2;
                    if (void 0 !== value && null !== value) {
                        /** @type {string} */
                        s.callback = value;
                    }
                    if (null !== (value = filter(name, s, key))) {
                        assert(value, name, key, done);
                        test(value, name, key);
                    }
                }
            };
            var spawn = exports(true);
            var generateAggregationCells = exports(false);
            var line = {};
            var row = jQuery(line);
            var t = jQuery(line);
            var message = jQuery(line);
            var config = jQuery(0);
            /** @type {!Array} */
            var keywordResults = [];
            var water = that.ReactCurrentDispatcher;
            var settings = that.ReactCurrentBatchConfig;
            /** @type {number} */
            var base = 0;
            /** @type {null} */
            var result = null;
            /** @type {null} */
            var scope = null;
            /** @type {null} */
            var element = null;
            /** @type {boolean} */
            var header_map = false;
            /** @type {boolean} */
            var tmp_headers = false;
            /** @type {number} */
            var x$$ = 0;
            /** @type {number} */
            var xi = 0;
            var current = {
                readContext: require,
                useCallback: LOFOX,
                useContext: LOFOX,
                useEffect: LOFOX,
                useImperativeHandle: LOFOX,
                useInsertionEffect: LOFOX,
                useLayoutEffect: LOFOX,
                useMemo: LOFOX,
                useReducer: LOFOX,
                useRef: LOFOX,
                useState: LOFOX,
                useDebugValue: LOFOX,
                useDeferredValue: LOFOX,
                useTransition: LOFOX,
                useMutableSource: LOFOX,
                useSyncExternalStore: LOFOX,
                useId: LOFOX,
                unstable_isNewReconciler: false
            };
            var pageX = {
                readContext: require,
                useCallback: function (key, index) {
                    return capture().memoizedState = [key, void 0 === index ? null : index], key;
                },
                useContext: require,
                useEffect: missing,
                useImperativeHandle: function (key, target, a) {
                    return a = null !== a && void 0 !== a ? a.concat([key]) : null, same(4194308, 4, form.bind(null, target, key), a);
                },
                useLayoutEffect: function (key, a) {
                    return same(4194308, 4, key, a);
                },
                useInsertionEffect: function (key, a) {
                    return same(4, 2, key, a);
                },
                useMemo: function (key, array) {
                    var prototype = capture();
                    return array = void 0 === array ? null : array, key = key(), prototype.memoizedState = [key, array], key;
                },
                useReducer: function (key, obj, string) {
                    var state = capture();
                    return obj = void 0 !== string ? string(obj) : obj, state.memoizedState = state.baseState = obj, key = {
                        pending: null,
                        interleaved: null,
                        lanes: 0,
                        dispatch: null,
                        lastRenderedReducer: key,
                        lastRenderedState: obj
                    }, state.queue = key, key = key.dispatch = delay.bind(null, result, key), [state.memoizedState, key];
                },
                useRef: function (key) {
                    return key = {
                        current: key
                    }, capture().memoizedState = key;
                },
                useState: b,
                useDebugValue: Qi,
                useDeferredValue: function (key) {
                    return capture().memoizedState = key;
                },
                useTransition: function () {
                    var e = b(false);
                    var linkedsceneitem = e[0];
                    return e = zoom.bind(null, e[1]), capture().memoizedState = e, [linkedsceneitem, e];
                },
                useMutableSource: function () {
                },
                useSyncExternalStore: function (key, options, message) {
                    var token = result;
                    var state = capture();
                    if (err) {
                        if (void 0 === message) {
                            throw Error(call(407));
                        }
                        message = message();
                    } else {
                        if (message = options(), null === value) {
                            throw Error(call(349));
                        }
                        if (!(0 !== (30 & base))) {
                            compute(token, options, message);
                        }
                    }
                    /** @type {number} */
                    state.memoizedState = message;
                    var data = {
                        value: message,
                        getSnapshot: options
                    };
                    return state.queue = data, missing(helpers.bind(null, token, data, key), [key]), token.flags |= 2048, append(9, logger.bind(null, token, data, message, options), void 0, null), message;
                },
                useId: function () {
                    var c = capture();
                    var col = value.identifierPrefix;
                    if (err) {
                        var buf = msg;
                        /** @type {string} */
                        col = ":" + col + "R" + (buf = (v & ~(1 << 32 - isArray(v) - 1)).toString(32) + buf);
                        if (0 < (buf = x$$++)) {
                            /** @type {string} */
                            col = col + ("H" + buf.toString(32));
                        }
                        /** @type {string} */
                        col = col + ":";
                    } else {
                        /** @type {string} */
                        col = ":" + col + "r" + (buf = xi++).toString(32) + ":";
                    }
                    return c.memoizedState = col;
                },
                unstable_isNewReconciler: false
            };
            var retryCounter = {
                readContext: require,
                useCallback: setAssociatedID,
                useContext: require,
                useEffect: click,
                useImperativeHandle: doSplay,
                useInsertionEffect: keyDown,
                useLayoutEffect: cancel,
                useMemo: clearItem,
                useReducer: tick,
                useRef: load_with_files,
                useState: function () {
                    return tick(count);
                },
                useDebugValue: Qi,
                useDeferredValue: function (key) {
                    return findIndex(node(), scope.memoizedState, key);
                },
                useTransition: function () {
                    return [tick(count)[0], node().memoizedState];
                },
                useMutableSource: Ti,
                useSyncExternalStore: construct,
                useId: pointDblClick,
                unstable_isNewReconciler: false
            };
            var h2o = {
                readContext: require,
                useCallback: setAssociatedID,
                useContext: require,
                useEffect: click,
                useImperativeHandle: doSplay,
                useInsertionEffect: keyDown,
                useLayoutEffect: cancel,
                useMemo: clearItem,
                useReducer: Component,
                useRef: load_with_files,
                useState: function () {
                    return Component(count);
                },
                useDebugValue: Qi,
                useDeferredValue: function (key) {
                    var data = node();
                    return null === scope ? data.memoizedState = key : findIndex(data, scope.memoizedState, key);
                },
                useTransition: function () {
                    return [Component(count)[0], node().memoizedState];
                },
                useMutableSource: Ti,
                useSyncExternalStore: construct,
                useId: pointDblClick,
                unstable_isNewReconciler: false
            };
            /** @type {!Function} */
            var type = "function" === typeof WeakMap ? WeakMap : Map;
            var heap = that.ReactCurrentOwner;
            /** @type {boolean} */
            var track_index = false;
            var ajax;
            var remove;
            var drop;
            var geometryNode = {
                dehydrated: null,
                treeContext: null,
                retryLane: 0
            };
            /**
             * @param {!Object} object
             * @param {!Object} s
             * @return {undefined}
             */
            ajax = function (object, s) {
                var node = s.child;
                for (; null !== node;) {
                    if (5 === node.tag || 6 === node.tag) {
                        object.appendChild(node.stateNode);
                    } else {
                        if (4 !== node.tag && null !== node.child) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                    }
                    if (node === s) {
                        break;
                    }
                    for (; null === node.sibling;) {
                        if (null === node.return || node.return === s) {
                            return;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            };
            /**
             * @param {!Object} item
             * @param {!Object} node
             * @param {string} t
             * @param {!Object} child
             * @return {undefined}
             */
            remove = function (item, node, t, child) {
                var result = item.memoizedProps;
                if (result !== child) {
                    item = node.stateNode;
                    send(row.current);
                    var key;
                    /** @type {null} */
                    var b = null;
                    switch (t) {
                        case "input":
                            result = getChild(item, result);
                            child = getChild(item, child);
                            /** @type {!Array} */
                            b = [];
                            break;
                        case "select":
                            /** @type {!Object} */
                            result = assign({}, result, {
                                value: void 0
                            });
                            /** @type {!Object} */
                            child = assign({}, child, {
                                value: void 0
                            });
                            /** @type {!Array} */
                            b = [];
                            break;
                        case "textarea":
                            result = del(item, result);
                            child = del(item, child);
                            /** @type {!Array} */
                            b = [];
                            break;
                        default:
                            if ("function" !== typeof result.onClick && "function" === typeof child.onClick) {
                                /** @type {function(): undefined} */
                                item.onclick = none;
                            }
                    }
                    for (name in css(t, child), t = null, result) {
                        if (!child.hasOwnProperty(name) && result.hasOwnProperty(name) && null != result[name]) {
                            if ("style" === name) {
                                var value = result[name];
                                for (key in value) {
                                    if (value.hasOwnProperty(key)) {
                                        if (!t) {
                                            t = {};
                                        }
                                        /** @type {string} */
                                        t[key] = "";
                                    }
                                }
                            } else {
                                if ("dangerouslySetInnerHTML" !== name && "children" !== name && "suppressContentEditableWarning" !== name && "suppressHydrationWarning" !== name && "autoFocus" !== name) {
                                    if (l.hasOwnProperty(name)) {
                                        if (!b) {
                                            /** @type {!Array} */
                                            b = [];
                                        }
                                    } else {
                                        (b = b || []).push(name, null);
                                    }
                                }
                            }
                        }
                    }
                    for (name in child) {
                        var val = child[name];
                        if (value = null != result ? result[name] : void 0, child.hasOwnProperty(name) && val !== value && (null != val || null != value)) {
                            if ("style" === name) {
                                if (value) {
                                    for (key in value) {
                                        if (!(!value.hasOwnProperty(key) || val && val.hasOwnProperty(key))) {
                                            if (!t) {
                                                t = {};
                                            }
                                            /** @type {string} */
                                            t[key] = "";
                                        }
                                    }
                                    for (key in val) {
                                        if (val.hasOwnProperty(key) && value[key] !== val[key]) {
                                            if (!t) {
                                                t = {};
                                            }
                                            t[key] = val[key];
                                        }
                                    }
                                } else {
                                    if (!t) {
                                        if (!b) {
                                            /** @type {!Array} */
                                            b = [];
                                        }
                                        b.push(name, t);
                                    }
                                    t = val;
                                }
                            } else {
                                if ("dangerouslySetInnerHTML" === name) {
                                    val = val ? val.__html : void 0;
                                    value = value ? value.__html : void 0;
                                    if (null != val && value !== val) {
                                        (b = b || []).push(name, val);
                                    }
                                } else {
                                    if ("children" === name) {
                                        if (!("string" !== typeof val && "number" !== typeof val)) {
                                            (b = b || []).push(name, "" + val);
                                        }
                                    } else {
                                        if ("suppressContentEditableWarning" !== name && "suppressHydrationWarning" !== name) {
                                            if (l.hasOwnProperty(name)) {
                                                if (null != val && "onScroll" === name) {
                                                    notify("scroll", item);
                                                }
                                                if (!(b || value === val)) {
                                                    /** @type {!Array} */
                                                    b = [];
                                                }
                                            } else {
                                                (b = b || []).push(name, val);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (t) {
                        (b = b || []).push("style", t);
                    }
                    /** @type {(Array|null)} */
                    var name = b;
                    if (node.updateQueue = name) {
                        node.flags |= 4;
                    }
                }
            };
            /**
             * @param {number} hide
             * @param {!Object} state
             * @param {?} name
             * @param {?} src
             * @return {undefined}
             */
            drop = function (hide, state, name, src) {
                if (name !== src) {
                    state.flags |= 4;
                }
            };
            /** @type {boolean} */
            var left = false;
            /** @type {boolean} */
            var context = false;
            /** @type {!Function} */
            var Cookies = "function" === typeof WeakSet ? WeakSet : Set;
            /** @type {null} */
            var root = null;
            /** @type {boolean} */
            var quoteValue = false;
            /** @type {null} */
            var temp = null;
            /** @type {boolean} */
            var video = false;
            var render;
            /** @type {function(?): number} */
            var ceil = Math.ceil;
            var $scope = that.ReactCurrentDispatcher;
            var timestampGenerator = that.ReactCurrentOwner;
            var anim = that.ReactCurrentBatchConfig;
            /** @type {number} */
            var method = 0;
            /** @type {null} */
            var value = null;
            /** @type {null} */
            var c = null;
            /** @type {number} */
            var undefined = 0;
            /** @type {number} */
            var ret = 0;
            var str = jQuery(0);
            /** @type {number} */
            var NIL = 0;
            /** @type {null} */
            var domains = null;
            /** @type {number} */
            var res = 0;
            /** @type {number} */
            var mask = 0;
            /** @type {number} */
            var DndMode = 0;
            /** @type {null} */
            var entries = null;
            /** @type {null} */
            var d = null;
            /** @type {number} */
            var timestamp = 0;
            /** @type {number} */
            var ttl = 1 / 0;
            /** @type {null} */
            var url = null;
            /** @type {boolean} */
            var _cx = false;
            /** @type {null} */
            var selected = null;
            /** @type {null} */
            var laxCharList = null;
            /** @type {boolean} */
            var _localExports = false;
            /** @type {null} */
            var n = null;
            /** @type {number} */
            var actual = 0;
            /** @type {number} */
            var isEvaluating = 0;
            /** @type {null} */
            var source = null;
            /** @type {number} */
            var renderEnd = -1;
            /** @type {number} */
            var udist = 0;
            /**
             * @param {!Object} key
             * @param {!Object} data
             * @param {!Object} options
             * @return {?}
             */
            render = function (key, data, options) {
                if (null !== key) {
                    if (key.memoizedProps !== data.pendingProps || users.current) {
                        /** @type {boolean} */
                        track_index = true;
                    } else {
                        if (0 === (key.lanes & options) && 0 === (128 & data.flags)) {
                            return track_index = false, function (obj, data, value) {
                                switch (data.tag) {
                                    case 3:
                                        findSelectedData(data);
                                        attr();
                                        break;
                                    case 5:
                                        savetoBd(data);
                                        break;
                                    case 1:
                                        if (isString(data.type)) {
                                            view(data);
                                        }
                                        break;
                                    case 4:
                                        unbind(data, data.stateNode.containerInfo);
                                        break;
                                    case 10:
                                        var observable = data.type._context;
                                        var tag = data.memoizedProps.value;
                                        log(info, observable._currentValue);
                                        observable._currentValue = tag;
                                        break;
                                    case 13:
                                        if (null !== (observable = data.memoizedState)) {
                                            return null !== observable.dehydrated ? (log(config, 1 & config.current), data.flags |= 128, null) : 0 !== (value & data.child.childLanes) ? hide(obj, data, value) : (log(config, 1 & config.current), null !== (obj = fn(obj, data, value)) ? obj.sibling : null);
                                        }
                                        log(config, 1 & config.current);
                                        break;
                                    case 19:
                                        if (observable = 0 !== (value & data.childLanes), 0 !== (128 & obj.flags)) {
                                            if (observable) {
                                                return parse(obj, data, value);
                                            }
                                            data.flags |= 128;
                                        }
                                        if (null !== (tag = data.memoizedState) && (tag.rendering = null, tag.tail = null, tag.lastEffect = null), log(config, config.current), observable) {
                                            break;
                                        }
                                        return null;
                                    case 22:
                                    case 23:
                                        return data.lanes = 0, reset(obj, data, value);
                                }
                                return fn(obj, data, value);
                            }(key, data, options);
                        }
                        /** @type {boolean} */
                        track_index = 0 !== (131072 & key.flags);
                    }
                } else {
                    /** @type {boolean} */
                    track_index = false;
                    if (err && 0 !== (1048576 & data.flags)) {
                        defined(data, tag, data.index);
                    }
                }
                switch (data.lanes = 0, data.tag) {
                    case 2:
                        var type = data.type;
                        visit(key, data);
                        key = data.pendingProps;
                        var value = merge(data, obj.current);
                        fetch(data, options);
                        value = format(null, data, type, key, value, options);
                        var node = limit();
                        return data.flags |= 1, "object" === typeof value && null !== value && "function" === typeof value.render && void 0 === value.$$typeof ? (data.tag = 1, data.memoizedState = null, data.updateQueue = null, isString(type) ? (node = true, view(data)) : node = false, data.memoizedState = null !== value.state && void 0 !== value.state ? value.state : null, objectKeys(data), value.updater = _this, data.stateNode = value, value._reactInternals = data, set(data, type, key, options), data = compile(null,
                            data, type, true, node, options)) : (data.tag = 0, err && node && on(data), createElement(null, data, value, options), data = data.child), data;
                    case 16:
                        type = data.elementType;
                        e: {
                            switch (visit(key, data), key = data.pendingProps, type = (value = type._init)(type._payload), data.type = type, value = data.tag = function (value) {
                                if ("function" === typeof value) {
                                    return dump(value) ? 1 : 0;
                                }
                                if (void 0 !== value && null !== value) {
                                    if ((value = value.$$typeof) === toggle_mute_video) {
                                        return 11;
                                    }
                                    if (value === random) {
                                        return 14;
                                    }
                                }
                                return 2;
                            }(type), key = iterator(type, key), value) {
                                case 0:
                                    data = list(null, data, type, key, options);
                                    break e;
                                case 1:
                                    data = renderComponent(null, data, type, key, options);
                                    break e;
                                case 11:
                                    data = main(null, data, type, key, options);
                                    break e;
                                case 14:
                                    data = end(null, data, type, iterator(type.type, key), options);
                                    break e;
                            }
                            throw Error(call(306, type, ""));
                        }
                        return data;
                    case 0:
                        return type = data.type, value = data.pendingProps, list(key, data, type, value = data.elementType === type ? value : iterator(type, value), options);
                    case 1:
                        return type = data.type, value = data.pendingProps, renderComponent(key, data, type, value = data.elementType === type ? value : iterator(type, value), options);
                    case 3:
                        e: {
                            if (findSelectedData(data), null === key) {
                                throw Error(call(387));
                            }
                            type = data.pendingProps;
                            value = (node = data.memoizedState).element;
                            post(key, data);
                            validate(data, type, null, options);
                            var result = data.memoizedState;
                            if (type = result.element, node.isDehydrated) {
                                if (node = {
                                    element: type,
                                    isDehydrated: false,
                                    cache: result.cache,
                                    pendingSuspenseBoundaries: result.pendingSuspenseBoundaries,
                                    transitions: result.transitions
                                }, data.updateQueue.baseState = node, data.memoizedState = node, 256 & data.flags) {
                                    data = _format(key, data, type, options, value = next(Error(call(423)), data));
                                    break e;
                                }
                                if (type !== value) {
                                    data = _format(key, data, type, options, value = next(Error(call(424)), data));
                                    break e;
                                }
                                r = text(data.stateNode.containerInfo.firstChild);
                                /** @type {!Object} */
                                doc = data;
                                /** @type {boolean} */
                                err = true;
                                /** @type {null} */
                                paths = null;
                                options = generateAggregationCells(data, null, type, options);
                                /** @type {!Object} */
                                data.child = options;
                                for (; options;) {
                                    /** @type {number} */
                                    options.flags = -3 & options.flags | 4096;
                                    options = options.sibling;
                                }
                            } else {
                                if (attr(), type === value) {
                                    data = fn(key, data, options);
                                    break e;
                                }
                                createElement(key, data, type, options);
                            }
                            data = data.child;
                        }
                        return data;
                    case 5:
                        return savetoBd(data), null === key && transition(data), type = data.type, value = data.pendingProps, node = null !== key ? key.memoizedProps : null, result = value.children, matches(type, value) ? result = null : null !== node && matches(type, node) && (data.flags |= 32), mapIfSupported(key, data), createElement(key, data, result, options), data.child;
                    case 6:
                        return null === key && transition(data), null;
                    case 13:
                        return hide(key, data, options);
                    case 4:
                        return unbind(data, data.stateNode.containerInfo), type = data.pendingProps, null === key ? data.child = spawn(data, null, type, options) : createElement(key, data, type, options), data.child;
                    case 11:
                        return type = data.type, value = data.pendingProps, main(key, data, type, value = data.elementType === type ? value : iterator(type, value), options);
                    case 7:
                        return createElement(key, data, data.pendingProps, options), data.child;
                    case 8:
                    case 12:
                        return createElement(key, data, data.pendingProps.children, options), data.child;
                    case 10:
                        e: {
                            if (type = data.type._context, value = data.pendingProps, node = data.memoizedProps, result = value.value, log(info, type._currentValue), type._currentValue = result, null !== node) {
                                if (compare(node.value, result)) {
                                    if (node.children === value.children && !users.current) {
                                        data = fn(key, data, options);
                                        break e;
                                    }
                                } else {
                                    if (null !== (node = data.child)) {
                                        /** @type {!Object} */
                                        node.return = data;
                                    }
                                    for (; null !== node;) {
                                        var state = node.dependencies;
                                        if (null !== state) {
                                            result = node.child;
                                            var b = state.firstContext;
                                            for (; null !== b;) {
                                                if (b.context === type) {
                                                    if (1 === node.tag) {
                                                        /** @type {number} */
                                                        (b = concat(-1, options & -options)).tag = 2;
                                                        var parent = node.updateQueue;
                                                        if (null !== parent) {
                                                            var a = (parent = parent.shared).pending;
                                                            if (null === a) {
                                                                b.next = b;
                                                            } else {
                                                                b.next = a.next;
                                                                a.next = b;
                                                            }
                                                            parent.pending = b;
                                                        }
                                                    }
                                                    node.lanes |= options;
                                                    if (null !== (b = node.alternate)) {
                                                        b.lanes |= options;
                                                    }
                                                    report(node.return, options, data);
                                                    state.lanes |= options;
                                                    break;
                                                }
                                                b = b.next;
                                            }
                                        } else {
                                            if (10 === node.tag) {
                                                result = node.type === data.type ? null : node.child;
                                            } else {
                                                if (18 === node.tag) {
                                                    if (null === (result = node.return)) {
                                                        throw Error(call(341));
                                                    }
                                                    result.lanes |= options;
                                                    if (null !== (state = result.alternate)) {
                                                        state.lanes |= options;
                                                    }
                                                    report(result, options, data);
                                                    result = node.sibling;
                                                } else {
                                                    result = node.child;
                                                }
                                            }
                                        }
                                        if (null !== result) {
                                            result.return = node;
                                        } else {
                                            result = node;
                                            for (; null !== result;) {
                                                if (result === data) {
                                                    /** @type {null} */
                                                    result = null;
                                                    break;
                                                }
                                                if (null !== (node = result.sibling)) {
                                                    node.return = result.return;
                                                    result = node;
                                                    break;
                                                }
                                                result = result.return;
                                            }
                                        }
                                        node = result;
                                    }
                                }
                            }
                            createElement(key, data, value.children, options);
                            data = data.child;
                        }
                        return data;
                    case 9:
                        return value = data.type, type = data.pendingProps.children, fetch(data, options), type = type(value = require(value)), data.flags |= 1, createElement(key, data, type, options), data.child;
                    case 14:
                        return value = iterator(type = data.type, data.pendingProps), end(key, data, type, value = iterator(type.type, value), options);
                    case 15:
                        return transform(key, data, data.type, data.pendingProps, options);
                    case 17:
                        return type = data.type, value = data.pendingProps, value = data.elementType === type ? value : iterator(type, value), visit(key, data), data.tag = 1, isString(type) ? (key = true, view(data)) : key = false, fetch(data, options), apply(data, type, value), set(data, type, value, options), compile(null, data, type, true, key, options);
                    case 19:
                        return parse(key, data, options);
                    case 22:
                        return reset(key, data, options);
                }
                throw Error(call(156, data.tag));
            };
            var HEIGHT = "function" === typeof reportError ? reportError : function (e) {
                console.error(e);
            };
            /** @type {function(!Object): undefined} */
            a.prototype.render = Tree.prototype.render = function (obj) {
                var A = this._internalRoot;
                if (null === A) {
                    throw Error(call(409));
                }
                resolve(obj, A, null, null);
            };
            /** @type {function(): undefined} */
            a.prototype.unmount = Tree.prototype.unmount = function () {
                var entry = this._internalRoot;
                if (null !== entry) {
                    /** @type {null} */
                    this._internalRoot = null;
                    var metadata = entry.containerInfo;
                    toggle(function () {
                        resolve(null, entry, null, null);
                    });
                    /** @type {null} */
                    metadata[name] = null;
                }
            };
            /**
             * @param {number} event
             * @return {undefined}
             */
            a.prototype.unstable_scheduleHydration = function (event) {
                if (event) {
                    var priority = toPriority();
                    event = {
                        blockedOn: null,
                        target: event,
                        priority: priority
                    };
                    /** @type {number} */
                    var i = 0;
                    for (; i < data.length && 0 !== priority && priority < data[i].priority; i++) {
                    }
                    data.splice(i, 0, event);
                    if (0 === i) {
                        getDataFiber(event);
                    }
                }
            };
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            animate = function (a) {
                switch (a.tag) {
                    case 3:
                        var num = a.stateNode;
                        if (num.current.memoizedState.isDehydrated) {
                            var startYNew = floor(num.pendingLanes);
                            if (0 !== startYNew) {
                                isValid(num, 1 | startYNew);
                                get(num, now());
                                if (0 === (6 & method)) {
                                    ttl = now() + 500;
                                    replace();
                                }
                            }
                        }
                        break;
                    case 13:
                        toggle(function () {
                            var obj = $(a, 1);
                            if (null !== obj) {
                                var value = requestAnimationFrame();
                                assert(obj, a, 1, value);
                            }
                        });
                        removeClass(a, 1);
                }
            };
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            triggerEvent = function (e) {
                if (13 === e.tag) {
                    var obj = $(e, 134217728);
                    if (null !== obj) {
                        assert(obj, e, 134217728, requestAnimationFrame());
                    }
                    removeClass(e, 134217728);
                }
            };
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            split = function (e) {
                if (13 === e.tag) {
                    var key = Number(e);
                    var rs = $(e, key);
                    if (null !== rs) {
                        assert(rs, e, key, requestAnimationFrame());
                    }
                    removeClass(e, key);
                }
            };
            /**
             * @return {?}
             */
            toPriority = function () {
                return touch;
            };
            /**
             * @param {number} e
             * @param {!Function} cb
             * @return {?}
             */
            ok = function (e, cb) {
                var nativeEvent = touch;
                try {
                    return touch = e, cb();
                } finally {
                    touch = nativeEvent;
                }
            };
            /**
             * @param {!Object} element
             * @param {number} i
             * @param {!Object} el
             * @return {undefined}
             */
            setup = function (element, i, el) {
                switch (i) {
                    case "input":
                        if (search(element, el), i = el.name, "radio" === el.type && null != i) {
                            /** @type {!Object} */
                            el = element;
                            for (; el.parentNode;) {
                                el = el.parentNode;
                            }
                            el = el.querySelectorAll("input[name=" + JSON.stringify("" + i) + '][type="radio"]');
                            /** @type {number} */
                            i = 0;
                            for (; i < el.length; i++) {
                                var e = el[i];
                                if (e !== element && e.form === element.form) {
                                    var cb = close(e);
                                    if (!cb) {
                                        throw Error(call(90));
                                    }
                                    go(e);
                                    search(e, cb);
                                }
                            }
                        }
                        break;
                    case "textarea":
                        drawHorizontalChampion(element, el);
                        break;
                    case "select":
                        if (null != (i = el.value)) {
                            wrap(element, !!el.multiple, i, false);
                        }
                }
            };
            /** @type {function(!Function, !Array): ?} */
            sort = download;
            /** @type {function(!Function): ?} */
            inline = toggle;
            var Tests = {
                usingClientEntryPoint: false,
                Events: [prop, reject, close, getVersion, invoke, download]
            };
            var packageJSON = {
                findFiberByHostInstance: walk,
                bundleType: 0,
                version: "18.2.0",
                rendererPackageName: "react-dom"
            };
            var itemData = {
                bundleType: packageJSON.bundleType,
                version: packageJSON.version,
                rendererPackageName: packageJSON.rendererPackageName,
                rendererConfig: packageJSON.rendererConfig,
                overrideHookState: null,
                overrideHookStateDeletePath: null,
                overrideHookStateRenamePath: null,
                overrideProps: null,
                overridePropsDeletePath: null,
                overridePropsRenamePath: null,
                setErrorHandler: null,
                setSuspenseHandler: null,
                scheduleUpdate: null,
                currentDispatcherRef: that.ReactCurrentDispatcher,
                findHostInstanceByFiber: function (iterator) {
                    return null === (iterator = iterate(iterator)) ? null : iterator.stateNode;
                },
                findFiberByHostInstance: packageJSON.findFiberByHostInstance || function () {
                    return null;
                },
                findHostInstancesForRefresh: null,
                scheduleRefresh: null,
                scheduleRoot: null,
                setRefreshHandler: null,
                getCurrentFiber: null,
                reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
            };
            if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
                var data = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                if (!data.isDisabled && data.supportsFiber) {
                    try {
                        content = data.inject(itemData);
                        template = data;
                    } catch (se) {
                    }
                }
            }
            ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Tests;
            /**
             * @param {!Array} callback
             * @param {!Object} data
             * @return {?}
             */
            ReactDOM.createPortal = function (callback, data) {
                var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
                if (!detach(data)) {
                    throw Error(call(200));
                }
                return onVerify(callback, data, null, n);
            };
            /**
             * @param {!Object} value
             * @param {!Object} node
             * @return {?}
             */
            ReactDOM.createRoot = function (value, node) {
                if (!detach(value)) {
                    throw Error(call(299));
                }
                /** @type {boolean} */
                var left = false;
                /** @type {string} */
                var right = "";
                var h = HEIGHT;
                return null !== node && void 0 !== node && (true === node.unstable_strictMode && (left = true), void 0 !== node.identifierPrefix && (right = node.identifierPrefix), void 0 !== node.onRecoverableError && (h = node.onRecoverableError)), node = insert(value, 1, false, null, 0, left, 0, right, h), value[name] = node.current, save(8 === value.nodeType ? value.parentNode : value), new Tree(node);
            };
            /**
             * @param {!Object} node
             * @return {?}
             */
            ReactDOM.findDOMNode = function (node) {
                if (null == node) {
                    return null;
                }
                if (1 === node.nodeType) {
                    return node;
                }
                var value = node._reactInternals;
                if (void 0 === value) {
                    if ("function" === typeof node.render) {
                        throw Error(call(188));
                    }
                    throw node = Object.keys(node).join(","), Error(call(268, node));
                }
                return node = null === (node = iterate(value)) ? null : node.stateNode;
            };
            /**
             * @param {!Function} c
             * @return {?}
             */
            ReactDOM.flushSync = function (c) {
                return toggle(c);
            };
            /**
             * @param {!Object} node
             * @param {undefined} obj
             * @param {!Function} options
             * @return {?}
             */
            ReactDOM.hydrate = function (node, obj, options) {
                if (!extract(obj)) {
                    throw Error(call(200));
                }
                return link(null, node, obj, true, options);
            };
            /**
             * @param {?} data
             * @param {!Object} opts
             * @param {?} val
             * @return {?}
             */
            ReactDOM.hydrateRoot = function (data, opts, val) {
                if (!detach(data)) {
                    throw Error(call(405));
                }
                var current = null != val && val.hydratedSources || null;
                /** @type {boolean} */
                var head = false;
                /** @type {string} */
                var value = "";
                var height = HEIGHT;
                if (null !== val && void 0 !== val && (true === val.unstable_strictMode && (head = true), void 0 !== val.identifierPrefix && (value = val.identifierPrefix), void 0 !== val.onRecoverableError && (height = val.onRecoverableError)), opts = complete(opts, null, data, 1, null != val ? val : null, head, 0, value, height), data[name] = opts.current, save(data), current) {
                    /** @type {number} */
                    data = 0;
                    for (; data < current.length; data++) {
                        head = (head = (val = current[data])._getVersion)(val._source);
                        if (null == opts.mutableSourceEagerHydrationData) {
                            /** @type {!Array} */
                            opts.mutableSourceEagerHydrationData = [val, head];
                        } else {
                            opts.mutableSourceEagerHydrationData.push(val, head);
                        }
                    }
                }
                return new a(opts);
            };
            /**
             * @param {!Object} obj
             * @param {!Function} value
             * @param {!Array} options
             * @return {?}
             */
            ReactDOM.render = function (obj, value, options) {
                if (!extract(value)) {
                    throw Error(call(200));
                }
                return link(null, obj, value, false, options);
            };
            /**
             * @param {!Object} node
             * @return {?}
             */
            ReactDOM.unmountComponentAtNode = function (node) {
                if (!extract(node)) {
                    throw Error(call(40));
                }
                return !!node._reactRootContainer && (toggle(function () {
                    link(null, null, node, false, function () {
                        /** @type {null} */
                        node._reactRootContainer = null;
                        /** @type {null} */
                        node[name] = null;
                    });
                }), true);
            };
            /** @type {function(!Function, !Array): ?} */
            ReactDOM.unstable_batchedUpdates = download;
            /**
             * @param {!Object} obj
             * @param {!Object} node
             * @param {undefined} callback
             * @param {!Function} container
             * @return {?}
             */
            ReactDOM.unstable_renderSubtreeIntoContainer = function (obj, node, callback, container) {
                if (!extract(callback)) {
                    throw Error(call(200));
                }
                if (null == obj || void 0 === obj._reactInternals) {
                    throw Error(call(38));
                }
                return link(obj, node, callback, false, container);
            };
            /** @type {string} */
            ReactDOM.version = "18.2.0-next-9e3b772b8-20220608";
        },
        1250: function (cas, model, sample) {
            var doc = sample(4164);
            model.createRoot = doc.createRoot;
            model.hydrateRoot = doc.hydrateRoot;
        },
        4164: function (module, object, instantiate) {
            !function e() {
                if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE) {
                    try {
                        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
                    } catch (t) {
                        console.error(t);
                    }
                }
            }();
            module.exports = instantiate(4463);
        },
        1372: function (isSlidingUp, nodeHelpers) {
            /**
             * @param {!Object} value
             * @return {?}
             */
            function getType(value) {
                if ("object" === typeof value && null !== value) {
                    var type = value.$$typeof;
                    switch (type) {
                        case i:
                            switch (value = value.type) {
                                case g:
                                case undefined:
                                case array:
                                case mask:
                                case aPointer:
                                case ta:
                                    return value;
                                default:
                                    switch (value = value && value.$$typeof) {
                                        case orientationClasses:
                                        case sizeClasses:
                                        case h:
                                        case boolean:
                                        case u:
                                            return value;
                                        default:
                                            return type;
                                    }
                            }case k:
                            return type;
                    }
                }
            }
            /**
             * @param {!Object} props
             * @return {?}
             */
            function renderSectorItem(props) {
                return getType(props) === undefined;
            }
            /** @type {(boolean|function(string): (?|undefined))} */
            var a = "function" === typeof Symbol && Symbol.for;
            var i = a ? Symbol.for("react.element") : 60103;
            var k = a ? Symbol.for("react.portal") : 60106;
            var array = a ? Symbol.for("react.fragment") : 60107;
            var aPointer = a ? Symbol.for("react.strict_mode") : 60108;
            var mask = a ? Symbol.for("react.profiler") : 60114;
            var u = a ? Symbol.for("react.provider") : 60109;
            var orientationClasses = a ? Symbol.for("react.context") : 60110;
            var g = a ? Symbol.for("react.async_mode") : 60111;
            var undefined = a ? Symbol.for("react.concurrent_mode") : 60111;
            var sizeClasses = a ? Symbol.for("react.forward_ref") : 60112;
            var ta = a ? Symbol.for("react.suspense") : 60113;
            var keysA = a ? Symbol.for("react.suspense_list") : 60120;
            var boolean = a ? Symbol.for("react.memo") : 60115;
            var h = a ? Symbol.for("react.lazy") : 60116;
            var arr = a ? Symbol.for("react.block") : 60121;
            var v1 = a ? Symbol.for("react.fundamental") : 60117;
            var sa = a ? Symbol.for("react.responder") : 60118;
            var b = a ? Symbol.for("react.scope") : 60119;
            /**
             * @param {!Object} obj
             * @return {?}
             */
            nodeHelpers.isFragment = function (obj) {
                return getType(obj) === array;
            };
            /**
             * @param {!Object} value
             * @return {?}
             */
            nodeHelpers.isMemo = function (value) {
                return getType(value) === boolean;
            };
        },
        7441: function (module, object, instantiate) {
            module.exports = instantiate(1372);
        },
        6374: function (database2, options, view) {
            /**
             * @param {string} type
             * @param {!Object} props
             * @param {?} value
             * @return {?}
             */
            function render(type, props, value) {
                var prop;
                var _props = {};
                /** @type {null} */
                var c = null;
                /** @type {null} */
                var ref = null;
                for (prop in void 0 !== value && (c = "" + value), void 0 !== props.key && (c = "" + props.key), void 0 !== props.ref && (ref = props.ref), props) {
                    if (has.call(props, prop) && !RESERVED_PROPS.hasOwnProperty(prop)) {
                        _props[prop] = props[prop];
                    }
                }
                if (type && type.defaultProps) {
                    for (prop in props = type.defaultProps) {
                        if (void 0 === _props[prop]) {
                            _props[prop] = props[prop];
                        }
                    }
                }
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: type,
                    key: c,
                    ref: ref,
                    props: _props,
                    _owner: user.current
                };
            }
            var vroot = view(2791);
            var REACT_ELEMENT_TYPE = Symbol.for("react.element");
            var a = Symbol.for("react.fragment");
            /** @type {function(this:Object, *): boolean} */
            var has = Object.prototype.hasOwnProperty;
            var user = vroot.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
            var RESERVED_PROPS = {
                key: true,
                ref: true,
                __self: true,
                __source: true
            };
            /** @type {function(string, !Object, ?): ?} */
            options.jsx = render;
            /** @type {function(string, !Object, ?): ?} */
            options.jsxs = render;
        },
        9117: function (finalizers, self) {
            /**
             * @param {!Object} props
             * @param {!Object} context
             * @param {?} updater
             * @return {undefined}
             */
            function ReactComponent(props, context, updater) {
                /** @type {!Object} */
                this.props = props;
                /** @type {!Object} */
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
            }
            /**
             * @return {undefined}
             */
            function ComponentDummy() {
            }
            /**
             * @param {!Object} props
             * @param {!Object} context
             * @param {?} updater
             * @return {undefined}
             */
            function ReactPureComponent(props, context, updater) {
                /** @type {!Object} */
                this.props = props;
                /** @type {!Object} */
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
            }
            /**
             * @param {string} type
             * @param {!Object} obj
             * @param {!Object} id
             * @return {?}
             */
            function createElement(type, obj, id) {
                var i;
                var data = {};
                /** @type {null} */
                var previewKey = null;
                /** @type {null} */
                var ref = null;
                if (null != obj) {
                    for (i in void 0 !== obj.ref && (ref = obj.ref), void 0 !== obj.key && (previewKey = "" + obj.key), obj) {
                        if (has.call(obj, i) && !RESERVED_PROPS.hasOwnProperty(i)) {
                            data[i] = obj[i];
                        }
                    }
                }
                /** @type {number} */
                var v = arguments.length - 2;
                if (1 === v) {
                    /** @type {!Object} */
                    data.children = id;
                } else {
                    if (1 < v) {
                        /** @type {!Array} */
                        var list = Array(v);
                        /** @type {number} */
                        var j = 0;
                        for (; j < v; j++) {
                            list[j] = arguments[j + 2];
                        }
                        /** @type {!Array} */
                        data.children = list;
                    }
                }
                if (type && type.defaultProps) {
                    for (i in v = type.defaultProps) {
                        if (void 0 === data[i]) {
                            data[i] = v[i];
                        }
                    }
                }
                return {
                    $$typeof: PENDING_EVENT_IDENTIFIER,
                    type: type,
                    key: previewKey,
                    ref: ref,
                    props: data,
                    _owner: ReactCurrentOwner.current
                };
            }
            /**
             * @param {!Object} value
             * @return {?}
             */
            function wrapper(value) {
                return "object" === typeof value && null !== value && value.$$typeof === PENDING_EVENT_IDENTIFIER;
            }
            /**
             * @param {string} value
             * @param {number} name
             * @return {?}
             */
            function f(value, name) {
                return "object" === typeof value && null !== value && null != value.key ? function (commaParam) {
                    var subwikiListsCache = {
                        "=": "=0",
                        ":": "=2"
                    };
                    return "$" + commaParam.replace(/[=:]/g, function (wikiId) {
                        return subwikiListsCache[wikiId];
                    });
                }("" + value.key) : name.toString(36);
            }
            /**
             * @param {!Object} data
             * @param {string} source
             * @param {!Object} id
             * @param {string} to
             * @param {!Object} value
             * @return {?}
             */
            function get(data, source, id, to, value) {
                /** @type {string} */
                var type = typeof data;
                if (!("undefined" !== type && "boolean" !== type)) {
                    /** @type {null} */
                    data = null;
                }
                /** @type {boolean} */
                var result = false;
                if (null === data) {
                    /** @type {boolean} */
                    result = true;
                } else {
                    switch (type) {
                        case "string":
                        case "number":
                            /** @type {boolean} */
                            result = true;
                            break;
                        case "object":
                            switch (data.$$typeof) {
                                case PENDING_EVENT_IDENTIFIER:
                                case getWorkGroupInfo:
                                    /** @type {boolean} */
                                    result = true;
                            }
                    }
                }
                if (result) {
                    return value = value(result = data), data = "" === to ? "." + f(result, 0) : to, isArray(value) ? (id = "", null != data && (id = data.replace(pwd, "$&/") + "/"), get(value, source, id, "", function (letter) {
                        return letter;
                    })) : null != value && (wrapper(value) && (value = function (data, awsKey) {
                        return {
                            $$typeof: PENDING_EVENT_IDENTIFIER,
                            type: data.type,
                            key: awsKey,
                            ref: data.ref,
                            props: data.props,
                            _owner: data._owner
                        };
                    }(value, id + (!value.key || result && result.key === value.key ? "" : ("" + value.key).replace(pwd, "$&/") + "/") + data)), source.push(value)), 1;
                }
                if (result = 0, to = "" === to ? "." : to + ":", isArray(data)) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < data.length; i++) {
                        /** @type {string} */
                        var end = to + f(type = data[i], i);
                        result = result + get(type, source, id, end, value);
                    }
                } else {
                    if (end = function (data) {
                        return null === data || "object" !== typeof data ? null : "function" === typeof (data = type && data[type] || data["@@iterator"]) ? data : null;
                    }(data), "function" === typeof end) {
                        data = end.call(data);
                        /** @type {number} */
                        i = 0;
                        for (; !(type = data.next()).done;) {
                            result = result + get(type = type.value, source, id, end = to + f(type, i++), value);
                        }
                    } else {
                        if ("object" === type) {
                            throw source = String(data), Error("Objects are not valid as a React child (found: " + ("[object Object]" === source ? "object with keys {" + Object.keys(data).join(", ") + "}" : source) + "). If you meant to render a collection of children, use an array instead.");
                        }
                    }
                }
                return result;
            }
            /**
             * @param {!Function} value
             * @param {!Function} fn
             * @param {!Function} document
             * @return {?}
             */
            function callback(value, fn, document) {
                if (null == value) {
                    return value;
                }
                /** @type {!Array} */
                var result = [];
                /** @type {number} */
                var i = 0;
                return get(value, result, "", "", function (event) {
                    return fn.call(document, event, i++);
                }), result;
            }
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function reject(obj) {
                if (-1 === obj._status) {
                    var result = obj._result;
                    (result = result()).then(function (value) {
                        if (!(0 !== obj._status && -1 !== obj._status)) {
                            /** @type {number} */
                            obj._status = 1;
                            /** @type {!Object} */
                            obj._result = value;
                        }
                    }, function (value) {
                        if (!(0 !== obj._status && -1 !== obj._status)) {
                            /** @type {number} */
                            obj._status = 2;
                            /** @type {!Object} */
                            obj._result = value;
                        }
                    });
                    if (-1 === obj._status) {
                        /** @type {number} */
                        obj._status = 0;
                        obj._result = result;
                    }
                }
                if (1 === obj._status) {
                    return obj._result.default;
                }
                throw obj._result;
            }
            var PENDING_EVENT_IDENTIFIER = Symbol.for("react.element");
            var getWorkGroupInfo = Symbol.for("react.portal");
            var Fragment = Symbol.for("react.fragment");
            var enchantDialog = Symbol.for("react.strict_mode");
            var Profiler = Symbol.for("react.profiler");
            var TYPE_SYMBOL = Symbol.for("react.provider");
            var REACT_ELEMENT_TYPE = Symbol.for("react.context");
            var _typeofReactElement = Symbol.for("react.forward_ref");
            var navigatorType = Symbol.for("react.suspense");
            var normalize = Symbol.for("react.memo");
            var d = Symbol.for("react.lazy");
            var type = Symbol.iterator;
            var ReactNoopUpdateQueue = {
                isMounted: function () {
                    return false;
                },
                enqueueForceUpdate: function () {
                },
                enqueueReplaceState: function () {
                },
                enqueueSetState: function () {
                }
            };
            /** @type {function(!Object, ...(Object|null)): !Object} */
            var assign = Object.assign;
            var emptyObject = {};
            ReactComponent.prototype.isReactComponent = {};
            /**
             * @param {string} object
             * @param {!Array} callback
             * @return {undefined}
             */
            ReactComponent.prototype.setState = function (object, callback) {
                if ("object" !== typeof object && "function" !== typeof object && null != object) {
                    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
                }
                this.updater.enqueueSetState(this, object, callback, "setState");
            };
            /**
             * @param {string} callback
             * @return {undefined}
             */
            ReactComponent.prototype.forceUpdate = function (callback) {
                this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
            };
            ComponentDummy.prototype = ReactComponent.prototype;
            var module = ReactPureComponent.prototype = new ComponentDummy;
            /** @type {function(!Object, !Object, ?): undefined} */
            module.constructor = ReactPureComponent;
            assign(module, ReactComponent.prototype);
            /** @type {boolean} */
            module.isPureReactComponent = true;
            /** @type {function(*): boolean} */
            var isArray = Array.isArray;
            /** @type {function(this:Object, *): boolean} */
            var has = Object.prototype.hasOwnProperty;
            var ReactCurrentOwner = {
                current: null
            };
            var RESERVED_PROPS = {
                key: true,
                ref: true,
                __self: true,
                __source: true
            };
            /** @type {!RegExp} */
            var pwd = /\/+/g;
            var history = {
                current: null
            };
            var opts = {
                transition: null
            };
            var seleniumChild = {
                ReactCurrentDispatcher: history,
                ReactCurrentBatchConfig: opts,
                ReactCurrentOwner: ReactCurrentOwner
            };
            self.Children = {
                map: callback,
                forEach: function (object, next, i) {
                    callback(object, function () {
                        next.apply(this, arguments);
                    }, i);
                },
                count: function (obj) {
                    /** @type {number} */
                    var value = 0;
                    return callback(obj, function () {
                        value++;
                    }), value;
                },
                toArray: function (cur) {
                    return callback(cur, function (i) {
                        return i;
                    }) || [];
                },
                only: function (data) {
                    if (!wrapper(data)) {
                        throw Error("React.Children.only expected to receive a single React element child.");
                    }
                    return data;
                }
            };
            /** @type {function(!Object, !Object, ?): undefined} */
            self.Component = ReactComponent;
            self.Fragment = Fragment;
            self.Profiler = Profiler;
            /** @type {function(!Object, !Object, ?): undefined} */
            self.PureComponent = ReactPureComponent;
            self.StrictMode = enchantDialog;
            self.Suspense = navigatorType;
            self.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = seleniumChild;
            /**
             * @param {!Object} element
             * @param {!Object} props
             * @param {!Array} children
             * @return {?}
             */
            self.cloneElement = function (element, props, children) {
                if (null === element || void 0 === element) {
                    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
                }
                /** @type {!Object} */
                var data = assign({}, element.props);
                var a = element.key;
                var ref = element.ref;
                var owner = element._owner;
                if (null != props) {
                    if (void 0 !== props.ref && (ref = props.ref, owner = ReactCurrentOwner.current), void 0 !== props.key && (a = "" + props.key), element.type && element.type.defaultProps) {
                        var values = element.type.defaultProps;
                    }
                    for (index in props) {
                        if (has.call(props, index) && !RESERVED_PROPS.hasOwnProperty(index)) {
                            data[index] = void 0 === props[index] && void 0 !== values ? values[index] : props[index];
                        }
                    }
                }
                /** @type {number} */
                var index = arguments.length - 2;
                if (1 === index) {
                    /** @type {!Array} */
                    data.children = children;
                } else {
                    if (1 < index) {
                        /** @type {!Array} */
                        values = Array(index);
                        /** @type {number} */
                        var i = 0;
                        for (; i < index; i++) {
                            values[i] = arguments[i + 2];
                        }
                        /** @type {!Array} */
                        data.children = values;
                    }
                }
                return {
                    $$typeof: PENDING_EVENT_IDENTIFIER,
                    type: element.type,
                    key: a,
                    ref: ref,
                    props: data,
                    _owner: owner
                };
            };
            /**
             * @param {!Object} context
             * @return {?}
             */
            self.createContext = function (context) {
                return (context = {
                    $$typeof: REACT_ELEMENT_TYPE,
                    _currentValue: context,
                    _currentValue2: context,
                    _threadCount: 0,
                    Provider: null,
                    Consumer: null,
                    _defaultValue: null,
                    _globalName: null
                }).Provider = {
                    $$typeof: TYPE_SYMBOL,
                    _context: context
                }, context.Consumer = context;
            };
            /** @type {function(string, !Object, !Object): ?} */
            self.createElement = createElement;
            /**
             * @param {!Object} a
             * @return {?}
             */
            self.createFactory = function (a) {
                var t = createElement.bind(null, a);
                return t.type = a, t;
            };
            /**
             * @return {?}
             */
            self.createRef = function () {
                return {
                    current: null
                };
            };
            /**
             * @param {string} name
             * @return {?}
             */
            self.forwardRef = function (name) {
                return {
                    $$typeof: _typeofReactElement,
                    render: name
                };
            };
            /** @type {function(!Object): ?} */
            self.isValidElement = wrapper;
            /**
             * @param {!Object} ctxt_alloc_param
             * @return {?}
             */
            self.lazy = function (ctxt_alloc_param) {
                return {
                    $$typeof: d,
                    _payload: {
                        _status: -1,
                        _result: ctxt_alloc_param
                    },
                    _init: reject
                };
            };
            /**
             * @param {string} klass
             * @param {?} key
             * @return {?}
             */
            self.memo = function (klass, key) {
                return {
                    $$typeof: normalize,
                    type: klass,
                    compare: void 0 === key ? null : key
                };
            };
            /**
             * @param {?} callback
             * @return {undefined}
             */
            self.startTransition = function (callback) {
                /** @type {null} */
                var trans = opts.transition;
                opts.transition = {};
                try {
                    callback();
                } finally {
                    /** @type {null} */
                    opts.transition = trans;
                }
            };
            /**
             * @return {?}
             */
            self.unstable_act = function () {
                throw Error("act(...) is not supported in production builds of React.");
            };
            /**
             * @param {!Function} key
             * @param {!Array} index
             * @return {?}
             */
            self.useCallback = function (key, index) {
                return history.current.useCallback(key, index);
            };
            /**
             * @param {!Function} key
             * @return {?}
             */
            self.useContext = function (key) {
                return history.current.useContext(key);
            };
            /**
             * @return {undefined}
             */
            self.useDebugValue = function () {
            };
            /**
             * @param {!Function} key
             * @return {?}
             */
            self.useDeferredValue = function (key) {
                return history.current.useDeferredValue(key);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @return {?}
             */
            self.useEffect = function (key, target) {
                return history.current.useEffect(key, target);
            };
            /**
             * @return {?}
             */
            self.useId = function () {
                return history.current.useId();
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @param {number} x
             * @return {?}
             */
            self.useImperativeHandle = function (key, target, x) {
                return history.current.useImperativeHandle(key, target, x);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @return {?}
             */
            self.useInsertionEffect = function (key, target) {
                return history.current.useInsertionEffect(key, target);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @return {?}
             */
            self.useLayoutEffect = function (key, target) {
                return history.current.useLayoutEffect(key, target);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @return {?}
             */
            self.useMemo = function (key, target) {
                return history.current.useMemo(key, target);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @param {number} x
             * @return {?}
             */
            self.useReducer = function (key, target, x) {
                return history.current.useReducer(key, target, x);
            };
            /**
             * @param {!Function} key
             * @return {?}
             */
            self.useRef = function (key) {
                return history.current.useRef(key);
            };
            /**
             * @param {!Function} key
             * @return {?}
             */
            self.useState = function (key) {
                return history.current.useState(key);
            };
            /**
             * @param {!Function} key
             * @param {!Array} target
             * @param {number} x
             * @return {?}
             */
            self.useSyncExternalStore = function (key, target, x) {
                return history.current.useSyncExternalStore(key, target, x);
            };
            /**
             * @return {?}
             */
            self.useTransition = function () {
                return history.current.useTransition();
            };
            /** @type {string} */
            self.version = "18.2.0";
        },
        2791: function (module, object, instantiate) {
            module.exports = instantiate(9117);
        },
        184: function (module, object, instantiate) {
            module.exports = instantiate(6374);
        },
        6813: function (classNames, state) {
            /**
             * @param {!Array} r
             * @param {!Object} i
             * @return {undefined}
             */
            function c(r, i) {
                var j = r.length;
                r.push(i);
                e: for (; 0 < j;) {
                    /** @type {number} */
                    var a = j - 1 >>> 1;
                    var c = r[a];
                    if (!(0 < callback(c, i))) {
                        break e;
                    }
                    /** @type {!Object} */
                    r[a] = i;
                    r[j] = c;
                    /** @type {number} */
                    j = a;
                }
            }
            /**
             * @param {!Array} text
             * @return {?}
             */
            function parseInt(text) {
                return 0 === text.length ? null : text[0];
            }
            /**
             * @param {!Array} result
             * @return {?}
             */
            function func(result) {
                if (0 === result.length) {
                    return null;
                }
                var value = result[0];
                var k = result.pop();
                if (k !== value) {
                    result[0] = k;
                    /** @type {number} */
                    var index = 0;
                    var pos = result.length;
                    /** @type {number} */
                    var n_byte = pos >>> 1;
                    e: for (; index < n_byte;) {
                        /** @type {number} */
                        var i = 2 * (index + 1) - 1;
                        var temp = result[i];
                        /** @type {number} */
                        var p = i + 1;
                        var module = result[p];
                        if (0 > callback(temp, k)) {
                            if (p < pos && 0 > callback(module, temp)) {
                                result[index] = module;
                                result[p] = k;
                                /** @type {number} */
                                index = p;
                            } else {
                                result[index] = temp;
                                result[i] = k;
                                /** @type {number} */
                                index = i;
                            }
                        } else {
                            if (!(p < pos && 0 > callback(module, k))) {
                                break e;
                            }
                            result[index] = module;
                            result[p] = k;
                            /** @type {number} */
                            index = p;
                        }
                    }
                }
                return value;
            }
            /**
             * @param {string} a
             * @param {!Object} b
             * @return {?}
             */
            function callback(a, b) {
                /** @type {number} */
                var n = a.sortIndex - b.sortIndex;
                return 0 !== n ? n : a.id - b.id;
            }
            /**
             * @param {?} end
             * @return {undefined}
             */
            function get(end) {
                var a = parseInt(r);
                for (; null !== a;) {
                    if (null === a.callback) {
                        func(r);
                    } else {
                        if (!(a.startTime <= end)) {
                            break;
                        }
                        func(r);
                        a.sortIndex = a.expirationTime;
                        c(t, a);
                    }
                    a = parseInt(r);
                }
            }
            /**
             * @param {?} b
             * @return {undefined}
             */
            function o(b) {
                if (err = false, get(b), !inputWin) {
                    if (null !== parseInt(t)) {
                        /** @type {boolean} */
                        inputWin = true;
                        on(init);
                    } else {
                        var a = parseInt(r);
                        if (null !== a) {
                            next(o, a.startTime - b);
                        }
                    }
                }
            }
            /**
             * @param {string} progress
             * @param {?} x
             * @return {?}
             */
            function init(progress, x) {
                /** @type {boolean} */
                inputWin = false;
                if (err) {
                    /** @type {boolean} */
                    err = false;
                    read(x);
                    /** @type {number} */
                    x = -1;
                }
                /** @type {boolean} */
                winRef = true;
                var canvasWidth = width;
                try {
                    get(x);
                    data = parseInt(t);
                    for (; null !== data && (!(data.expirationTime > x) || progress && !size());) {
                        var callback = data.callback;
                        if ("function" === typeof callback) {
                            /** @type {null} */
                            data.callback = null;
                            width = data.priorityLevel;
                            var value = callback(data.expirationTime <= x);
                            x = state.unstable_now();
                            if ("function" === typeof value) {
                                /** @type {!Function} */
                                data.callback = value;
                            } else {
                                if (data === parseInt(t)) {
                                    func(t);
                                }
                            }
                            get(x);
                        } else {
                            func(t);
                        }
                        data = parseInt(t);
                    }
                    if (null !== data) {
                        /** @type {boolean} */
                        var PNotify = true;
                    } else {
                        var p = parseInt(r);
                        if (null !== p) {
                            next(o, p.startTime - x);
                        }
                        /** @type {boolean} */
                        PNotify = false;
                    }
                    return PNotify;
                } finally {
                    /** @type {null} */
                    data = null;
                    width = canvasWidth;
                    /** @type {boolean} */
                    winRef = false;
                }
            }
            /**
             * @return {?}
             */
            function size() {
                return !(state.unstable_now() - m_iterations_done < m_iterations_in_chunk);
            }
            /**
             * @return {undefined}
             */
            function fn() {
                if (null !== merge) {
                    var classConsumables = state.unstable_now();
                    m_iterations_done = classConsumables;
                    /** @type {boolean} */
                    var ngAnimateConsumable = true;
                    try {
                        ngAnimateConsumable = merge(true, classConsumables);
                    } finally {
                        if (ngAnimateConsumable) {
                            cb();
                        } else {
                            /** @type {boolean} */
                            k = false;
                            /** @type {null} */
                            merge = null;
                        }
                    }
                } else {
                    /** @type {boolean} */
                    k = false;
                }
            }
            /**
             * @param {string} x
             * @return {undefined}
             */
            function on(x) {
                /** @type {string} */
                merge = x;
                if (!k) {
                    /** @type {boolean} */
                    k = true;
                    cb();
                }
            }
            /**
             * @param {!Function} end
             * @param {number} name
             * @return {undefined}
             */
            function next(end, name) {
                /** @type {number} */
                x = call(function () {
                    end(state.unstable_now());
                }, name);
            }
            if ("object" === typeof performance && "function" === typeof performance.now) {
                /** @type {!Performance} */
                var tsw = performance;
                /**
                 * @return {?}
                 */
                state.unstable_now = function () {
                    return tsw.now();
                };
            } else {
                /** @type {function(new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string} */
                var clock = Date;
                /** @type {number} */
                var u = clock.now();
                /**
                 * @return {?}
                 */
                state.unstable_now = function () {
                    return clock.now() - u;
                };
            }
            /** @type {!Array} */
            var t = [];
            /** @type {!Array} */
            var r = [];
            /** @type {number} */
            var nChanges = 1;
            /** @type {null} */
            var data = null;
            /** @type {number} */
            var width = 3;
            /** @type {boolean} */
            var winRef = false;
            /** @type {boolean} */
            var inputWin = false;
            /** @type {boolean} */
            var err = false;
            /** @type {(function((!Function|null|string), number=, ...*): number|null)} */
            var call = "function" === typeof setTimeout ? setTimeout : null;
            /** @type {(function((null|number|undefined)): undefined|null)} */
            var read = "function" === typeof clearTimeout ? clearTimeout : null;
            /** @type {(function(function(): ?, ...?): number|null)} */
            var nextTick = "undefined" !== typeof setImmediate ? setImmediate : null;
            if ("undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending) {
                navigator.scheduling.isInputPending.bind(navigator.scheduling);
            }
            var cb;
            /** @type {boolean} */
            var k = false;
            /** @type {null} */
            var merge = null;
            /** @type {number} */
            var x = -1;
            /** @type {number} */
            var m_iterations_in_chunk = 5;
            /** @type {number} */
            var m_iterations_done = -1;
            if ("function" === typeof nextTick) {
                /**
                 * @return {undefined}
                 */
                cb = function () {
                    nextTick(fn);
                };
            } else {
                if ("undefined" !== typeof MessageChannel) {
                    /** @type {!MessageChannel} */
                    var channel = new MessageChannel;
                    /** @type {!MessagePort} */
                    var port2 = channel.port2;
                    /** @type {function(): undefined} */
                    channel.port1.onmessage = fn;
                    /**
                     * @return {undefined}
                     */
                    cb = function () {
                        port2.postMessage(null);
                    };
                } else {
                    /**
                     * @return {undefined}
                     */
                    cb = function () {
                        call(fn, 0);
                    };
                }
            }
            /** @type {number} */
            state.unstable_IdlePriority = 5;
            /** @type {number} */
            state.unstable_ImmediatePriority = 1;
            /** @type {number} */
            state.unstable_LowPriority = 4;
            /** @type {number} */
            state.unstable_NormalPriority = 3;
            /** @type {null} */
            state.unstable_Profiling = null;
            /** @type {number} */
            state.unstable_UserBlockingPriority = 2;
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            state.unstable_cancelCallback = function (e) {
                /** @type {null} */
                e.callback = null;
            };
            /**
             * @return {undefined}
             */
            state.unstable_continueExecution = function () {
                if (!(inputWin || winRef)) {
                    /** @type {boolean} */
                    inputWin = true;
                    on(init);
                }
            };
            /**
             * @param {number} font_height
             * @return {undefined}
             */
            state.unstable_forceFrameRate = function (font_height) {
                if (0 > font_height || 125 < font_height) {
                    console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                } else {
                    /** @type {number} */
                    m_iterations_in_chunk = 0 < font_height ? Math.floor(1E3 / font_height) : 5;
                }
            };
            /**
             * @return {?}
             */
            state.unstable_getCurrentPriorityLevel = function () {
                return width;
            };
            /**
             * @return {?}
             */
            state.unstable_getFirstCallbackNode = function () {
                return parseInt(t);
            };
            /**
             * @param {?} saveNotifs
             * @return {?}
             */
            state.unstable_next = function (saveNotifs) {
                switch (width) {
                    case 1:
                    case 2:
                    case 3:
                        /** @type {number} */
                        var canvasWidth = 3;
                        break;
                    default:
                        canvasWidth = width;
                }
                var destWidth = width;
                width = canvasWidth;
                try {
                    return saveNotifs();
                } finally {
                    width = destWidth;
                }
            };
            /**
             * @return {undefined}
             */
            state.unstable_pauseExecution = function () {
            };
            /**
             * @return {undefined}
             */
            state.unstable_requestPaint = function () {
            };
            /**
             * @param {number} opt_width
             * @param {?} opt_color
             * @return {?}
             */
            state.unstable_runWithPriority = function (opt_width, opt_color) {
                switch (opt_width) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    default:
                        /** @type {number} */
                        opt_width = 3;
                }
                var canvasWidth = width;
                /** @type {number} */
                width = opt_width;
                try {
                    return opt_color();
                } finally {
                    width = canvasWidth;
                }
            };
            /**
             * @param {number} n
             * @param {string} fn
             * @param {number} a
             * @return {?}
             */
            state.unstable_scheduleCallback = function (n, fn, a) {
                var b = state.unstable_now();
                switch ("object" === typeof a && null !== a ? a = "number" === typeof (a = a.delay) && 0 < a ? b + a : b : a = b, n) {
                    case 1:
                        /** @type {number} */
                        var e = -1;
                        break;
                    case 2:
                        /** @type {number} */
                        e = 250;
                        break;
                    case 5:
                        /** @type {number} */
                        e = 1073741823;
                        break;
                    case 4:
                        /** @type {number} */
                        e = 1E4;
                        break;
                    default:
                        /** @type {number} */
                        e = 5E3;
                }
                return n = {
                    id: nChanges++,
                    callback: fn,
                    priorityLevel: n,
                    startTime: a,
                    expirationTime: e = a + e,
                    sortIndex: -1
                }, a > b ? (n.sortIndex = a, c(r, n), null === parseInt(t) && n === parseInt(r) && (err ? (read(x), x = -1) : err = true, next(o, a - b))) : (n.sortIndex = e, c(t, n), inputWin || winRef || (inputWin = true, on(init))), n;
            };
            /** @type {function(): ?} */
            state.unstable_shouldYield = size;
            /**
             * @param {!Function} CropAreaRectangle
             * @return {?}
             */
            state.unstable_wrapCallback = function (CropAreaRectangle) {
                var canvasWidth = width;
                return function () {
                    var destWidth = width;
                    width = canvasWidth;
                    try {
                        return CropAreaRectangle.apply(this, arguments);
                    } finally {
                        width = destWidth;
                    }
                };
            };
        },
        5296: function (module, object, instantiate) {
            module.exports = instantiate(6813);
        },
        9613: function (mixin) {
            /**
             * @param {!Object} type
             * @param {!Object} value
             * @param {string} node
             * @param {!Array} input
             * @return {?}
             */
            mixin.exports = function (type, value, node, input) {
                var text = node ? node.call(input, type, value) : void 0;
                if (void 0 !== text) {
                    return !!text;
                }
                if (type === value) {
                    return true;
                }
                if ("object" !== typeof type || !type || "object" !== typeof value || !value) {
                    return false;
                }
                /** @type {!Array<string>} */
                var b = Object.keys(type);
                /** @type {!Array<string>} */
                var a = Object.keys(value);
                if (b.length !== a.length) {
                    return false;
                }
                var checkedSubscribe = Object.prototype.hasOwnProperty.bind(value);
                /** @type {number} */
                var i = 0;
                for (; i < b.length; i++) {
                    /** @type {string} */
                    var j = b[i];
                    if (!checkedSubscribe(j)) {
                        return false;
                    }
                    var item = type[j];
                    var key = value[j];
                    if (false === (text = node ? node.call(input, item, key, j) : void 0) || void 0 === text && item !== key) {
                        return false;
                    }
                }
                return true;
            };
        }
    };
    var modules = {};
    /**
     * @param {!Object} module
     * @return {?}
     */
    __webpack_require__.n = function (module) {
        /** @type {function(): ?} */
        var getter = module && module.__esModule ? function () {
            return module.default;
        } : function () {
            return module;
        };
        return __webpack_require__.d(getter, {
            a: getter
        }), getter;
    };
    (function () {
        var widGroups;
        /** @type {function((!Function|string)): ?} */
        var t = Object.getPrototypeOf ? function (result) {
            return Object.getPrototypeOf(result);
        } : function (result) {
            return result.__proto__;
        };
        /**
         * @param {!Object} result
         * @param {number} date
         * @return {?}
         */
        __webpack_require__.t = function (result, date) {
            if (1 & date && (result = this(result)), 8 & date) {
                return result;
            }
            if ("object" === typeof result && result) {
                if (4 & date && result.__esModule) {
                    return result;
                }
                if (16 & date && "function" === typeof result.then) {
                    return result;
                }
            }
            /** @type {!Object} */
            var getter = Object.create(null);
            __webpack_require__.r(getter);
            var a = {};
            widGroups = widGroups || [null, t({}), t([]), t(t)];
            var val = 2 & date && result;
            for (; "object" == typeof val && !~widGroups.indexOf(val); val = t(val)) {
                Object.getOwnPropertyNames(val).forEach(function (length) {
                    /**
                     * @return {?}
                     */
                    a[length] = function () {
                        return result[length];
                    };
                });
            }
            return a.default = function () {
                return result;
            }, __webpack_require__.d(getter, a), getter;
        };
    })();
    /**
     * @param {!Function} exports
     * @param {!Function} args
     * @return {undefined}
     */
    __webpack_require__.d = function (exports, args) {
        var name;
        for (name in args) {
            if (__webpack_require__.o(args, name) && !__webpack_require__.o(exports, name)) {
                Object.defineProperty(exports, name, {
                    enumerable: true,
                    get: args[name]
                });
            }
        }
    };
    __webpack_require__.g = function () {
        if ("object" === typeof globalThis) {
            return globalThis;
        }
        try {
            return this || (new Function("return this"))();
        } catch (e) {
            if ("object" === typeof window) {
                return window;
            }
        }
    }();
    /**
     * @param {!Function} name
     * @param {string} file
     * @return {?}
     */
    __webpack_require__.o = function (name, file) {
        return Object.prototype.hasOwnProperty.call(name, file);
    };
    /**
     * @param {!Object} x
     * @return {undefined}
     */
    __webpack_require__.r = function (x) {
        if ("undefined" !== typeof Symbol && Symbol.toStringTag) {
            Object.defineProperty(x, Symbol.toStringTag, {
                value: "Module"
            });
        }
        Object.defineProperty(x, "__esModule", {
            value: true
        });
    };
    /**
     * @param {!Object} module
     * @return {?}
     */
    __webpack_require__.nmd = function (module) {
        return module.paths = [], module.children || (module.children = []), module;
    };
    (function () {
        /**
         * @param {!Object} options
         * @param {number} n
         * @return {?}
         */
        function respond(options, n) {
            if (null == n || n > options.length) {
                n = options.length;
            }
            /** @type {number} */
            var i = 0;
            /** @type {!Array} */
            var res = new Array(n);
            for (; i < n; i++) {
                res[i] = options[i];
            }
            return res;
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function isNull(obj) {
            if ("undefined" !== typeof Symbol && null != obj[Symbol.iterator] || null != obj["@@iterator"]) {
                return Array.from(obj);
            }
        }
        /**
         * @param {!Object} e
         * @param {number} results
         * @return {?}
         */
        function toString(e, results) {
            if (e) {
                if ("string" === typeof e) {
                    return respond(e, results);
                }
                /** @type {string} */
                var k = Object.prototype.toString.call(e).slice(8, -1);
                return "Object" === k && e.constructor && (k = e.constructor.name), "Map" === k || "Set" === k ? Array.from(e) : "Arguments" === k || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(k) ? respond(e, results) : void 0;
            }
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function resolve(value) {
            return function (one) {
                if (Array.isArray(one)) {
                    return respond(one);
                }
            }(value) || isNull(value) || toString(value) || function () {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        /**
         * @param {!Object} obj
         * @param {string} key
         * @param {string} value
         * @return {?}
         */
        function debug(obj, key, value) {
            return key in obj ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            }) : obj[key] = value, obj;
        }
        /**
         * @param {!Object} self
         * @return {?}
         */
        function fireEvent(self) {
            if (Array.isArray(self)) {
                return self;
            }
        }
        /**
         * @return {?}
         */
        function getattr() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        /**
         * @param {!Object} type
         * @param {number} data
         * @return {?}
         */
        function call(type, data) {
            return fireEvent(type) || function (target, expected) {
                var fn = null == target ? null : "undefined" !== typeof Symbol && target[Symbol.iterator] || target["@@iterator"];
                if (null != fn) {
                    var iter;
                    var o;
                    /** @type {!Array} */
                    var res = [];
                    /** @type {boolean} */
                    var _n = true;
                    /** @type {boolean} */
                    var l = false;
                    try {
                        fn = fn.call(target);
                        for (; !(_n = (iter = fn.next()).done) && (res.push(iter.value), !expected || res.length !== expected); _n = true) {
                        }
                    } catch (tObj) {
                        /** @type {boolean} */
                        l = true;
                        o = tObj;
                    } finally {
                        try {
                            if (!(_n || null == fn.return)) {
                                fn.return();
                            }
                        } finally {
                            if (l) {
                                throw o;
                            }
                        }
                    }
                    return res;
                }
            }(type, data) || toString(type, data) || getattr();
        }
        /**
         * @return {?}
         */
        function _extends() {
            return _extends = Object.assign ? Object.assign.bind() : function (b) {
                /** @type {number} */
                var i = 1;
                for (; i < arguments.length; i++) {
                    var data = arguments[i];
                    var k;
                    for (k in data) {
                        if (Object.prototype.hasOwnProperty.call(data, k)) {
                            b[k] = data[k];
                        }
                    }
                }
                return b;
            }, _extends.apply(this, arguments);
        }
        /**
         * @param {!Object} params
         * @return {?}
         */
        function template(params) {
            var message = params.suffixCls;
            var tg = params.tagName;
            params.displayName;
            return function (SelectivityReact) {
                return React.forwardRef(function (props, oldRef) {
                    var i = React.useContext(object).getPrefixCls;
                    var p = props.prefixCls;
                    var m = i(message, p);
                    return React.createElement(SelectivityReact, _extends({
                        ref: oldRef,
                        prefixCls: m,
                        tagName: tg
                    }, props));
                });
            };
        }
        /**
         * @param {!Object} obj
         * @param {boolean} object
         * @return {?}
         */
        function ownEnumerableKeys(obj, object) {
            /** @type {!Array<string>} */
            var val = Object.keys(obj);
            if (Object.getOwnPropertySymbols) {
                /** @type {!Array<?>} */
                var r = Object.getOwnPropertySymbols(obj);
                if (object) {
                    /** @type {!Array<?>} */
                    r = r.filter(function (key) {
                        return Object.getOwnPropertyDescriptor(obj, key).enumerable;
                    });
                }
                val.push.apply(val, r);
            }
            return val;
        }
        /**
         * @param {!Object} target
         * @return {?}
         */
        function assign(target) {
            /** @type {number} */
            var i = 1;
            for (; i < arguments.length; i++) {
                var data = null != arguments[i] ? arguments[i] : {};
                if (i % 2) {
                    ownEnumerableKeys(Object(data), true).forEach(function (type) {
                        debug(target, type, data[type]);
                    });
                } else {
                    if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(data));
                    } else {
                        ownEnumerableKeys(Object(data)).forEach(function (prop) {
                            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(data, prop));
                        });
                    }
                }
            }
            return target;
        }
        /**
         * @param {!Object} obj
         * @param {!Array} name
         * @return {?}
         */
        function get(obj, name) {
            if (null == obj) {
                return {};
            }
            var j;
            var i;
            var values = function (b, t) {
                if (null == b) {
                    return {};
                }
                var p;
                var i;
                var a = {};
                /** @type {!Array<string>} */
                var s = Object.keys(b);
                /** @type {number} */
                i = 0;
                for (; i < s.length; i++) {
                    /** @type {string} */
                    p = s[i];
                    if (!(t.indexOf(p) >= 0)) {
                        a[p] = b[p];
                    }
                }
                return a;
            }(obj, name);
            if (Object.getOwnPropertySymbols) {
                /** @type {!Array<?>} */
                var values = Object.getOwnPropertySymbols(obj);
                /** @type {number} */
                i = 0;
                for (; i < values.length; i++) {
                    j = values[i];
                    if (!(name.indexOf(j) >= 0)) {
                        if (Object.prototype.propertyIsEnumerable.call(obj, j)) {
                            values[j] = obj[j];
                        }
                    }
                }
            }
            return values;
        }
        /**
         * @param {!Function} obj
         * @return {?}
         */
        function stringify(obj) {
            return stringify = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (var_args) {
                return typeof var_args;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, stringify(obj);
        }
        /**
         * @param {number} n
         * @param {number} i
         * @return {?}
         */
        function parseInt(n, i) {
            if (function (e) {
                return "string" === typeof e && -1 !== e.indexOf(".") && 1 === parseFloat(e);
            }(n)) {
                /** @type {string} */
                n = "100%";
            }
            var processPercent = function (viewName) {
                return "string" === typeof viewName && -1 !== viewName.indexOf("%");
            }(n);
            return n = 360 === i ? n : Math.min(i, Math.max(0, parseFloat(n))), processPercent && (n = parseInt(String(n * i), 10) / 100), Math.abs(n - i) < 1E-6 ? 1 : n = 360 === i ? (n < 0 ? n % i + i : n % i) / parseFloat(String(i)) : n % i / parseFloat(String(i));
        }
        /**
         * @param {?} b
         * @return {?}
         */
        function clamp(b) {
            return Math.min(1, Math.max(0, b));
        }
        /**
         * @param {number} a
         * @return {?}
         */
        function boundAlpha(a) {
            return a = parseFloat(a), (isNaN(a) || a < 0 || a > 1) && (a = 1), a;
        }
        /**
         * @param {number} level
         * @return {?}
         */
        function flatten(level) {
            return level <= 1 ? "".concat(100 * Number(level), "%") : level;
        }
        /**
         * @param {string} expr
         * @return {?}
         */
        function min(expr) {
            return 1 === expr.length ? "0" + expr : String(expr);
        }
        /**
         * @param {number} r
         * @param {number} g
         * @param {number} b
         * @return {?}
         */
        function rgbToHsl(r, g, b) {
            r = parseInt(r, 255);
            g = parseInt(g, 255);
            b = parseInt(b, 255);
            /** @type {number} */
            var max = Math.max(r, g, b);
            /** @type {number} */
            var min = Math.min(r, g, b);
            /** @type {number} */
            var spacing = 0;
            /** @type {number} */
            var s = 0;
            /** @type {number} */
            var l = (max + min) / 2;
            if (max === min) {
                /** @type {number} */
                s = 0;
                /** @type {number} */
                spacing = 0;
            } else {
                /** @type {number} */
                var d = max - min;
                switch (s = l > .5 ? d / (2 - max - min) : d / (max + min), max) {
                    case r:
                        /** @type {number} */
                        spacing = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        /** @type {number} */
                        spacing = (b - r) / d + 2;
                        break;
                    case b:
                        /** @type {number} */
                        spacing = (r - g) / d + 4;
                }
                /** @type {number} */
                spacing = spacing / 6;
            }
            return {
                h: spacing,
                s: s,
                l: l
            };
        }
        /**
         * @param {number} x
         * @param {number} len
         * @param {number} i
         * @return {?}
         */
        function parseFloat(x, len, i) {
            return i < 0 && (i = i + 1), i > 1 && (i = i - 1), i < 1 / 6 ? x + 6 * i * (len - x) : i < .5 ? len : i < 2 / 3 ? x + (len - x) * (2 / 3 - i) * 6 : x;
        }
        /**
         * @param {number} r
         * @param {number} g
         * @param {number} b
         * @return {?}
         */
        function rgbToHsv(r, g, b) {
            r = parseInt(r, 255);
            g = parseInt(g, 255);
            b = parseInt(b, 255);
            /** @type {number} */
            var max = Math.max(r, g, b);
            /** @type {number} */
            var min = Math.min(r, g, b);
            /** @type {number} */
            var spacing = 0;
            /** @type {number} */
            var V = max;
            /** @type {number} */
            var d = max - min;
            /** @type {number} */
            var fun_stack = 0 === max ? 0 : d / max;
            if (max === min) {
                /** @type {number} */
                spacing = 0;
            } else {
                switch (max) {
                    case r:
                        /** @type {number} */
                        spacing = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        /** @type {number} */
                        spacing = (b - r) / d + 2;
                        break;
                    case b:
                        /** @type {number} */
                        spacing = (r - g) / d + 4;
                }
                /** @type {number} */
                spacing = spacing / 6;
            }
            return {
                h: spacing,
                s: fun_stack,
                v: V
            };
        }
        /**
         * @param {?} n
         * @param {?} col
         * @param {?} r
         * @param {?} val
         * @return {?}
         */
        function rgb(n, col, r, val) {
            /** @type {!Array} */
            var b = [min(Math.round(n).toString(16)), min(Math.round(col).toString(16)), min(Math.round(r).toString(16))];
            return val && b[0].startsWith(b[0].charAt(1)) && b[1].startsWith(b[1].charAt(1)) && b[2].startsWith(b[2].charAt(1)) ? b[0].charAt(0) + b[1].charAt(0) + b[2].charAt(0) : b.join("");
        }
        /**
         * @param {?} floatValue
         * @return {?}
         */
        function round(floatValue) {
            return Math.round(255 * parseFloat(floatValue)).toString(16);
        }
        /**
         * @param {string} color
         * @return {?}
         */
        function stringInputToObject(color) {
            return parseHex(color) / 255;
        }
        /**
         * @param {string} hex
         * @return {?}
         */
        function parseHex(hex) {
            return parseInt(hex, 16);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function parse(options) {
            var ret = {
                r: 0,
                g: 0,
                b: 0
            };
            /** @type {number} */
            var a = 1;
            /** @type {null} */
            var y = null;
            /** @type {null} */
            var i = null;
            /** @type {null} */
            var value = null;
            /** @type {boolean} */
            var ok = false;
            /** @type {boolean} */
            var format = false;
            return "string" === typeof options && (options = function (value) {
                if (0 === (value = value.trim().toLowerCase()).length) {
                    return false;
                }
                /** @type {boolean} */
                var named = false;
                if (namedColors[value]) {
                    value = namedColors[value];
                    /** @type {boolean} */
                    named = true;
                } else {
                    if ("transparent" === value) {
                        return {
                            r: 0,
                            g: 0,
                            b: 0,
                            a: 0,
                            format: "name"
                        };
                    }
                }
                /** @type {(Array<string>|null)} */
                var match = matchers.rgb.exec(value);
                if (match) {
                    return {
                        r: match[1],
                        g: match[2],
                        b: match[3]
                    };
                }
                if (match = matchers.rgba.exec(value)) {
                    return {
                        r: match[1],
                        g: match[2],
                        b: match[3],
                        a: match[4]
                    };
                }
                if (match = matchers.hsl.exec(value)) {
                    return {
                        h: match[1],
                        s: match[2],
                        l: match[3]
                    };
                }
                if (match = matchers.hsla.exec(value)) {
                    return {
                        h: match[1],
                        s: match[2],
                        l: match[3],
                        a: match[4]
                    };
                }
                if (match = matchers.hsv.exec(value)) {
                    return {
                        h: match[1],
                        s: match[2],
                        v: match[3]
                    };
                }
                if (match = matchers.hsva.exec(value)) {
                    return {
                        h: match[1],
                        s: match[2],
                        v: match[3],
                        a: match[4]
                    };
                }
                if (match = matchers.hex8.exec(value)) {
                    return {
                        r: parseHex(match[1]),
                        g: parseHex(match[2]),
                        b: parseHex(match[3]),
                        a: stringInputToObject(match[4]),
                        format: named ? "name" : "hex8"
                    };
                }
                if (match = matchers.hex6.exec(value)) {
                    return {
                        r: parseHex(match[1]),
                        g: parseHex(match[2]),
                        b: parseHex(match[3]),
                        format: named ? "name" : "hex"
                    };
                }
                if (match = matchers.hex4.exec(value)) {
                    return {
                        r: parseHex(match[1] + match[1]),
                        g: parseHex(match[2] + match[2]),
                        b: parseHex(match[3] + match[3]),
                        a: stringInputToObject(match[4] + match[4]),
                        format: named ? "name" : "hex8"
                    };
                }
                if (match = matchers.hex3.exec(value)) {
                    return {
                        r: parseHex(match[1] + match[1]),
                        g: parseHex(match[2] + match[2]),
                        b: parseHex(match[3] + match[3]),
                        format: named ? "name" : "hex"
                    };
                }
                return false;
            }(options)), "object" === typeof options && (isValidCSSUnit(options.r) && isValidCSSUnit(options.g) && isValidCSSUnit(options.b) ? (ret = function (e, t, tilesPerTexture) {
                return {
                    r: 255 * parseInt(e, 255),
                    g: 255 * parseInt(t, 255),
                    b: 255 * parseInt(tilesPerTexture, 255)
                };
            }(options.r, options.g, options.b), ok = true, format = "%" === String(options.r).substr(-1) ? "prgb" : "rgb") : isValidCSSUnit(options.h) && isValidCSSUnit(options.s) && isValidCSSUnit(options.v) ? (y = flatten(options.s), i = flatten(options.v), ret = function (t, b, C) {
                /** @type {number} */
                t = 6 * parseInt(t, 360);
                b = parseInt(b, 100);
                C = parseInt(C, 100);
                /** @type {number} */
                var time = Math.floor(t);
                /** @type {number} */
                var s = t - time;
                /** @type {number} */
                var X = C * (1 - b);
                /** @type {number} */
                var cy = C * (1 - s * b);
                /** @type {number} */
                var cx = C * (1 - (1 - s) * b);
                /** @type {number} */
                var h = time % 6;
                return {
                    r: 255 * [C, cy, X, X, cx, C][h],
                    g: 255 * [cx, C, C, cy, X, X][h],
                    b: 255 * [X, X, cx, C, C, cy][h]
                };
            }(options.h, y, i), ok = true, format = "hsv") : isValidCSSUnit(options.h) && isValidCSSUnit(options.s) && isValidCSSUnit(options.l) && (y = flatten(options.s), value = flatten(options.l), ret = function (n, t, s) {
                var r;
                var ret;
                var i;
                if (n = parseInt(n, 360), t = parseInt(t, 100), s = parseInt(s, 100), 0 === t) {
                    /** @type {number} */
                    ret = s;
                    /** @type {number} */
                    i = s;
                    /** @type {number} */
                    r = s;
                } else {
                    /** @type {number} */
                    var offset = s < .5 ? s * (1 + t) : s + t - s * t;
                    /** @type {number} */
                    var length = 2 * s - offset;
                    r = parseFloat(length, offset, n + 1 / 3);
                    ret = parseFloat(length, offset, n);
                    i = parseFloat(length, offset, n - 1 / 3);
                }
                return {
                    r: 255 * r,
                    g: 255 * ret,
                    b: 255 * i
                };
            }(options.h, y, value), ok = true, format = "hsl"), Object.prototype.hasOwnProperty.call(options, "a") && (a = options.a)), a = boundAlpha(a), {
                ok: ok,
                format: options.format || format,
                r: Math.min(255, Math.max(ret.r, 0)),
                g: Math.min(255, Math.max(ret.g, 0)),
                b: Math.min(255, Math.max(ret.b, 0)),
                a: a
            };
        }
        /**
         * @param {?} color
         * @return {?}
         */
        function isValidCSSUnit(color) {
            return Boolean(matchers.CSS_UNIT.exec(String(color)));
        }
        /**
         * @param {!Object} rgb
         * @return {?}
         */
        function setColor(rgb) {
            var hsv = rgbToHsv(rgb.r, rgb.g, rgb.b);
            return {
                h: 360 * hsv.h,
                s: hsv.s,
                v: hsv.v
            };
        }
        /**
         * @param {!Object} color
         * @return {?}
         */
        function append(color) {
            var r = color.r;
            var m = color.g;
            var y = color.b;
            return "#".concat(rgb(r, m, y, false));
        }
        /**
         * @param {!Object} from
         * @param {!Object} to
         * @param {number} callback
         * @return {?}
         */
        function convert(from, to, callback) {
            /** @type {number} */
            var ratio = callback / 100;
            return {
                r: (to.r - from.r) * ratio + from.r,
                g: (to.g - from.g) * ratio + from.g,
                b: (to.b - from.b) * ratio + from.b
            };
        }
        /**
         * @param {!Window} a
         * @param {number} val
         * @param {boolean} n
         * @return {?}
         */
        function rnd(a, val, n) {
            var rot;
            return (rot = Math.round(a.h) >= 60 && Math.round(a.h) <= 240 ? n ? Math.round(a.h) - 2 * val : Math.round(a.h) + 2 * val : n ? Math.round(a.h) + 2 * val : Math.round(a.h) - 2 * val) < 0 ? rot = rot + 360 : rot >= 360 && (rot = rot - 360), rot;
        }
        /**
         * @param {!Object} self
         * @param {number} i
         * @param {boolean} a
         * @return {?}
         */
        function pad(self, i, a) {
            return 0 === self.h && 0 === self.s ? self.s : ((value = a ? self.s - .16 * i : 4 === i ? self.s + .16 : self.s + .05 * i) > 1 && (value = 1), a && 5 === i && value > .1 && (value = .1), value < .06 && (value = .06), Number(value.toFixed(2)));
            var value;
        }
        /**
         * @param {!Object} self
         * @param {number} i
         * @param {boolean} a
         * @return {?}
         */
        function reject(self, i, a) {
            var v1;
            return (v1 = a ? self.v + .05 * i : self.v - .15 * i) > 1 && (v1 = 1), Number(v1.toFixed(2));
        }
        /**
         * @param {!Object} event
         * @return {?}
         */
        function merge(event) {
            var btnOptions = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            /** @type {!Array} */
            var values = [];
            var value = parse(event);
            /** @type {number} */
            var val = 5;
            for (; val > 0; val = val - 1) {
                var x = setColor(value);
                var index = append(parse({
                    h: rnd(x, val, true),
                    s: pad(x, val, true),
                    v: reject(x, val, true)
                }));
                values.push(index);
            }
            values.push(append(value));
            /** @type {number} */
            var i = 1;
            for (; i <= 4; i = i + 1) {
                var x = setColor(value);
                var index = append(parse({
                    h: rnd(x, i),
                    s: pad(x, i),
                    v: reject(x, i)
                }));
                values.push(index);
            }
            return "dark" === btnOptions.theme ? navLinksArr.map(function (elem) {
                var index = elem.index;
                var opacity = elem.opacity;
                return append(convert(parse(btnOptions.backgroundColor || "#141414"), parse(values[index]), 100 * opacity));
            }) : values;
        }
        /**
         * @param {?} options
         * @param {?} targets
         * @return {undefined}
         */
        function Spring(options, targets) {
            0;
        }
        /**
         * @param {!Function} type
         * @param {string} options
         * @param {string} error
         * @return {undefined}
         */
        function report(type, options, error) {
            if (!(options || TRACK_ERROR_TO_MESSAGE_MAP[error])) {
                type(false, error);
                /** @type {boolean} */
                TRACK_ERROR_TO_MESSAGE_MAP[error] = true;
            }
        }
        /**
         * @return {?}
         */
        function translate() {
            return !("undefined" === typeof window || !window.document || !window.document.createElement);
        }
        /**
         * @return {?}
         */
        function getMetaNode() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var key = e.mark;
            return key ? key.startsWith("data-") ? key : "data-".concat(key) : idPrefix;
        }
        /**
         * @param {?} item
         * @return {?}
         */
        function walk(item) {
            return item.attachTo ? item.attachTo : document.querySelector("head") || document.body;
        }
        /**
         * @param {string} expression
         * @return {?}
         */
        function next(expression) {
            var ext;
            var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (!translate()) {
                return null;
            }
            var fields;
            /** @type {!Element} */
            var result = document.createElement("style");
            if (null === (ext = options.csp) || void 0 === ext ? void 0 : ext.nonce) {
                result.nonce = null === (fields = options.csp) || void 0 === fields ? void 0 : fields.nonce;
            }
            /** @type {string} */
            result.innerHTML = expression;
            var r = walk(options);
            var text = r.firstChild;
            return options.prepend && r.prepend ? r.prepend(result) : options.prepend && text ? r.insertBefore(result, text) : r.appendChild(result), result;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function method(name) {
            var node = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            var path = walk(node);
            return Array.from(groups.get(path).children).find(function (self) {
                return "STYLE" === self.tagName && self.getAttribute(getMetaNode(node)) === name;
            });
        }
        /**
         * @param {string} text
         * @param {string} a
         * @return {?}
         */
        function request(text, a) {
            var node = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            var set = walk(node);
            if (!groups.has(set)) {
                var label = next("", node);
                var target = label.parentNode;
                groups.set(set, target);
                target.removeChild(label);
            }
            var result = method(a, node);
            if (result) {
                var attributes;
                var args;
                var ctx;
                if ((null === (attributes = node.csp) || void 0 === attributes ? void 0 : attributes.nonce) && result.nonce !== (null === (args = node.csp) || void 0 === args ? void 0 : args.nonce)) {
                    result.nonce = null === (ctx = node.csp) || void 0 === ctx ? void 0 : ctx.nonce;
                }
                return result.innerHTML !== text && (result.innerHTML = text), result;
            }
            var n = next(text, node);
            return n.setAttribute(getMetaNode(node), a), n;
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function toFunction(obj) {
            return "object" === stringify(obj) && "string" === typeof obj.name && "string" === typeof obj.theme && ("object" === stringify(obj.icon) || "function" === typeof obj.icon);
        }
        /**
         * @return {?}
         */
        function plugin() {
            var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return Object.keys(data).reduce(function (map, key) {
                var val = data[key];
                if ("class" === key) {
                    map.className = val;
                    delete map.class;
                } else {
                    map[key] = val;
                }
                return map;
            }, {});
        }
        /**
         * @param {!Object} opts
         * @param {string} name
         * @param {?} props
         * @return {?}
         */
        function set(opts, name, props) {
            return props ? React.createElement(opts.tag, assign(assign({
                key: name
            }, plugin(opts.attrs)), props), (opts.children || []).map(function (pool, rest) {
                return set(pool, "".concat(name, "-").concat(opts.tag, "-").concat(rest));
            })) : React.createElement(opts.tag, assign({
                key: name
            }, plugin(opts.attrs)), (opts.children || []).map(function (pool, rest) {
                return set(pool, "".concat(name, "-").concat(opts.tag, "-").concat(rest));
            }));
        }
        /**
         * @param {!Object} color
         * @return {?}
         */
        function darken(color) {
            return merge(color)[0];
        }
        /**
         * @param {!Object} data
         * @return {?}
         */
        function indexOf(data) {
            return data ? Array.isArray(data) ? data : [data] : [];
        }
        /**
         * @param {!Object} fn
         * @return {?}
         */
        function size(fn) {
            var group = call(indexOf(fn), 2);
            var endtoken = group[0];
            var secondaryColor = group[1];
            return UserEditFormController.setTwoToneColors({
                primaryColor: endtoken,
                secondaryColor: secondaryColor
            });
        }
        /**
         * @param {!Object} b
         * @param {!Object} t
         * @return {?}
         */
        function apply(b, t) {
            var obj = assign({}, b);
            return Array.isArray(t) && t.forEach(function (sourcePropKey) {
                delete obj[sourcePropKey];
            }), obj;
        }
        /**
         * @param {!AudioNode} expr
         * @param {!Function} val
         * @return {undefined}
         */
        function log(expr, val) {
            if (!(expr instanceof val)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        /**
         * @param {!Function} d
         * @param {string} props
         * @return {undefined}
         */
        function t(d, props) {
            /** @type {number} */
            var i = 0;
            for (; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                /** @type {boolean} */
                descriptor.configurable = true;
                if ("value" in descriptor) {
                    /** @type {boolean} */
                    descriptor.writable = true;
                }
                Object.defineProperty(d, descriptor.key, descriptor);
            }
        }
        /**
         * @param {!Function} e
         * @param {!Function} n
         * @param {!Function} a
         * @return {?}
         */
        function g(e, n, a) {
            return n && t(e.prototype, n), a && t(e, a), Object.defineProperty(e, "prototype", {
                writable: false
            }), e;
        }
        /**
         * @param {!Array} options
         * @param {!Object} defaults
         * @return {?}
         */
        function _defaults(options, defaults) {
            return _defaults = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (result, source) {
                return result.__proto__ = source, result;
            }, _defaults(options, defaults);
        }
        /**
         * @param {!Function} options
         * @param {!Object} value
         * @return {undefined}
         */
        function compile(options, value) {
            if ("function" !== typeof value && null !== value) {
                throw new TypeError("Super expression must either be null or a function");
            }
            /** @type {!Object} */
            options.prototype = Object.create(value && value.prototype, {
                constructor: {
                    value: options,
                    writable: true,
                    configurable: true
                }
            });
            Object.defineProperty(options, "prototype", {
                writable: false
            });
            if (value) {
                _defaults(options, value);
            }
        }
        /**
         * @param {!Array} start
         * @return {?}
         */
        function kill(start) {
            return kill = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
            }, kill(start);
        }
        /**
         * @param {number} event
         * @return {?}
         */
        function trigger(event) {
            if (void 0 === event) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return event;
        }
        /**
         * @param {undefined} eventName
         * @param {?} obj
         * @return {?}
         */
        function error(eventName, obj) {
            if (obj && ("object" === stringify(obj) || "function" === typeof obj)) {
                return obj;
            }
            if (void 0 !== obj) {
                throw new TypeError("Derived constructors may only return object or undefined");
            }
            return trigger(eventName);
        }
        /**
         * @param {!Function} e
         * @return {?}
         */
        function fn(e) {
            var t = function () {
                if ("undefined" === typeof Reflect || !Reflect.construct) {
                    return false;
                }
                if (Reflect.construct.sham) {
                    return false;
                }
                if ("function" === typeof Proxy) {
                    return true;
                }
                try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                    })), true;
                } catch (Ic) {
                    return false;
                }
            }();
            return function () {
                var template;
                var target = kill(e);
                if (t) {
                    var ctor = kill(this).constructor;
                    template = Reflect.construct(target, arguments, ctor);
                } else {
                    template = target.apply(this, arguments);
                }
                return error(this, template);
            };
        }
        /**
         * @param {!Function} x
         * @return {?}
         */
        function filter(x) {
            var val = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            /** @type {!Array} */
            var a = [];
            return React.Children.forEach(x, function (item) {
                if (void 0 !== item && null !== item || val.keepEmpty) {
                    if (Array.isArray(item)) {
                        a = a.concat(filter(item));
                    } else {
                        if ((0, store.isFragment)(item) && item.props) {
                            a = a.concat(filter(item.props.children, val));
                        } else {
                            a.push(item);
                        }
                    }
                }
            }), a;
        }
        /**
         * @param {!Function} check
         * @param {!Object} value
         * @param {!Function} resolve
         * @return {?}
         */
        function define(check, value, resolve) {
            var _this = React.useRef({});
            return "value" in _this.current && !resolve(_this.current.condition, value) || (_this.current.value = check(), _this.current.condition = value), _this.current.value;
        }
        /**
         * @param {!Object} obj
         * @param {string} index
         * @return {undefined}
         */
        function onComplete(obj, index) {
            if ("function" === typeof obj) {
                obj(index);
            } else {
                if ("object" === stringify(obj) && obj && "current" in obj) {
                    /** @type {string} */
                    obj.current = index;
                }
            }
        }
        /**
         * @return {?}
         */
        function execute() {
            /** @type {number} */
            var arglen = arguments.length;
            /** @type {!Array} */
            var args = new Array(arglen);
            /** @type {number} */
            var i = 0;
            for (; i < arglen; i++) {
                args[i] = arguments[i];
            }
            /** @type {!Array<?>} */
            var expRecords = args.filter(function (HashService) {
                return HashService;
            });
            return expRecords.length <= 1 ? expRecords[0] : function (name) {
                args.forEach(function (val) {
                    onComplete(val, name);
                });
            };
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function isFunction(obj) {
            var source;
            var value;
            var options = (0, store.isMemo)(obj) ? obj.type.type : obj.type;
            return !("function" === typeof options && !(null === (source = options.prototype) || void 0 === source ? void 0 : source.render)) && !("function" === typeof obj && !(null === (value = obj.prototype) || void 0 === value ? void 0 : value.render));
        }
        /**
         * @param {(Object|string)} el
         * @return {?}
         */
        function u(el) {
            return el instanceof HTMLElement ? el : d.findDOMNode(el);
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function toFloat(value) {
            return parseFloat(value) || 0;
        }
        /**
         * @param {!Object} styles
         * @return {?}
         */
        function getBordersSize(styles) {
            /** @type {!Array} */
            var effects = [];
            /** @type {number} */
            var i = 1;
            for (; i < arguments.length; i++) {
                effects[i - 1] = arguments[i];
            }
            return effects.reduce(function (size, value) {
                return size + toFloat(styles["border-" + value + "-width"]);
            }, 0);
        }
        /**
         * @param {!Object} el
         * @return {?}
         */
        function getHTMLElementContentRect(el) {
            var cx = el.clientWidth;
            var n = el.clientHeight;
            if (!cx && !n) {
                return emptyRect;
            }
            var styles = isElement(el).getComputedStyle(el);
            var paddings = function (css) {
                var aliases = {};
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var dirs = ["top", "right", "bottom", "left"];
                for (; i < dirs.length; i++) {
                    var value = dirs[i];
                    var c = css["padding-" + value];
                    aliases[value] = toFloat(c);
                }
                return aliases;
            }(styles);
            var horizPad = paddings.left + paddings.right;
            var vertPad = paddings.top + paddings.bottom;
            var width = toFloat(styles.width);
            var height = toFloat(styles.height);
            if ("border-box" === styles.boxSizing && (Math.round(width + horizPad) !== cx && (width = width - (getBordersSize(styles, "left", "right") + horizPad)), Math.round(height + vertPad) !== n && (height = height - (getBordersSize(styles, "top", "bottom") + vertPad))), !function (el) {
                return el === isElement(el).document.documentElement;
            }(el)) {
                /** @type {number} */
                var dx = Math.round(width + horizPad) - cx;
                /** @type {number} */
                var m = Math.round(height + vertPad) - n;
                if (1 !== Math.abs(dx)) {
                    /** @type {number} */
                    width = width - dx;
                }
                if (1 !== Math.abs(m)) {
                    /** @type {number} */
                    height = height - m;
                }
            }
            return createRectInit(paddings.left, paddings.top, width, height);
        }
        /**
         * @param {!Object} root
         * @return {?}
         */
        function locate(root) {
            return shouldBeLoved ? skip_user_level(root) ? function (cell) {
                var bbox = cell.getBBox();
                return createRectInit(0, 0, bbox.width, bbox.height);
            }(root) : getHTMLElementContentRect(root) : emptyRect;
        }
        /**
         * @param {number} width
         * @param {number} height
         * @param {number} x
         * @param {number} y
         * @return {?}
         */
        function createRectInit(width, height, x, y) {
            return {
                x: width,
                y: height,
                width: x,
                height: y
            };
        }
        /**
         * @param {!Object} option
         * @return {?}
         */
        function start(option) {
            var data = option.children;
            var isDisabled = option.disabled;
            var item = React.useRef(null);
            var editor = React.useRef(null);
            var i = React.useContext(page);
            /** @type {boolean} */
            var key = "function" === typeof data;
            var value = key ? data(item) : data;
            var e = React.useRef({
                width: -1,
                height: -1,
                offsetWidth: -1,
                offsetHeight: -1
            });
            var open = !key && React.isValidElement(value) && isFunction(value);
            var fn = open ? value.ref : null;
            var iaRef = React.useMemo(function () {
                return execute(fn, item);
            }, [fn, item]);
            var el = React.useRef(option);
            /** @type {!Object} */
            el.current = option;
            var p = React.useCallback(function (c) {
                var t = el.current;
                var checker = t.onResize;
                var b = t.data;
                var con = c.getBoundingClientRect();
                var x = con.width;
                var width = con.height;
                var w = c.offsetWidth;
                var height = c.offsetHeight;
                /** @type {number} */
                var value = Math.floor(x);
                /** @type {number} */
                var val = Math.floor(width);
                if (e.current.width !== value || e.current.height !== val || e.current.offsetWidth !== w || e.current.offsetHeight !== height) {
                    var context = {
                        width: value,
                        height: val,
                        offsetWidth: w,
                        offsetHeight: height
                    };
                    e.current = context;
                    var dim = w === Math.round(x) ? x : w;
                    var h = height === Math.round(width) ? width : height;
                    var a = assign(assign({}, context), {}, {
                        offsetWidth: dim,
                        offsetHeight: h
                    });
                    if (!(null === i || void 0 === i)) {
                        i(a, c, b);
                    }
                    if (checker) {
                        Promise.resolve().then(function () {
                            checker(a, c);
                        });
                    }
                }
            }, []);
            return React.useEffect(function () {
                var i;
                var r;
                var w = u(item.current) || u(editor.current);
                return w && !isDisabled && (i = w, r = p, layers.has(i) || (layers.set(i, new Set), observer.observe(i)), layers.get(i).add(r)), function () {
                    return function (type, name) {
                        if (layers.has(type)) {
                            layers.get(type).delete(name);
                            if (!layers.get(type).size) {
                                observer.unobserve(type);
                                layers.delete(type);
                            }
                        }
                    }(w, p);
                };
            }, [item.current, isDisabled]), React.createElement(ControlledText, {
                ref: editor
            }, open ? React.cloneElement(value, {
                ref: iaRef
            }) : value);
        }
        /**
         * @param {!Object} item
         * @return {?}
         */
        function sync(item) {
            var f = item.children;
            return ("function" === typeof f ? [f] : filter(f)).map(function (n, availableBaseTypes) {
                var previewKey = (null === n || void 0 === n ? void 0 : n.key) || "".concat("rc-observer-key", "-").concat(availableBaseTypes);
                return React.createElement(start, _extends({}, item, {
                    key: previewKey
                }), n);
            });
        }
        /**
         * @param {!Object} node
         * @return {?}
         */
        function calculateStyling(node) {
            var useCache = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            var nodeRef = node.getAttribute("id") || node.getAttribute("data-reactid") || node.getAttribute("name");
            if (useCache && computedStyleCache[nodeRef]) {
                return computedStyleCache[nodeRef];
            }
            var computedStyle = window.getComputedStyle(node);
            var boxSizing = computedStyle.getPropertyValue("box-sizing") || computedStyle.getPropertyValue("-moz-box-sizing") || computedStyle.getPropertyValue("-webkit-box-sizing");
            /** @type {number} */
            var paddingSize = parseFloat(computedStyle.getPropertyValue("padding-bottom")) + parseFloat(computedStyle.getPropertyValue("padding-top"));
            /** @type {number} */
            var borderSize = parseFloat(computedStyle.getPropertyValue("border-bottom-width")) + parseFloat(computedStyle.getPropertyValue("border-top-width"));
            /** @type {string} */
            var sizingStyle = properties.map(function (name) {
                return "".concat(name, ":").concat(computedStyle.getPropertyValue(name));
            }).join(";");
            var nodeInfo = {
                sizingStyle: sizingStyle,
                paddingSize: paddingSize,
                borderSize: borderSize,
                boxSizing: boxSizing
            };
            return useCache && nodeRef && (computedStyleCache[nodeRef] = nodeInfo), nodeInfo;
        }
        /**
         * @param {string} state$
         * @return {?}
         */
        function TribeFilter(state$) {
            var e = React.useRef();
            /** @type {string} */
            e.current = state$;
            var r = React.useCallback(function () {
                var _ref;
                /** @type {number} */
                var arglen = arguments.length;
                /** @type {!Array} */
                var args = new Array(arglen);
                /** @type {number} */
                var i = 0;
                for (; i < arglen; i++) {
                    args[i] = arguments[i];
                }
                return null === (_ref = e.current) || void 0 === _ref ? void 0 : _ref.call.apply(_ref, [e].concat(args));
            }, []);
            return r;
        }
        /**
         * @param {!Function} data
         * @return {?}
         */
        function attr(data) {
            var Drawer = React.useRef(false);
            var group = call(React.useState(data), 2);
            var endtoken = group[0];
            var type = group[1];
            return React.useEffect(function () {
                return Drawer.current = false, function () {
                    /** @type {boolean} */
                    Drawer.current = true;
                };
            }, []), [endtoken, function (num, $state) {
                if (!($state && Drawer.current)) {
                    type(num);
                }
            }];
        }
        /**
         * @param {number} val
         * @return {?}
         */
        function emit(val) {
            return void 0 !== val;
        }
        /**
         * @param {string} value
         * @param {!Object} object
         * @return {?}
         */
        function done(value, object) {
            var ref = object || {};
            var val = ref.defaultValue;
            var x = ref.value;
            var state$ = ref.onChange;
            var fn = ref.postState;
            var result = call(attr(function () {
                var _isArray;
                var path = void 0;
                return emit(x) ? (path = x, _isArray = Array.PROP) : emit(val) ? (path = "function" === typeof val ? val() : val, _isArray = Array.PROP) : (path = "function" === typeof value ? value() : value, _isArray = Array.INNER), [path, _isArray, path];
            }), 2);
            var i = result[0];
            var properties = result[1];
            var key = emit(x) ? x : i[0];
            var value = fn ? fn(key) : key;
            !function (saveNotifs, item) {
                var timestampGenerator = React.useRef(true);
                xLegend(function () {
                    if (!timestampGenerator.current) {
                        return saveNotifs();
                    }
                }, item);
                xLegend(function () {
                    return timestampGenerator.current = false, function () {
                        /** @type {boolean} */
                        timestampGenerator.current = true;
                    };
                }, []);
            }(function () {
                properties(function (e) {
                    var t = call(e, 1)[0];
                    return [x, Array.PROP, t];
                });
            }, [x]);
            var e = React.useRef();
            var locationFilter = TribeFilter(function (fn, rules) {
                properties(function (Default) {
                    var group = call(Default, 3);
                    var key = group[0];
                    var object = group[1];
                    var a = group[2];
                    var result = "function" === typeof fn ? fn(key) : fn;
                    if (result === key) {
                        return Default;
                    }
                    var tag = object === Array.INNER && e.current !== a ? a : key;
                    return [result, Array.INNER, tag];
                }, rules);
            });
            var connections = TribeFilter(state$);
            return _shallowCopyKeys(function () {
                var result = call(i, 3);
                var state = result[0];
                var object = result[1];
                var value = result[2];
                if (state !== value && object === Array.INNER) {
                    connections(state, value);
                    e.current = value;
                }
            }, [i]), [value, locationFilter];
        }
        /**
         * @param {!Array} value
         * @return {?}
         */
        function encode(value) {
            return void 0 === value || null === value ? [] : Array.isArray(value) ? value : [value];
        }
        /**
         * @return {?}
         */
        function test() {
            /**
             * @param {!Function} obj
             * @param {string} key
             * @param {string} value
             * @return {?}
             */
            function callback(obj, key, value) {
                return Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                }), obj[key];
            }
            /**
             * @param {!Function} innerFn
             * @param {!Function} type
             * @param {!Object} self
             * @param {!Array} tryLocsList
             * @return {?}
             */
            function wrap(innerFn, type, self, tryLocsList) {
                var fn = type && type.prototype instanceof obj ? type : obj;
                /** @type {!Object} */
                var generator = Object.create(fn.prototype);
                var context = new Context(tryLocsList || []);
                return generator._invoke = function (innerFn, self, context) {
                    /** @type {string} */
                    var status = "suspendedStart";
                    return function (foo, undefined) {
                        if ("executing" === status) {
                            throw new Error("Generator is already running");
                        }
                        if ("completed" === status) {
                            if ("throw" === foo) {
                                throw undefined;
                            }
                            return start();
                        }
                        /** @type {string} */
                        context.method = foo;
                        /** @type {string} */
                        context.arg = undefined;
                        for (; ;) {
                            var delegate = context.delegate;
                            if (delegate) {
                                var delegateResult = maybeInvokeDelegate(delegate, context);
                                if (delegateResult) {
                                    if (delegateResult === ContinueSentinel) {
                                        continue;
                                    }
                                    return delegateResult;
                                }
                            }
                            if ("next" === context.method) {
                                context.sent = context._sent = context.arg;
                            } else {
                                if ("throw" === context.method) {
                                    if ("suspendedStart" === status) {
                                        throw status = "completed", context.arg;
                                    }
                                    context.dispatchException(context.arg);
                                } else {
                                    if ("return" === context.method) {
                                        context.abrupt("return", context.arg);
                                    }
                                }
                            }
                            /** @type {string} */
                            status = "executing";
                            var record = tryCatch(innerFn, self, context);
                            if ("normal" === record.type) {
                                if (status = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) {
                                    continue;
                                }
                                return {
                                    value: record.arg,
                                    done: context.done
                                };
                            }
                            if ("throw" === record.type) {
                                /** @type {string} */
                                status = "completed";
                                /** @type {string} */
                                context.method = "throw";
                                context.arg = record.arg;
                            }
                        }
                    };
                }(innerFn, self, context), generator;
            }
            /**
             * @param {!Function} fn
             * @param {!Object} obj
             * @param {!Object} arg
             * @return {?}
             */
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (keystableId) {
                    return {
                        type: "throw",
                        arg: keystableId
                    };
                }
            }
            /**
             * @return {undefined}
             */
            function obj() {
            }
            /**
             * @return {undefined}
             */
            function init() {
            }
            /**
             * @return {undefined}
             */
            function proto() {
            }
            /**
             * @param {!Function} terms
             * @return {undefined}
             */
            function check(terms) {
                ["next", "throw", "return"].forEach(function (func) {
                    callback(terms, func, function (args) {
                        return this._invoke(func, args);
                    });
                });
            }
            /**
             * @param {!Object} generator
             * @param {!Promise} config
             * @return {undefined}
             */
            function AsyncIterator(generator, config) {
                /**
                 * @param {string} method
                 * @param {!Object} arg
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if ("throw" !== record.type) {
                        var result = record.arg;
                        var value = result.value;
                        return value && "object" == stringify(value) && hasOwn.call(value, "__await") ? config.resolve(value.__await).then(function (f) {
                            invoke("next", f, resolve, reject);
                        }, function (f) {
                            invoke("throw", f, resolve, reject);
                        }) : config.resolve(value).then(function (e) {
                            /** @type {!Object} */
                            result.value = e;
                            resolve(result);
                        }, function (f) {
                            return invoke("throw", f, resolve, reject);
                        });
                    }
                    reject(record.arg);
                }
                var context;
                /**
                 * @param {string} callback
                 * @param {!Object} args
                 * @return {?}
                 */
                this._invoke = function (callback, args) {
                    /**
                     * @return {?}
                     */
                    function callback() {
                        return new config(function (resolve, reject) {
                            invoke(callback, args, resolve, reject);
                        });
                    }
                    return context = context ? context.then(callback, callback) : callback();
                };
            }
            /**
             * @param {!Object} delegate
             * @param {!Object} context
             * @return {?}
             */
            function maybeInvokeDelegate(delegate, context) {
                var returnMethod = delegate.iterator[context.method];
                if (void 0 === returnMethod) {
                    if (context.delegate = null, "throw" === context.method) {
                        if (delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method)) {
                            return ContinueSentinel;
                        }
                        /** @type {string} */
                        context.method = "throw";
                        /** @type {!TypeError} */
                        context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(returnMethod, delegate.iterator, context.arg);
                if ("throw" === record.type) {
                    return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
                }
                var result = record.arg;
                return result ? result.done ? (context[delegate.resultName] = result.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : result : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
            }
            /**
             * @param {!Array} locs
             * @return {undefined}
             */
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            /**
             * @param {!Object} entry
             * @return {undefined}
             */
            function resetTryEntry(entry) {
                var record = entry.completion || {};
                /** @type {string} */
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            /**
             * @param {!Array} tryLocsList
             * @return {undefined}
             */
            function Context(tryLocsList) {
                /** @type {!Array} */
                this.tryEntries = [{
                    tryLoc: "root"
                }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function values(obj) {
                if (obj) {
                    var fn = obj[key];
                    if (fn) {
                        return fn.call(obj);
                    }
                    if ("function" == typeof obj.next) {
                        return obj;
                    }
                    if (!isNaN(obj.length)) {
                        /** @type {number} */
                        var i = -1;
                        /**
                         * @return {?}
                         */
                        var vert = function next() {
                            for (; ++i < obj.length;) {
                                if (hasOwn.call(obj, i)) {
                                    return next.value = obj[i], next.done = false, next;
                                }
                            }
                            return next.value = void 0, next.done = true, next;
                        };
                        return vert.next = vert;
                    }
                }
                return {
                    next: start
                };
            }
            /**
             * @return {?}
             */
            function start() {
                return {
                    value: void 0,
                    done: true
                };
            }
            /**
             * @return {?}
             */
            test = function () {
                return runtime;
            };
            var runtime = {};
            var prop = Object.prototype;
            /** @type {function(this:Object, *): boolean} */
            var hasOwn = prop.hasOwnProperty;
            /** @type {(function(string=): ?|{})} */
            var $Symbol = "function" == typeof Symbol ? Symbol : {};
            var key = $Symbol.iterator || "@@iterator";
            var removeCritText = $Symbol.asyncIterator || "@@asyncIterator";
            var props = $Symbol.toStringTag || "@@toStringTag";
            try {
                callback({}, "");
            } catch (N) {
                /**
                 * @param {!Function} obj
                 * @param {string} key
                 * @param {(!Function|string)} value
                 * @return {?}
                 */
                callback = function (obj, key, value) {
                    return obj[key] = value;
                };
            }
            /** @type {function(!Function, !Function, !Object, !Array): ?} */
            runtime.wrap = wrap;
            var ContinueSentinel = {};
            var value = {};
            callback(value, key, function () {
                return this;
            });
            /** @type {function(!Object): (Object|null)} */
            var getProto = Object.getPrototypeOf;
            /** @type {(Object|null)} */
            var name = getProto && getProto(getProto(values([])));
            if (name && name !== prop && hasOwn.call(name, key)) {
                /** @type {!Object} */
                value = name;
            }
            /** @type {!Object} */
            var func = proto.prototype = obj.prototype = Object.create(value);
            return init.prototype = proto, callback(func, "constructor", proto), callback(proto, "constructor", init), init.displayName = callback(proto, props, "GeneratorFunction"), runtime.isGeneratorFunction = function (obj) {
                /** @type {(!Function|boolean|null)} */
                var fn = "function" == typeof obj && obj.constructor;
                return !!fn && (fn === init || "GeneratorFunction" === (fn.displayName || fn.name));
            }, runtime.mark = function (obj) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(obj, proto) : (obj.__proto__ = proto, callback(obj, props, "GeneratorFunction")), obj.prototype = Object.create(func), obj;
            }, runtime.awrap = function (arg) {
                return {
                    __await: arg
                };
            }, check(AsyncIterator.prototype), callback(AsyncIterator.prototype, removeCritText, function () {
                return this;
            }), runtime.AsyncIterator = AsyncIterator, runtime.async = function (innerFn, outerFn, self, tryLocsList, value) {
                if (void 0 === value) {
                    /** @type {function(new:Promise, function(function((IThenable<TYPE>|TYPE|Thenable|null)=): ?, function(*=): ?): ?): ?} */
                    value = Promise;
                }
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), value);
                return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
                    return result.done ? result.value : iter.next();
                });
            }, check(func), callback(func, props, "Generator"), callback(func, key, function () {
                return this;
            }), callback(func, "toString", function () {
                return "[object Generator]";
            }), runtime.keys = function (obj) {
                /** @type {!Array} */
                var t = [];
                var p;
                for (p in obj) {
                    t.push(p);
                }
                return t.reverse(), function handler() {
                    for (; t.length;) {
                        var d = t.pop();
                        if (d in obj) {
                            return handler.value = d, handler.done = false, handler;
                        }
                    }
                    return handler.done = true, handler;
                };
            }, runtime.values = values, Context.prototype = {
                constructor: Context,
                reset: function (noalert) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !noalert) {
                        var property;
                        for (property in this) {
                            if ("t" === property.charAt(0) && hasOwn.call(this, property) && !isNaN(+property.slice(1))) {
                                this[property] = void 0;
                            }
                        }
                    }
                },
                stop: function () {
                    /** @type {boolean} */
                    this.done = true;
                    var record = this.tryEntries[0].completion;
                    if ("throw" === record.type) {
                        throw record.arg;
                    }
                    return this.rval;
                },
                dispatchException: function (exception) {
                    /**
                     * @param {string} callback
                     * @param {!Function} download
                     * @return {?}
                     */
                    function handle(callback, download) {
                        return record.type = "throw", record.arg = exception, t.next = callback, download && (t.method = "next", t.arg = void 0), !!download;
                    }
                    if (this.done) {
                        throw exception;
                    }
                    var t = this;
                    /** @type {number} */
                    var i = this.tryEntries.length - 1;
                    for (; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if ("root" === entry.tryLoc) {
                            return handle("end");
                        }
                        if (entry.tryLoc <= this.prev) {
                            /** @type {boolean} */
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            /** @type {boolean} */
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }
                            } else {
                                if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    }
                                } else {
                                    if (!hasFinally) {
                                        throw new Error("try statement without catch or finally");
                                    }
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }
                                }
                            }
                        }
                    }
                },
                abrupt: function (type, arg) {
                    /** @type {number} */
                    var i = this.tryEntries.length - 1;
                    for (; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                        /** @type {null} */
                        finallyEntry = null;
                    }
                    var record = finallyEntry ? finallyEntry.completion : {};
                    return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
                },
                complete: function (record, afterLoc) {
                    if ("throw" === record.type) {
                        throw record.arg;
                    }
                    return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
                },
                finish: function (finallyLoc) {
                    /** @type {number} */
                    var i = this.tryEntries.length - 1;
                    for (; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
                        }
                    }
                },
                catch: function (callback) {
                    /** @type {number} */
                    var i = this.tryEntries.length - 1;
                    for (; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === callback) {
                            var record = entry.completion;
                            if ("throw" === record.type) {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function (iterable, resultName, nextLoc) {
                    return this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
                }
            }, runtime;
        }
        /**
         * @param {!Object} array
         * @param {!Function} fn
         * @param {!Function} op
         * @param {!Function} f
         * @param {!Function} o
         * @param {string} type
         * @param {!Object} value
         * @return {?}
         */
        function insert(array, fn, op, f, o, type, value) {
            try {
                var m = array[type](value);
                var u = m.value;
            } catch (win) {
                return void op(win);
            }
            if (m.done) {
                fn(u);
            } else {
                Promise.resolve(u).then(f, o);
            }
        }
        /**
         * @param {!Function} argv
         * @return {?}
         */
        function slice(argv) {
            return function () {
                var arg = this;
                /** @type {!Arguments} */
                var a = arguments;
                return new Promise(function (callback, html) {
                    /**
                     * @param {!Object} c
                     * @return {undefined}
                     */
                    function range(c) {
                        insert(value, callback, html, range, f, "next", c);
                    }
                    /**
                     * @param {!Object} c
                     * @return {undefined}
                     */
                    function f(c) {
                        insert(value, callback, html, range, f, "throw", c);
                    }
                    var value = argv.apply(arg, a);
                    range(void 0);
                });
            };
        }
        /**
         * @return {?}
         */
        function extend() {
            return extend = Object.assign ? Object.assign.bind() : function (r) {
                /** @type {number} */
                var a = 1;
                for (; a < arguments.length; a++) {
                    var k = arguments[a];
                    var i;
                    for (i in k) {
                        if (Object.prototype.hasOwnProperty.call(k, i)) {
                            r[i] = k[i];
                        }
                    }
                }
                return r;
            }, extend.apply(this, arguments);
        }
        /**
         * @param {!Object} context
         * @return {?}
         */
        function createContext(context) {
            return createContext = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (a) {
                return a.__proto__ || Object.getPrototypeOf(a);
            }, createContext(context);
        }
        /**
         * @param {!Function} args
         * @param {!Object} data
         * @return {?}
         */
        function iter(args, data) {
            return iter = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (a, l) {
                return a.__proto__ = l, a;
            }, iter(args, data);
        }
        /**
         * @return {?}
         */
        function is() {
            if ("undefined" === typeof Reflect || !Reflect.construct) {
                return false;
            }
            if (Reflect.construct.sham) {
                return false;
            }
            if ("function" === typeof Proxy) {
                return true;
            }
            try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {
                })), true;
            } catch (Ic) {
                return false;
            }
        }
        /**
         * @param {!Object} id
         * @param {!Array} istop
         * @param {?} ostart
         * @return {?}
         */
        function map(id, istop, ostart) {
            return map = is() ? Reflect.construct.bind() : function (objToTest, passedArguments, e) {
                /** @type {!Array} */
                var or_queue = [null];
                or_queue.push.apply(or_queue, passedArguments);
                var t = new (Function.bind.apply(objToTest, or_queue));
                return e && iter(t, e.prototype), t;
            }, map.apply(null, arguments);
        }
        /**
         * @param {string} type
         * @return {?}
         */
        function send(type) {
            /** @type {(Map|undefined)} */
            var result = "function" === typeof Map ? new Map : void 0;
            return send = function (data) {
                /**
                 * @return {?}
                 */
                function v() {
                    return map(data, arguments, createContext(this).constructor);
                }
                if (null === data || (n = data, -1 === Function.toString.call(n).indexOf("[native code]"))) {
                    return data;
                }
                var n;
                if ("function" !== typeof data) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                if ("undefined" !== typeof result) {
                    if (result.has(data)) {
                        return result.get(data);
                    }
                    result.set(data, v);
                }
                return v.prototype = Object.create(data.prototype, {
                    constructor: {
                        value: v,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                }), iter(v, data);
            }, send(type);
        }
        /**
         * @param {!Array} message
         * @return {?}
         */
        function ok(message) {
            if (!message || !message.length) {
                return null;
            }
            var priorized = {};
            return message.forEach(function (s) {
                var p = s.field;
                priorized[p] = priorized[p] || [];
                priorized[p].push(s);
            }), priorized;
        }
        /**
         * @param {!Object} source
         * @return {?}
         */
        function format(source) {
            /** @type {number} */
            var length = arguments.length;
            /** @type {!Array} */
            var n = new Array(length > 1 ? length - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (; i < length; i++) {
                n[i - 1] = arguments[i];
            }
            /** @type {number} */
            var j = 0;
            /** @type {number} */
            var count = n.length;
            if ("function" === typeof source) {
                return source.apply(null, n);
            }
            if ("string" === typeof source) {
                /** @type {string} */
                var label = source.replace(level, function (match) {
                    if ("%%" === match) {
                        return "%";
                    }
                    if (j >= count) {
                        return match;
                    }
                    switch (match) {
                        case "%s":
                            return String(n[j++]);
                        case "%d":
                            return Number(n[j++]);
                        case "%j":
                            try {
                                return JSON.stringify(n[j++]);
                            } catch (t) {
                                return "[Circular]";
                            }
                            break;
                        default:
                            return match;
                    }
                });
                return label;
            }
            return source;
        }
        /**
         * @param {?} value
         * @param {string} type
         * @return {?}
         */
        function getType(value, type) {
            return void 0 === value || null === value || (!("array" !== type || !Array.isArray(value) || value.length) || !(!function (undefined) {
                return "string" === undefined || "url" === undefined || "hex" === undefined || "email" === undefined || "date" === undefined || "pattern" === undefined;
            }(type) || "string" !== typeof value || value));
        }
        /**
         * @param {!NodeList} e
         * @param {!Function} callback
         * @param {!Function} body
         * @return {undefined}
         */
        function forEach(e, callback, body) {
            /** @type {number} */
            var lCursor = 0;
            var insertCount = e.length;
            !function group(context) {
                if (context && context.length) {
                    body(context);
                } else {
                    var i = lCursor;
                    lCursor = lCursor + 1;
                    if (i < insertCount) {
                        callback(e[i], group);
                    } else {
                        body([]);
                    }
                }
            }([]);
        }
        /**
         * @param {undefined} b
         * @param {!Object} names
         * @param {!Function} obj
         * @param {!Function} test
         * @param {?} value
         * @return {?}
         */
        function off(b, names, obj, test, value) {
            if (names.first) {
                /** @type {!Promise} */
                var p2 = new Promise(function (i18n, done) {
                    var i = function (e) {
                        /** @type {!Array} */
                        var myHooks = [];
                        return Object.keys(e).forEach(function (childProp) {
                            myHooks.push.apply(myHooks, e[childProp] || []);
                        }), myHooks;
                    }(b);
                    forEach(i, obj, function (e) {
                        return test(e), e.length ? done(new PluginError(e, ok(e))) : i18n(value);
                    });
                });
                return p2.catch(function (result) {
                    return result;
                }), p2;
            }
            var tableborder = true === names.firstFields ? Object.keys(b) : names.firstFields || [];
            /** @type {!Array<string>} */
            var boardList = Object.keys(b);
            /** @type {number} */
            var includesLength = boardList.length;
            /** @type {number} */
            var includesLoaded = 0;
            /** @type {!Array} */
            var e = [];
            /** @type {!Promise} */
            var p2 = new Promise(function ($, callback) {
                /**
                 * @param {!Array} detail
                 * @return {?}
                 */
                var done = function (detail) {
                    if (e.push.apply(e, detail), ++includesLoaded === includesLength) {
                        return test(e), e.length ? callback(new PluginError(e, ok(e))) : $(value);
                    }
                };
                if (!boardList.length) {
                    test(e);
                    $(value);
                }
                boardList.forEach(function (r) {
                    var value = b[r];
                    if (-1 !== tableborder.indexOf(r)) {
                        forEach(value, obj, done);
                    } else {
                        (function (o, func, callback) {
                            /**
                             * @param {number} options
                             * @return {undefined}
                             */
                            function cb(options) {
                                result.push.apply(result, options || []);
                                if (++nextRand === max) {
                                    callback(result);
                                }
                            }
                            /** @type {!Array} */
                            var result = [];
                            /** @type {number} */
                            var nextRand = 0;
                            var max = o.length;
                            o.forEach(function (ldata) {
                                func(ldata, cb);
                            });
                        })(value, obj, done);
                    }
                });
            });
            return p2.catch(function (result) {
                return result;
            }), p2;
        }
        /**
         * @param {?} target
         * @param {undefined} key
         * @return {?}
         */
        function inject(target, key) {
            return function (value) {
                var oldValue;
                var o;
                return oldValue = target.fullFields ? function (initial_value, grams) {
                    /** @type {string} */
                    var result = initial_value;
                    /** @type {number} */
                    var i = 0;
                    for (; i < grams.length; i++) {
                        if (void 0 == result) {
                            return result;
                        }
                        result = result[grams[i]];
                    }
                    return result;
                }(key, target.fullFields) : key[value.field || target.fullField], (o = value) && void 0 !== o.message ? (value.field = value.field || target.fullField, value.fieldValue = oldValue, value) : {
                    message: "function" === typeof value ? value() : value,
                    fieldValue: oldValue,
                    field: value.field || target.fullField
                };
            };
        }
        /**
         * @param {!Object} result
         * @param {!Object} data
         * @return {?}
         */
        function expect(result, data) {
            if (data) {
                var key;
                for (key in data) {
                    if (data.hasOwnProperty(key)) {
                        var object = data[key];
                        if ("object" === typeof object && "object" === typeof result[key]) {
                            result[key] = extend({}, result[key], object);
                        } else {
                            result[key] = object;
                        }
                    }
                }
            }
            return result;
        }
        /**
         * @return {?}
         */
        function now() {
            return {
                default: "Validation error on field %s",
                required: "%s is required",
                enum: "%s must be one of %s",
                whitespace: "%s cannot be empty",
                date: {
                    format: "%s date %s is invalid for format %s",
                    parse: "%s date could not be parsed, %s is invalid ",
                    invalid: "%s date %s is invalid"
                },
                types: {
                    string: "%s is not a %s",
                    method: "%s is not a %s (function)",
                    array: "%s is not an %s",
                    object: "%s is not an %s",
                    number: "%s is not a %s",
                    date: "%s is not a %s",
                    boolean: "%s is not a %s",
                    integer: "%s is not an %s",
                    float: "%s is not a %s",
                    regexp: "%s is not a valid %s",
                    email: "%s is not a valid %s",
                    url: "%s is not a valid %s",
                    hex: "%s is not a valid %s"
                },
                string: {
                    len: "%s must be exactly %s characters",
                    min: "%s must be at least %s characters",
                    max: "%s cannot be longer than %s characters",
                    range: "%s must be between %s and %s characters"
                },
                number: {
                    len: "%s must equal %s",
                    min: "%s cannot be less than %s",
                    max: "%s cannot be greater than %s",
                    range: "%s must be between %s and %s"
                },
                array: {
                    len: "%s must be exactly %s in length",
                    min: "%s cannot be less than %s in length",
                    max: "%s cannot be greater than %s in length",
                    range: "%s must be between %s and %s in length"
                },
                pattern: {
                    mismatch: "%s value %s does not match pattern %s"
                },
                clone: function () {
                    /** @type {*} */
                    var e = JSON.parse(JSON.stringify(this));
                    return e.clone = this.clone, e;
                }
            };
        }
        /**
         * @param {!Object} value
         * @param {!NodeList} line
         * @return {?}
         */
        function access(value, line) {
            /** @type {!Object} */
            var result = value;
            /** @type {number} */
            var i = 0;
            for (; i < line.length; i = i + 1) {
                if (null === result || void 0 === result) {
                    return;
                }
                result = result[line[i]];
            }
            return result;
        }
        /**
         * @param {!Object} value
         * @param {string} url
         * @param {!Array} token
         * @param {string} cb
         * @return {?}
         */
        function tokenize(value, url, token, cb) {
            if (!url.length) {
                return token;
            }
            var name;
            var igt;
            var charListNotLatin = fireEvent(name = url) || isNull(name) || toString(name) || getattr();
            var fieldLabel = charListNotLatin[0];
            var selector = charListNotLatin.slice(1);
            return igt = value || "number" !== typeof fieldLabel ? Array.isArray(value) ? resolve(value) : assign({}, value) : [], cb && void 0 === token && 1 === selector.length ? delete igt[fieldLabel][selector[0]] : igt[fieldLabel] = tokenize(igt[fieldLabel], selector, token, cb), igt;
        }
        /**
         * @param {!Window} value
         * @param {string} options
         * @param {!Array} template
         * @return {?}
         */
        function sprintf(value, options, template) {
            var data = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return options.length && data && void 0 === template && !access(value, options.slice(0, -1)) ? value : tokenize(value, options, template, data);
        }
        /**
         * @param {!Object} o
         * @return {?}
         */
        function find(o) {
            return Array.isArray(o) ? function (array1) {
                return array1.map(function (e) {
                    return find(e);
                });
            }(o) : "object" === stringify(o) && null !== o ? function (a) {
                if (Object.getPrototypeOf(a) === Object.prototype) {
                    var toReplace = {};
                    var i;
                    for (i in a) {
                        toReplace[i] = find(a[i]);
                    }
                    return toReplace;
                }
                return a;
            }(o) : o;
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function val(type) {
            return encode(type);
        }
        /**
         * @param {!Object} name
         * @param {?} options
         * @return {?}
         */
        function html(name, options) {
            return access(name, options);
        }
        /**
         * @param {!Window} value
         * @param {!Array} key
         * @param {!Array} val
         * @return {?}
         */
        function func(value, key, val) {
            var style = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            var text = sprintf(value, key, val, style);
            return text;
        }
        /**
         * @param {!Object} parent
         * @param {!Array} buttons
         * @return {?}
         */
        function change(parent, buttons) {
            var ret = {};
            return buttons.forEach(function (state) {
                var data = html(parent, state);
                ret = func(ret, state, data);
            }), ret;
        }
        /**
         * @param {!Object} data
         * @param {(Node|NodeList|string)} callback
         * @return {?}
         */
        function exec(data, callback) {
            return data && data.some(function (st) {
                return ready(st, callback);
            });
        }
        /**
         * @param {!Object} o
         * @return {?}
         */
        function isPlainObject(o) {
            return "object" === stringify(o) && null !== o && Object.getPrototypeOf(o) === Object.prototype;
        }
        /**
         * @param {!Object} value
         * @param {!Object} key
         * @return {?}
         */
        function wrap(value, key) {
            var target = Array.isArray(value) ? resolve(value) : assign({}, value);
            return key ? (Object.keys(key).forEach(function (name) {
                var val = target[name];
                var value = key[name];
                var formatter = isPlainObject(val) && isPlainObject(value);
                target[name] = formatter ? wrap(val, value || {}) : toArray(value);
            }), target) : target;
        }
        /**
         * @param {?} parent
         * @return {?}
         */
        function getValue(parent) {
            /** @type {number} */
            var length = arguments.length;
            /** @type {!Array} */
            var n = new Array(length > 1 ? length - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (; i < length; i++) {
                n[i - 1] = arguments[i];
            }
            return n.reduce(function (e, redraw) {
                return wrap(e, redraw);
            }, parent);
        }
        /**
         * @param {!Array} s
         * @param {!NodeList} c
         * @return {?}
         */
        function ready(s, c) {
            return !(!s || !c || s.length !== c.length) && s.every(function (a, n) {
                return c[n] === a;
            });
        }
        /**
         * @param {undefined} key
         * @return {?}
         */
        function predicate(key) {
            var event = arguments.length <= 1 ? void 0 : arguments[1];
            return event && event.target && "object" === stringify(event.target) && key in event.target ? event.target[key] : event;
        }
        /**
         * @param {string} b
         * @param {number} i
         * @param {number} n
         * @return {?}
         */
        function transform(b, i, n) {
            var len = b.length;
            if (i < 0 || i >= len || n < 0 || n >= len) {
                return b;
            }
            var k = b[i];
            /** @type {number} */
            var r = i - n;
            return r > 0 ? [].concat(resolve(b.slice(0, n)), [k], resolve(b.slice(n, i)), resolve(b.slice(i + 1, len))) : r < 0 ? [].concat(resolve(b.slice(0, i)), resolve(b.slice(i + 1, n + 1)), [k], resolve(b.slice(n + 1, len))) : b;
        }
        /**
         * @param {string} text
         * @param {?} obj
         * @return {?}
         */
        function toJSLiteral(text, obj) {
            return text.replace(/\$\{\w+\}/g, function (headerPlusSegments) {
                var arrcount = headerPlusSegments.slice(2, -1);
                return obj[arrcount];
            });
        }
        /**
         * @param {string} s
         * @param {?} base
         * @param {!Object} value
         * @param {number} position
         * @param {?} string
         * @return {?}
         */
        function startsWith(s, base, value, position, string) {
            return take.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function take() {
            return take = slice(test().mark(function init(key, options, context, item, left) {
                var data;
                var validator;
                var index;
                var self;
                var value;
                var newHashes;
                var moduleList;
                var result;
                var ret;
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return delete (data = assign({}, context)).ruleIndex, data.validator && (validator = data.validator, data.validator = function () {
                                    try {
                                        return validator.apply(void 0, arguments);
                                    } catch (e) {
                                        return console.error(e), Promise.reject(image);
                                    }
                                }), index = null, data && "array" === data.type && data.defaultField && (index = data.defaultField, delete data.defaultField), self = new Buffer(debug({}, key, [data])), value = getValue({}, schema, item.validateMessages), self.messages(value), newHashes = [], _context.prev = 9, _context.next = 12, Promise.resolve(self.validate(debug({}, key, options), assign({}, item)));
                            case 12:
                                /** @type {number} */
                                _context.next = 17;
                                break;
                            case 14:
                                /** @type {number} */
                                _context.prev = 14;
                                _context.t0 = _context.catch(9);
                                if (_context.t0.errors) {
                                    newHashes = _context.t0.errors.map(function (data, i) {
                                        var content = data.message;
                                        var child = content === image ? value.default : content;
                                        return React.isValidElement(child) ? React.cloneElement(child, {
                                            key: "error_".concat(i)
                                        }) : child;
                                    });
                                }
                            case 17:
                                if (newHashes.length || !index) {
                                    /** @type {number} */
                                    _context.next = 22;
                                    break;
                                }
                                return _context.next = 20, Promise.all(options.map(function (on, nodeList) {
                                    return startsWith("".concat(key, ".").concat(nodeList), on, index, item, left);
                                }));
                            case 20:
                                return moduleList = _context.sent, _context.abrupt("return", moduleList.reduce(function (e, hosts) {
                                    return [].concat(resolve(e), resolve(hosts));
                                }, []));
                            case 22:
                                return result = assign(assign({}, context), {}, {
                                    name: key,
                                    enum: (context.enum || []).join(", ")
                                }, left), ret = newHashes.map(function (a) {
                                    return "string" === typeof a ? toJSLiteral(a, result) : a;
                                }), _context.abrupt("return", ret);
                            case 25:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, init, null, [[9, 14]]);
            })), take.apply(this, arguments);
        }
        /**
         * @param {!Array} path
         * @param {?} target
         * @param {?} ext
         * @param {number} callback
         * @param {(number|string)} where
         * @param {?} url
         * @return {?}
         */
        function install(path, target, ext, callback, where, url) {
            var nextPromise;
            var hash = path.join(".");
            var palettes = ext.map(function (config, ruleIndex) {
                var fn = config.validator;
                var options = assign(assign({}, config), {}, {
                    ruleIndex: ruleIndex
                });
                return fn && (options.validator = function (opts, isSelection, done) {
                    /** @type {boolean} */
                    var receive = false;
                    var obj = fn(opts, isSelection, function () {
                        /** @type {number} */
                        var count = arguments.length;
                        /** @type {!Array} */
                        var ret = new Array(count);
                        /** @type {number} */
                        var i = 0;
                        for (; i < count; i++) {
                            ret[i] = arguments[i];
                        }
                        Promise.resolve().then(function () {
                            assert(!receive, "Your validator function has already return a promise. `callback` will be ignored.");
                            if (!receive) {
                                done.apply(void 0, ret);
                            }
                        });
                    });
                    receive = obj && "function" === typeof obj.then && "function" === typeof obj.catch;
                    assert(receive, "`callback` is deprecated. Please return a promise instead.");
                    if (receive) {
                        obj.then(function () {
                            done();
                        }).catch(function (err) {
                            done(err || " ");
                        });
                    }
                }), options;
            }).sort(function (p, t) {
                var textCompactionData = p.warningOnly;
                var ruleIndex = p.ruleIndex;
                var rhbn = t.warningOnly;
                var lastEndItem = t.ruleIndex;
                return !!textCompactionData === !!rhbn ? ruleIndex - lastEndItem : textCompactionData ? 1 : -1;
            });
            if (true === where) {
                /** @type {!Promise} */
                nextPromise = new Promise(function () {
                    var init = slice(test().mark(function parse(formatter, parser) {
                        var i;
                        var result;
                        var data;
                        return test().wrap(function (_context10) {
                            for (; ;) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        /** @type {number} */
                                        i = 0;
                                    case 1:
                                        if (!(i < palettes.length)) {
                                            /** @type {number} */
                                            _context10.next = 12;
                                            break;
                                        }
                                        return result = palettes[i], _context10.next = 5, startsWith(hash, target, result, callback, url);
                                    case 5:
                                        if (!(data = _context10.sent).length) {
                                            /** @type {number} */
                                            _context10.next = 9;
                                            break;
                                        }
                                        return parser([{
                                            errors: data,
                                            rule: result
                                        }]), _context10.abrupt("return");
                                    case 9:
                                        /** @type {number} */
                                        i = i + 1;
                                        /** @type {number} */
                                        _context10.next = 1;
                                        break;
                                    case 12:
                                        formatter([]);
                                    case 13:
                                    case "end":
                                        return _context10.stop();
                                }
                            }
                        }, parse);
                    }));
                    return function (canCreateDiscussions, n) {
                        return init.apply(this, arguments);
                    };
                }());
            } else {
                var tableName = palettes.map(function (type) {
                    return startsWith(hash, target, type, callback, url).then(function (data) {
                        return {
                            errors: data,
                            rule: type
                        };
                    });
                });
                nextPromise = (where ? function (identifier) {
                    return fns.apply(this, arguments);
                }(tableName) : function (identifier) {
                    return highlight.apply(this, arguments);
                }(tableName)).then(function (fnError) {
                    return Promise.reject(fnError);
                });
            }
            return nextPromise.catch(function (results) {
                return results;
            }), nextPromise;
        }
        /**
         * @return {?}
         */
        function highlight() {
            return (highlight = slice(test().mark(function start(t) {
                return test().wrap(function (context$5$0) {
                    for (; ;) {
                        switch (context$5$0.prev = context$5$0.next) {
                            case 0:
                                return context$5$0.abrupt("return", Promise.all(t).then(function (e) {
                                    var _ref;
                                    return (_ref = []).concat.apply(_ref, resolve(e));
                                }));
                            case 1:
                            case "end":
                                return context$5$0.stop();
                        }
                    }
                }, start);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function fns() {
            return (fns = slice(test().mark(function run(me) {
                var length;
                return test().wrap(function (_context2) {
                    for (; ;) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return length = 0, _context2.abrupt("return", new Promise(function (callback) {
                                    me.forEach(function (actionAsPromise) {
                                        actionAsPromise.then(function (foo) {
                                            if (foo.errors.length) {
                                                callback([foo]);
                                            }
                                            if ((length = length + 1) === me.length) {
                                                callback([]);
                                            }
                                        });
                                    });
                                }));
                            case 2:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, run);
            }))).apply(this, arguments);
        }
        /**
         * @param {?} fn
         * @param {?} value
         * @param {?} data
         * @param {?} name
         * @param {?} context
         * @param {!Object} options
         * @return {?}
         */
        function text(fn, value, data, name, context, options) {
            return "function" === typeof fn ? fn(value, data, "source" in options ? {
                source: options.source
            } : {}) : name !== context;
        }
        /**
         * @param {!Object} _
         * @return {?}
         */
        function fill(_) {
            return _.map(function (manifest) {
                return "".concat(stringify(manifest), ":").concat(manifest);
            }).join(ENSURE_ID_SEP);
        }
        /**
         * @param {?} dom
         * @return {?}
         */
        function stringifyDOM(dom) {
            try {
                return JSON.stringify(dom);
            } catch (t) {
                return Math.random();
            }
        }
        /**
         * @param {string} key
         * @param {string} type
         * @param {string} name
         * @return {?}
         */
        function handle(key, type, name) {
            var err;
            return require()((debug(err = {}, "".concat(key, "-status-success"), "success" === type), debug(err, "".concat(key, "-status-warning"), "warning" === type), debug(err, "".concat(key, "-status-error"), "error" === type), debug(err, "".concat(key, "-status-validating"), "validating" === type), debug(err, "".concat(key, "-has-feedback"), name), err));
        }
        /**
         * @param {!Function} value
         * @param {string} fn
         * @return {?}
         */
        function $(value, fn) {
            return function (value, a, fn) {
                return isString(value) ? React.cloneElement(value, "function" === typeof fn ? fn(value.props || {}) : fn) : a;
            }(value, value, fn);
        }
        /**
         * @param {!Object} children
         * @return {?}
         */
        function renderInputGroup(children) {
            return !(!children.addonBefore && !children.addonAfter);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function processFile(options) {
            return !!(options.prefix || options.suffix || options.allowClear);
        }
        /**
         * @param {!Object} e
         * @param {!Object} value
         * @param {?} callback
         * @param {number} id
         * @return {?}
         */
        function serialize(e, value, callback, id) {
            if (callback) {
                /** @type {!Object} */
                var num = value;
                if ("click" === value.type) {
                    var a = e.cloneNode(true);
                    return num = Object.create(value, {
                        target: {
                            value: a
                        },
                        currentTarget: {
                            value: a
                        }
                    }), a.value = "", void callback(num);
                }
                if (void 0 !== id) {
                    return num = Object.create(value, {
                        target: {
                            value: e
                        },
                        currentTarget: {
                            value: e
                        }
                    }), e.value = id, void callback(num);
                }
                callback(num);
            }
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function copyObjectToDepth(obj) {
            return "undefined" === typeof obj || null === obj ? "" : String(obj);
        }
        /**
         * @param {!Object} item
         * @param {!Object} value
         * @param {?} e
         * @param {number} p
         * @return {?}
         */
        function cb(item, value, e, p) {
            if (e) {
                /** @type {!Object} */
                var o = value;
                if ("click" === value.type) {
                    var a = item.cloneNode(true);
                    return o = Object.create(value, {
                        target: {
                            value: a
                        },
                        currentTarget: {
                            value: a
                        }
                    }), a.value = "", void e(o);
                }
                if (void 0 !== p) {
                    return o = Object.create(value, {
                        target: {
                            value: item
                        },
                        currentTarget: {
                            value: item
                        }
                    }), item.value = p, void e(o);
                }
                e(o);
            }
        }
        /**
         * @param {number} message
         * @param {?} value
         * @return {?}
         */
        function handler(message, value) {
            return resolve(message || "").slice(0, value).join("");
        }
        /**
         * @param {boolean} res
         * @param {number} message
         * @param {number} value
         * @param {?} action
         * @return {?}
         */
        function setTimeout(res, message, value, action) {
            /** @type {number} */
            var result = value;
            return res ? result = handler(value, action) : resolve(message || "").length < value.length && resolve(value || "").length > action && (result = message), result;
        }
        /**
         * @param {!Object} y
         * @return {undefined}
         */
        function y(y) {
            frame.delete(y);
        }
        /**
         * @param {!Function} fn
         * @return {?}
         */
        function $timeout(fn) {
            /**
             * @param {number} a
             * @return {undefined}
             */
            function callback(a) {
                if (0 === a) {
                    y(value);
                    fn();
                } else {
                    var result = step(function () {
                        callback(a - 1);
                    });
                    frame.set(value, result);
                }
            }
            var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
            var value = cont = cont + 1;
            return callback(context), value;
        }
        /**
         * @param {!Function} handler
         * @return {?}
         */
        function throttle(handler) {
            var timer = (0, React.useRef)();
            var timestampGenerator = (0, React.useRef)(false);
            return (0, React.useEffect)(function () {
                return timestampGenerator.current = false, function () {
                    /** @type {boolean} */
                    timestampGenerator.current = true;
                    $timeout.cancel(timer.current);
                };
            }, []), function () {
                /** @type {number} */
                var arglen = arguments.length;
                /** @type {!Array} */
                var args = new Array(arglen);
                /** @type {number} */
                var i = 0;
                for (; i < arglen; i++) {
                    args[i] = arguments[i];
                }
                if (!timestampGenerator.current) {
                    $timeout.cancel(timer.current);
                    timer.current = $timeout(function () {
                        handler.apply(void 0, args);
                    });
                }
            };
        }
        /**
         * @param {!Object} options
         * @param {string} layer
         * @return {?}
         */
        function bind(options, layer) {
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            function handler(e) {
                if (!disabled) {
                    onClick(e);
                }
            }
            var _ref;
            var _name = options.prefixCls;
            var node = options.id;
            var active = options.active;
            var o = options.tab;
            var label = o.key;
            var items = o.tab;
            var disabled = o.disabled;
            var nodes = o.closeIcon;
            var el = options.closable;
            var render = options.renderWrapper;
            var add = options.removeAriaLabel;
            var self = options.editable;
            var onClick = options.onClick;
            var data = options.onRemove;
            var onFocus = options.onFocus;
            var textStyle = options.style;
            /** @type {string} */
            var id = "".concat(_name, "-tab");
            React.useEffect(function () {
                return data;
            }, []);
            var value = self && false !== el && !disabled;
            var item = React.createElement("div", {
                key: label,
                ref: layer,
                className: require()(id, (_ref = {}, debug(_ref, "".concat(id, "-with-remove"), value), debug(_ref, "".concat(id, "-active"), active), debug(_ref, "".concat(id, "-disabled"), disabled), _ref)),
                style: textStyle,
                onClick: handler
            }, React.createElement("div", {
                role: "tab",
                "aria-selected": active,
                id: node && "".concat(node, "-tab-").concat(label),
                className: "".concat(id, "-btn"),
                "aria-controls": node && "".concat(node, "-panel-").concat(label),
                "aria-disabled": disabled,
                tabIndex: disabled ? null : 0,
                onClick: function (e) {
                    e.stopPropagation();
                    handler(e);
                },
                onKeyDown: function (e) {
                    if ([key.SPACE, key.ENTER].includes(e.which)) {
                        e.preventDefault();
                        handler(e);
                    }
                },
                onFocus: onFocus
            }, items), value && React.createElement("button", {
                type: "button",
                "aria-label": add || "remove",
                tabIndex: 0,
                className: "".concat(id, "-remove"),
                onClick: function (event) {
                    var _event;
                    event.stopPropagation();
                    (_event = event).preventDefault();
                    _event.stopPropagation();
                    self.onEdit("remove", {
                        key: label,
                        event: _event
                    });
                }
            }, nodes || self.removeIcon || "\u00d7"));
            return render ? render(item) : item;
        }
        /**
         * @param {!Object} options
         * @param {string} index
         * @return {?}
         */
        function renderItem(options, index) {
            /**
             * @param {?} args
             * @return {undefined}
             */
            function fn(args) {
                callback(s, args);
            }
            var ignoreCache = options.prefixCls;
            var preferCache = options.invalidate;
            var type = options.item;
            var className = options.renderItem;
            var optResp = options.responsive;
            var readonly = options.responsiveDisabled;
            var callback = options.registerSize;
            var s = options.itemKey;
            var classes = options.className;
            var style = options.style;
            var trackers = options.children;
            var features = options.display;
            var desc = options.order;
            var parent = options.component;
            var el = void 0 === parent ? "div" : parent;
            var data = get(options, DATA_PREVIEW);
            var hide = optResp && !features;
            React.useEffect(function () {
                return function () {
                    fn(null);
                };
            }, []);
            var defaults;
            var count = className && type !== active ? className(type) : trackers;
            if (!preferCache) {
                defaults = {
                    opacity: hide ? 0 : 1,
                    height: hide ? 0 : active,
                    overflowY: hide ? "hidden" : active,
                    order: optResp ? desc : active,
                    pointerEvents: hide ? "none" : active,
                    position: hide ? "absolute" : active
                };
            }
            var attrs = {};
            if (hide) {
                /** @type {boolean} */
                attrs["aria-hidden"] = true;
            }
            var value = React.createElement(el, _extends({
                className: require()(!preferCache && ignoreCache, classes),
                style: assign(assign({}, defaults), style)
            }, attrs, data, {
                ref: index
            }), count);
            return optResp && (value = React.createElement(FilterForm, {
                onResize: function (elem) {
                    fn(elem.offsetWidth);
                },
                disabled: readonly
            }, value)), value;
        }
        /**
         * @param {!NodeList} url
         * @return {?}
         */
        function other(url) {
            return "+ ".concat(url.length, " ...");
        }
        /**
         * @param {!Object} options
         * @param {string} section
         * @return {?}
         */
        function check(options, section) {
            /**
             * @param {number} value
             * @param {number} type
             * @param {boolean} early
             * @return {undefined}
             */
            function next(value, type, early) {
                if (prev !== value || void 0 !== type && type !== id) {
                    address(value);
                    if (!early) {
                        assert(value < a.length - 1);
                        if (!(null === activeSlideHasBulletByOffset || void 0 === activeSlideHasBulletByOffset)) {
                            activeSlideHasBulletByOffset(value);
                        }
                    }
                    if (void 0 !== type) {
                        callback(type);
                    }
                }
            }
            /**
             * @param {!Object} key
             * @param {!Array} type
             * @return {undefined}
             */
            function init(key, type) {
                parentJsonpFunction(function (options) {
                    /** @type {!Map} */
                    var client = new Map(options);
                    return null === type ? client.delete(key) : client.set(key, type), client;
                });
            }
            /**
             * @param {number} key
             * @return {?}
             */
            function random(key) {
                return t.get(cb(o[key], key));
            }
            var offset = options.prefixCls;
            var x = void 0 === offset ? "rc-overflow" : offset;
            var i = options.data;
            var a = void 0 === i ? [] : i;
            var pagesToDisplay = options.renderItem;
            var factory = options.renderRawItem;
            var fn = options.itemKey;
            var w = options.itemWidth;
            var size = void 0 === w ? 10 : w;
            var font = options.ssr;
            var textStyle = options.style;
            var classes = options.className;
            var n = options.maxCount;
            var category = options.renderRest;
            var output = options.renderRawRest;
            var value = options.suffix;
            var parent = options.component;
            var el = void 0 === parent ? "div" : parent;
            var ItemComponent = options.itemComponent;
            var activeSlideHasBulletByOffset = options.onVisibleChange;
            var result = get(options, reserved);
            var prop = function () {
                var gotoNewOfflinePage = call(attr({}), 2)[1];
                var basecontainer = (0, React.useRef)([]);
                /** @type {number} */
                var pick_id = 0;
                /** @type {number} */
                var oncePerMinute = 0;
                return function (envId) {
                    var id = pick_id;
                    return pick_id = pick_id + 1, basecontainer.current.length < id + 1 && (basecontainer.current[id] = envId), [basecontainer.current[id], function (fn) {
                        basecontainer.current[id] = "function" === typeof fn ? fn(basecontainer.current[id]) : fn;
                        $timeout.cancel(oncePerMinute);
                        oncePerMinute = $timeout(function () {
                            gotoNewOfflinePage({}, true);
                        });
                    }];
                };
            }();
            /** @type {boolean} */
            var isFontShorthand = "full" === font;
            var ret = call(prop(null), 2);
            var opt_length = ret[0];
            var done = ret[1];
            var length = opt_length || 0;
            var window = call(prop(new Map), 2);
            var t = window[0];
            var parentJsonpFunction = window[1];
            var blue = call(prop(0), 2);
            var b = blue[0];
            var DOval = blue[1];
            var child = call(prop(0), 2);
            var val = child[0];
            var c = child[1];
            var res = call(prop(0), 2);
            var r = res[0];
            var write = res[1];
            var copy = call((0, React.useState)(null), 2);
            var id = copy[0];
            var callback = copy[1];
            var data = call((0, React.useState)(null), 2);
            var prev = data[0];
            var address = data[1];
            var index = React.useMemo(function () {
                return null === prev && isFontShorthand ? Number.MAX_SAFE_INTEGER : prev || 0;
            }, [prev, opt_length]);
            var items = call((0, React.useState)(false), 2);
            var pos = items[0];
            var assert = items[1];
            /** @type {string} */
            var key = "".concat(x, "-item");
            /** @type {number} */
            var d = Math.max(b, val);
            /** @type {boolean} */
            var cur_mode = n === count;
            var l = a.length && cur_mode;
            /** @type {boolean} */
            var invalidate = n === middle;
            var nodeList = l || "number" === typeof n && a.length > n;
            var o = (0, React.useMemo)(function () {
                var r = a;
                return l ? r = null === opt_length && isFontShorthand ? a : a.slice(0, Math.min(a.length, length / size)) : "number" === typeof n && (r = a.slice(0, n)), r;
            }, [a, size, opt_length, n, l]);
            var item = (0, React.useMemo)(function () {
                return l ? a.slice(index + 1) : a.slice(o.length);
            }, [a, o, l, index]);
            var cb = (0, React.useCallback)(function (value, defaultValue) {
                var returned;
                return "function" === typeof fn ? fn(value) : null !== (returned = fn && (null === value || void 0 === value ? void 0 : value[fn])) && void 0 !== returned ? returned : defaultValue;
            }, [fn]);
            var defaultRenderItem = (0, React.useCallback)(pagesToDisplay || function (val) {
                return val;
            }, [pagesToDisplay]);
            _shallowCopyKeys(function () {
                if (length && d && o) {
                    var i = r;
                    var end = o.length;
                    /** @type {number} */
                    var step = end - 1;
                    if (!end) {
                        return void next(0, null);
                    }
                    /** @type {number} */
                    var index = 0;
                    for (; index < end; index = index + 1) {
                        var l = random(index);
                        if (isFontShorthand && (l = l || 0), void 0 === l) {
                            next(index - 1, void 0, true);
                            break;
                        }
                        if (i = i + l, 0 === step && i <= length || index === step - 1 && i + random(step) <= length) {
                            next(step, null);
                            break;
                        }
                        if (i + d > length) {
                            next(index - 1, i - l - r + val);
                            break;
                        }
                    }
                    if (value && random(0) + r > length) {
                        callback(null);
                    }
                }
            }, [length, t, val, r, cb, o]);
            var state = pos && !!item.length;
            var st = {};
            if (null !== id && l) {
                st = {
                    position: "absolute",
                    left: id,
                    top: 0
                };
            }
            var end;
            var config = {
                prefixCls: key,
                responsive: l,
                component: ItemComponent,
                invalidate: invalidate
            };
            /** @type {function(string, number): ?} */
            var layerRenderer = factory ? function (data, i) {
                var key = cb(data, i);
                return React.createElement(opts.Provider, {
                    key: key,
                    value: assign(assign({}, config), {}, {
                        order: i,
                        item: data,
                        itemKey: key,
                        registerSize: init,
                        display: i <= index
                    })
                }, factory(data, i));
            } : function (t, i) {
                var key = cb(t, i);
                return React.createElement(IndexRoute, _extends({}, config, {
                    order: i,
                    key: key,
                    item: t,
                    renderItem: defaultRenderItem,
                    itemKey: key,
                    registerSize: init,
                    display: i <= index
                }));
            };
            var params = {
                order: state ? index : Number.MAX_SAFE_INTEGER,
                className: "".concat(key, "-rest"),
                registerSize: function (component, event) {
                    c(event);
                    DOval(val);
                },
                display: state
            };
            if (output) {
                if (output) {
                    end = React.createElement(opts.Provider, {
                        value: assign(assign({}, config), params)
                    }, output(item));
                }
            } else {
                var value = category || other;
                end = React.createElement(IndexRoute, _extends({}, config, params), "function" === typeof value ? value(item) : value);
            }
            var select = React.createElement(el, _extends({
                className: require()(!invalidate && x, classes),
                style: textStyle,
                ref: section
            }, result), o.map(layerRenderer), nodeList ? end : null, value && React.createElement(IndexRoute, _extends({}, config, {
                responsive: cur_mode,
                responsiveDisabled: !l,
                order: index,
                className: "".concat(key, "-suffix"),
                registerSize: function (type, registry) {
                    write(registry);
                },
                display: true,
                style: st
            }), value));
            return cur_mode && (select = React.createElement(FilterForm, {
                onResize: function (width, view) {
                    done(view.clientWidth);
                },
                disabled: !l
            }, select)), select;
        }
        /**
         * @param {!Object} row
         * @return {?}
         */
        function element(row) {
            var child = row.children;
            var value = row.locked;
            var a = get(row, direction);
            var c = React.useContext(componentName);
            var string = define(function () {
                return function (instance, d) {
                    var data = assign({}, instance);
                    return Object.keys(d).forEach(function (i) {
                        var b = d[i];
                        if (void 0 !== b) {
                            data[i] = b;
                        }
                    }), data;
                }(c, a);
            }, [c, a], function (timeframeNew, timeframeOld) {
                return !value && (timeframeNew[0] !== timeframeOld[0] || !appendChild()(timeframeNew[1], timeframeOld[1]));
            });
            return React.createElement(componentName.Provider, {
                value: string
            }, child);
        }
        /**
         * @param {string} value
         * @param {!Function} name
         * @param {!Array} callback
         * @param {!Array} handler
         * @return {?}
         */
        function destroy(value, name, callback, handler) {
            var options = React.useContext(componentName);
            var i = options.activeKey;
            var select = options.onActive;
            var iterate = options.onInactive;
            var self = {
                active: i === value
            };
            return name || (self.onMouseEnter = function (evt) {
                if (!(null === callback || void 0 === callback)) {
                    callback({
                        key: value,
                        domEvent: evt
                    });
                }
                select(value);
            }, self.onMouseLeave = function (evt) {
                if (!(null === handler || void 0 === handler)) {
                    handler({
                        key: value,
                        domEvent: evt
                    });
                }
                iterate(value);
            }), self;
        }
        /**
         * @param {!Object} description
         * @return {?}
         */
        function updateArticleComments(description) {
            var type = description.item;
            var result = get(description, x);
            return Object.defineProperty(result, "item", {
                get: function () {
                    return assert(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future."), type;
                }
            }), result;
        }
        /**
         * @param {!Object} component
         * @return {?}
         */
        function Component(component) {
            var value = component.icon;
            var props = component.props;
            var onCreateArgs = component.children;
            return ("function" === typeof value ? React.createElement(value, assign({}, props)) : value) || onCreateArgs || null;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function setPosition(value) {
            var options = React.useContext(componentName);
            var mode = options.mode;
            var rtl = options.rtl;
            var zoom = options.inlineIndent;
            if ("inline" !== mode) {
                return null;
            }
            return rtl ? {
                paddingRight: value * zoom
            } : {
                paddingLeft: value * zoom
            };
        }
        /**
         * @return {?}
         */
        function _possibleConstructorReturn() {
            return React.useContext(children);
        }
        /**
         * @param {number} elem
         * @return {?}
         */
        function dispatch(elem) {
            var promises = React.useContext(scripts);
            return React.useMemo(function () {
                return void 0 !== elem ? [].concat(resolve(promises), [elem]) : promises;
            }, [promises, elem]);
        }
        /**
         * @param {!Array} name
         * @param {!Object} num
         * @return {?}
         */
        function eq(name, num) {
            return void 0 === name ? null : "".concat(name, "-").concat(num);
        }
        /**
         * @param {!Object} value
         * @return {?}
         */
        function trim(value) {
            return eq(React.useContext(obj), value);
        }
        /**
         * @param {!Function} t
         * @param {!Array} a
         * @return {?}
         */
        function repeat(t, a) {
            return filter(t).map(function (element, value) {
                if (React.isValidElement(element)) {
                    var H1;
                    var d;
                    var s = element.key;
                    var key = null !== (H1 = null === (d = element.props) || void 0 === d ? void 0 : d.eventKey) && void 0 !== H1 ? H1 : s;
                    if (null === key || void 0 === key) {
                        /** @type {string} */
                        key = "tmp_key-".concat([].concat(resolve(a), [value]).join("-"));
                    }
                    var props = {
                        key: key,
                        eventKey: key
                    };
                    return React.cloneElement(element, props);
                }
                return element;
            });
        }
        /**
         * @param {number} state
         * @return {?}
         */
        function search(state) {
            return (state || []).map(function (obj, availableBaseTypes) {
                if (obj && "object" === stringify(obj)) {
                    var content = obj.label;
                    var start = obj.children;
                    var url = obj.key;
                    var group = obj.type;
                    var result = get(obj, fields);
                    var urlString = null !== url && void 0 !== url ? url : "tmp-".concat(availableBaseTypes);
                    return start || "group" === group ? "group" === group ? React.createElement(option, _extends({
                        key: urlString
                    }, result, {
                        title: content
                    }), search(start)) : React.createElement(Button, _extends({
                        key: urlString
                    }, result, {
                        title: content
                    }), search(start)) : "divider" === group ? React.createElement(Group, _extends({
                        key: urlString
                    }, result)) : React.createElement(Item, _extends({
                        key: urlString
                    }, result), content);
                }
                return null;
            }).filter(function (tag) {
                return tag;
            });
        }
        /**
         * @param {?} index
         * @param {number} name
         * @param {!Array} length
         * @return {?}
         */
        function animate(index, name, length) {
            var n = index;
            return name && (n = search(name)), repeat(n, length);
        }
        /**
         * @param {string} type
         * @return {?}
         */
        function connect(type) {
            var e = React.useRef(type);
            /** @type {string} */
            e.current = type;
            var clientWidth = React.useCallback(function () {
                var _ref;
                /** @type {number} */
                var arglen = arguments.length;
                /** @type {!Array} */
                var args = new Array(arglen);
                /** @type {number} */
                var i = 0;
                for (; i < arglen; i++) {
                    args[i] = arguments[i];
                }
                return null === (_ref = e.current) || void 0 === _ref ? void 0 : _ref.call.apply(_ref, [e].concat(args));
            }, []);
            return type ? clientWidth : void 0;
        }
        /**
         * @param {!Node} array
         * @param {string} t
         * @return {?}
         */
        function contains(array, t) {
            return !!array && array.contains(t);
        }
        /**
         * @param {!Object} self
         * @param {string} event
         * @param {!Function} cb
         * @param {?} context
         * @return {?}
         */
        function addEvent(self, event, cb, context) {
            var onReady = d.unstable_batchedUpdates ? function (f) {
                d.unstable_batchedUpdates(cb, f);
            } : cb;
            return self.addEventListener && self.addEventListener(event, onReady, context), {
                remove: function () {
                    if (self.removeEventListener) {
                        self.removeEventListener(event, onReady, context);
                    }
                }
            };
        }
        /**
         * @param {!Object} e
         * @param {!Object} top
         * @param {boolean} bottom
         * @return {?}
         */
        function getFillStyle(e, top, bottom) {
            return bottom ? e[0] === top[0] : e[0] === top[0] && e[1] === top[1];
        }
        /**
         * @param {string} name
         * @param {string} type
         * @return {?}
         */
        function prefixedEvent(name, type) {
            var out = {};
            return out[name.toLowerCase()] = type.toLowerCase(), out["Webkit".concat(name)] = "webkit".concat(type), out["Moz".concat(name)] = "moz".concat(type), out["ms".concat(name)] = "MS".concat(type), out["O".concat(name)] = "o".concat(type.toLowerCase()), out;
        }
        /**
         * @param {string} type
         * @return {?}
         */
        function createCallbackWithStatements(type) {
            if (kwargs[type]) {
                return kwargs[type];
            }
            var data = rawActivityEntry[type];
            if (data) {
                /** @type {!Array<string>} */
                var x = Object.keys(data);
                /** @type {number} */
                var count = x.length;
                /** @type {number} */
                var n = 0;
                for (; n < count; n = n + 1) {
                    /** @type {string} */
                    var i = x[n];
                    if (Object.prototype.hasOwnProperty.call(data, i) && i in current) {
                        return kwargs[type] = data[i], kwargs[type];
                    }
                }
            }
            return "";
        }
        /**
         * @param {!Object} node
         * @param {string} value
         * @return {?}
         */
        function replacer(node, value) {
            return node ? "object" === stringify(node) ? node[value.replace(/-\w/g, function (ctcp) {
                return ctcp[1].toUpperCase();
            })] : "".concat(node, "-").concat(value) : null;
        }
        /**
         * @param {undefined} name
         * @return {?}
         */
        function isDefined(name) {
            return name === className || name === th;
        }
        /**
         * @param {?} fn
         * @param {number} err
         * @param {!Function} success
         * @param {!Object} data
         * @return {?}
         */
        function link(fn, err, success, data) {
            /**
             * @return {?}
             */
            function callback() {
                return success();
            }
            /**
             * @param {!Object} a
             * @return {undefined}
             */
            function success(a) {
                var key = callback();
                if (!a || a.deadline || a.target === key) {
                    var oldVal;
                    var value = m.current;
                    if (source === latex && value) {
                        oldVal = null === k || void 0 === k ? void 0 : k(key, a);
                    } else {
                        if (source === upload && value) {
                            oldVal = null === S || void 0 === S ? void 0 : S(key, a);
                        } else {
                            if (source === system && value) {
                                oldVal = null === updateRegistrations || void 0 === updateRegistrations ? void 0 : updateRegistrations(key, a);
                            }
                        }
                    }
                    if (source !== undefined && value && false !== oldVal) {
                        expect(undefined, true);
                        resetCountdown(null, true);
                    }
                }
            }
            var mime = data.motionEnter;
            var mimeObject = void 0 === mime || mime;
            var geometry = data.motionAppear;
            var geomname = void 0 === geometry || geometry;
            var DEFAULT_RECONNECT_TIME_INCREASE = data.motionLeave;
            var reconnectTimeIncrease = void 0 === DEFAULT_RECONNECT_TIME_INCREASE || DEFAULT_RECONNECT_TIME_INCREASE;
            var time = data.motionDeadline;
            var opts = data.motionLeaveImmediately;
            var series = data.onAppearPrepare;
            var method = data.onEnterPrepare;
            var $ = data.onLeavePrepare;
            var y = data.onAppearStart;
            var b = data.onEnterStart;
            var x = data.onLeaveStart;
            var hostnames = data.onAppearActive;
            var urlFromState = data.onEnterActive;
            var confWidth = data.onLeaveActive;
            var k = data.onAppearEnd;
            var S = data.onEnterEnd;
            var updateRegistrations = data.onLeaveEnd;
            var fn = data.onVisibleChanged;
            var blank = call(attr(), 2);
            var day = blank[0];
            var suggestHistory = blank[1];
            var item = call(attr(undefined), 2);
            var source = item[0];
            var expect = item[1];
            var tiledImageBRs = call(attr(null), 2);
            var tiledImageBR = tiledImageBRs[0];
            var resetCountdown = tiledImageBRs[1];
            var stream = (0, React.useRef)(false);
            var that = (0, React.useRef)(null);
            var m = (0, React.useRef)(false);
            var handler = function (data) {
                /**
                 * @param {!Element} window
                 * @return {undefined}
                 */
                function translate(window) {
                    if (window) {
                        window.removeEventListener(event, n);
                        window.removeEventListener(globalEventOff, n);
                    }
                }
                var that = (0, React.useRef)();
                var r = (0, React.useRef)(data);
                /** @type {function(!Object): undefined} */
                r.current = data;
                var n = React.useCallback(function (type) {
                    r.current(type);
                }, []);
                return React.useEffect(function () {
                    return function () {
                        translate(that.current);
                    };
                }, []), [function (index) {
                    if (that.current && that.current !== index) {
                        translate(that.current);
                    }
                    if (index && index !== that.current) {
                        index.addEventListener(event, n);
                        index.addEventListener(globalEventOff, n);
                        /** @type {string} */
                        that.current = index;
                    }
                }, translate];
            }(success);
            var cast = call(handler, 1)[0];
            var options = React.useMemo(function () {
                var d;
                var err;
                var e;
                switch (source) {
                    case latex:
                        return debug(d = {}, selector, series), debug(d, i, y), debug(d, className, hostnames), d;
                    case upload:
                        return debug(err = {}, selector, method), debug(err, i, b), debug(err, className, urlFromState), err;
                    case system:
                        return debug(e = {}, selector, $), debug(e, i, x), debug(e, className, confWidth), e;
                    default:
                        return {};
                }
            }, [source]);
            var child = call(activate(source, function (newModulo) {
                if (newModulo === selector) {
                    var parse = options.prepare;
                    return !!parse && parse(callback());
                }
                var value;
                if (type in options) {
                    resetCountdown((null === (value = options[type]) || void 0 === value ? void 0 : value.call(options, callback(), null)) || null);
                }
                return type === className && (cast(callback()), time > 0 && (clearTimeout(that.current), that.current = setTimeout(function () {
                    success({
                        deadline: true
                    });
                }, time))), true;
            }), 2);
            var min = child[0];
            var type = child[1];
            var current = isDefined(type);
            m.current = current;
            spawn(function () {
                suggestHistory(err);
                var data;
                var cb = stream.current;
                if (stream.current = true, fn) {
                    if (!cb && err && geomname) {
                        /** @type {string} */
                        data = latex;
                    }
                    if (cb && err && mimeObject) {
                        /** @type {string} */
                        data = upload;
                    }
                    if (cb && !err && reconnectTimeIncrease || !cb && opts && !err && reconnectTimeIncrease) {
                        /** @type {string} */
                        data = system;
                    }
                    if (data) {
                        expect(data);
                        min();
                    }
                }
            }, [err]);
            (0, React.useEffect)(function () {
                if (source === latex && !geomname || source === upload && !mimeObject || source === system && !reconnectTimeIncrease) {
                    expect(undefined);
                }
            }, [geomname, mimeObject, reconnectTimeIncrease]);
            (0, React.useEffect)(function () {
                return function () {
                    /** @type {boolean} */
                    stream.current = false;
                    clearTimeout(that.current);
                };
            }, []);
            var scope = React.useRef(false);
            (0, React.useEffect)(function () {
                if (day) {
                    /** @type {boolean} */
                    scope.current = true;
                }
                if (void 0 !== day && source === undefined) {
                    if (scope.current || day) {
                        if (!(null === fn || void 0 === fn)) {
                            fn(day);
                        }
                    }
                    /** @type {boolean} */
                    scope.current = true;
                }
            }, [day, source]);
            var retryConfigs = tiledImageBR;
            return options.prepare && type === i && (retryConfigs = assign({
                transition: "none"
            }, retryConfigs)), [source, type, retryConfigs, null !== day && void 0 !== day ? day : err];
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function err(obj) {
            var val;
            return assign(assign({}, val = obj && "object" === stringify(obj) && "key" in obj ? obj : {
                key: obj
            }), {}, {
                key: String(val.key)
            });
        }
        /**
         * @return {?}
         */
        function querySelector() {
            var Bluebird = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
            return Bluebird.map(err);
        }
        /**
         * @return {?}
         */
        function tick() {
            var selector = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
            var body = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
            /** @type {!Array} */
            var proxies = [];
            /** @type {number} */
            var index = 0;
            var n = body.length;
            var main = querySelector(selector);
            var params = querySelector(body);
            main.forEach(function (context) {
                /** @type {boolean} */
                var t = false;
                var i = index;
                for (; i < n; i = i + 1) {
                    var opt = params[i];
                    if (opt.key === context.key) {
                        if (index < i) {
                            proxies = proxies.concat(params.slice(index, i).map(function (context) {
                                return assign(assign({}, context), {}, {
                                    status: mode
                                });
                            }));
                            index = i;
                        }
                        proxies.push(assign(assign({}, opt), {}, {
                            status: string
                        }));
                        index = index + 1;
                        /** @type {boolean} */
                        t = true;
                        break;
                    }
                }
                if (!t) {
                    proxies.push(assign(assign({}, context), {}, {
                        status: status
                    }));
                }
            });
            if (index < n) {
                proxies = proxies.concat(params.slice(index).map(function (context) {
                    return assign(assign({}, context), {}, {
                        status: mode
                    });
                }));
            }
            var data = {};
            proxies.forEach(function (designData) {
                var key = designData.key;
                data[key] = (data[key] || 0) + 1;
            });
            /** @type {!Array<string>} */
            var pipelets = Object.keys(data).filter(function (unbracketed) {
                return data[unbracketed] > 1;
            });
            return pipelets.forEach(function (name) {
                proxies = proxies.filter(function (game) {
                    var state = game.key;
                    var s = game.status;
                    return state !== name || s !== status;
                });
                proxies.forEach(function (result) {
                    if (result.key === name) {
                        /** @type {string} */
                        result.status = string;
                    }
                });
            }), proxies;
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function construct(obj) {
            var x = obj.prefixCls;
            var place = obj.motion;
            var list = obj.animation;
            var oldFiles = obj.transitionName;
            return place || (list ? {
                motionName: "".concat(x, "-").concat(list)
            } : oldFiles ? {
                motionName: oldFiles
            } : null);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function Image(options) {
            var _name = options.prefixCls;
            var visible = options.visible;
            var z = options.zIndex;
            var el = options.mask;
            var red = options.maskMotion;
            var blue = options.maskAnimation;
            var green = options.maskTransitionName;
            if (!el) {
                return null;
            }
            var props = {};
            return (red || green || blue) && (props = assign({
                motionAppear: true
            }, construct({
                motion: red,
                prefixCls: _name,
                transitionName: green,
                animation: blue
            }))), React.createElement(PatchItem, _extends({}, props, {
                visible: visible,
                removeOnLeave: true
            }), function (aTarget) {
                var classes = aTarget.className;
                return React.createElement("div", {
                    style: {
                        zIndex: z
                    },
                    className: require()("".concat(_name, "-mask"), classes)
                });
            });
        }
        /**
         * @param {!Object} obj
         * @param {boolean} tgt
         * @return {?}
         */
        function defineProperty(obj, tgt) {
            /** @type {!Array<string>} */
            var rv = Object.keys(obj);
            if (Object.getOwnPropertySymbols) {
                /** @type {!Array<?>} */
                var r = Object.getOwnPropertySymbols(obj);
                if (tgt) {
                    /** @type {!Array<?>} */
                    r = r.filter(function (key) {
                        return Object.getOwnPropertyDescriptor(obj, key).enumerable;
                    });
                }
                rv.push.apply(rv, r);
            }
            return rv;
        }
        /**
         * @param {!Object} target
         * @return {?}
         */
        function mix(target) {
            /** @type {number} */
            var i = 1;
            for (; i < arguments.length; i++) {
                var obj = null != arguments[i] ? arguments[i] : {};
                if (i % 2) {
                    defineProperty(Object(obj), true).forEach(function (path) {
                        _find(target, path, obj[path]);
                    });
                } else {
                    if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(obj));
                    } else {
                        defineProperty(Object(obj)).forEach(function (prop) {
                            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(obj, prop));
                        });
                    }
                }
            }
            return target;
        }
        /**
         * @param {string} property
         * @return {?}
         */
        function type(property) {
            return type = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function (object_id) {
                return typeof object_id;
            } : function (obj) {
                return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, type(property);
        }
        /**
         * @param {!Object} obj
         * @param {string} key
         * @param {!Object} value
         * @return {?}
         */
        function _find(obj, key, value) {
            return key in obj ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            }) : obj[key] = value, obj;
        }
        /**
         * @return {?}
         */
        function fix() {
            if (void 0 !== vars) {
                return vars;
            }
            /** @type {string} */
            vars = "";
            /** @type {!CSSStyleDeclaration} */
            var style = document.createElement("p").style;
            var vendor;
            for (vendor in vendors) {
                if (vendor + "Transform" in style) {
                    /** @type {string} */
                    vars = vendor;
                }
            }
            return vars;
        }
        /**
         * @return {?}
         */
        function camelCase() {
            return fix() ? "".concat(fix(), "TransitionProperty") : "transitionProperty";
        }
        /**
         * @return {?}
         */
        function scale() {
            return fix() ? "".concat(fix(), "Transform") : "transform";
        }
        /**
         * @param {!Object} el
         * @param {string} value
         * @return {undefined}
         */
        function setCss(el, value) {
            var camel = camelCase();
            if (camel) {
                /** @type {string} */
                el.style[camel] = value;
                if ("transitionProperty" !== camel) {
                    /** @type {string} */
                    el.style.transitionProperty = value;
                }
            }
        }
        /**
         * @param {!Object} a
         * @param {string} val
         * @return {undefined}
         */
        function setScale(a, val) {
            var l = scale();
            if (l) {
                /** @type {string} */
                a.style[l] = val;
                if ("transform" !== l) {
                    /** @type {string} */
                    a.style.transform = val;
                }
            }
        }
        /**
         * @param {!Object} target
         * @return {undefined}
         */
        function resetCenter(target) {
            var gutterDisplay = target.style.display;
            /** @type {string} */
            target.style.display = "none";
            target.offsetHeight;
            target.style.display = gutterDisplay;
        }
        /**
         * @param {!Object} element
         * @param {string} property
         * @param {number} value
         * @return {?}
         */
        function setStyle(element, property, value) {
            /** @type {number} */
            var val = value;
            if ("object" !== type(property)) {
                return "undefined" !== typeof val ? ("number" === typeof val && (val = "".concat(val, "px")), void (element.style[property] = val)) : css(element, property);
            }
            var prop;
            for (prop in property) {
                if (property.hasOwnProperty(prop)) {
                    setStyle(element, prop, property[prop]);
                }
            }
        }
        /**
         * @param {!Object} node
         * @param {string} top
         * @return {?}
         */
        function getScroll(node, top) {
            var ret = node["page".concat(top ? "Y" : "X", "Offset")];
            /** @type {string} */
            var name = "scroll".concat(top ? "Top" : "Left");
            if ("number" !== typeof ret) {
                var doc = node.document;
                if ("number" !== typeof (ret = doc.documentElement[name])) {
                    ret = doc.body[name];
                }
            }
            return ret;
        }
        /**
         * @param {!Object} target
         * @return {?}
         */
        function toNumber(target) {
            return getScroll(target);
        }
        /**
         * @param {!Object} el
         * @return {?}
         */
        function num(el) {
            return getScroll(el, true);
        }
        /**
         * @param {!Object} node
         * @return {?}
         */
        function offset(node) {
            var parentOffset = function (elmt) {
                var paletteHandlePosition;
                var tw;
                var startTxtLoc;
                var doc = elmt.ownerDocument;
                var body = doc.body;
                var docElem = doc && doc.documentElement;
                return paletteHandlePosition = elmt.getBoundingClientRect(), tw = Math.floor(paletteHandlePosition.left), startTxtLoc = Math.floor(paletteHandlePosition.top), {
                    left: tw = tw - (docElem.clientLeft || body.clientLeft || 0),
                    top: startTxtLoc = startTxtLoc - (docElem.clientTop || body.clientTop || 0)
                };
            }(node);
            var doc = node.ownerDocument;
            var styles = doc.defaultView || doc.parentWindow;
            return parentOffset.left += toNumber(styles), parentOffset.top += num(styles), parentOffset;
        }
        /**
         * @param {!Object} o
         * @return {?}
         */
        function isWindow(o) {
            return null !== o && void 0 !== o && o == o.window;
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function getDocument(obj) {
            return isWindow(obj) ? obj.document : 9 === obj.nodeType ? obj : obj.ownerDocument;
        }
        /**
         * @param {string} n
         * @param {?} o
         * @return {?}
         */
        function createBorder(n, o) {
            return "left" === n ? o.useCssRight ? "right" : n : o.useCssBottom ? "bottom" : n;
        }
        /**
         * @param {string} undefined
         * @return {?}
         */
        function strToPos(undefined) {
            return "left" === undefined ? "right" : "right" === undefined ? "left" : "top" === undefined ? "bottom" : "bottom" === undefined ? "top" : void 0;
        }
        /**
         * @param {!Object} el
         * @param {!Object} obj
         * @param {?} property
         * @return {undefined}
         */
        function getStyle(el, obj, property) {
            if ("static" === setStyle(el, "position")) {
                /** @type {string} */
                el.style.position = "relative";
            }
            /** @type {number} */
            var end = -999;
            /** @type {number} */
            var x = -999;
            var position = createBorder("left", property);
            var id = createBorder("top", property);
            var transform = strToPos(position);
            var i = strToPos(id);
            if ("left" !== position) {
                /** @type {number} */
                end = 999;
            }
            if ("top" !== id) {
                /** @type {number} */
                x = 999;
            }
            var _selected;
            /** @type {string} */
            var value = "";
            var r = offset(el);
            if ("left" in obj || "top" in obj) {
                value = (_selected = el).style.transitionProperty || _selected.style[camelCase()] || "";
                setCss(el, "none");
            }
            if ("left" in obj) {
                /** @type {string} */
                el.style[transform] = "";
                /** @type {string} */
                el.style[position] = "".concat(end, "px");
            }
            if ("top" in obj) {
                /** @type {string} */
                el.style[i] = "";
                /** @type {string} */
                el.style[id] = "".concat(x, "px");
            }
            resetCenter(el);
            var o = offset(el);
            var d = {};
            var left;
            for (left in obj) {
                if (obj.hasOwnProperty(left)) {
                    var direction = createBorder(left, property);
                    /** @type {number} */
                    var index = "left" === left ? end : x;
                    /** @type {number} */
                    var i = r[left] - o[left];
                    /** @type {number} */
                    d[direction] = direction === left ? index + i : index - i;
                }
            }
            setStyle(el, d);
            resetCenter(el);
            if ("left" in obj || "top" in obj) {
                setCss(el, value);
            }
            var opacity = {};
            var a;
            for (a in obj) {
                if (obj.hasOwnProperty(a)) {
                    var name = createBorder(a, property);
                    /** @type {number} */
                    var b = obj[a] - r[a];
                    opacity[name] = a === name ? d[name] + b : d[name] - b;
                }
            }
            setStyle(el, opacity);
        }
        /**
         * @param {!Object} el
         * @param {!Object} obj
         * @return {undefined}
         */
        function resize(el, obj) {
            var elementOffset = offset(el);
            var pos = function (e) {
                var t = window.getComputedStyle(e, null);
                var n = t.getPropertyValue("transform") || t.getPropertyValue(scale());
                if (n && "none" !== n) {
                    var r = n.replace(/[^0-9\-.,]/g, "").split(",");
                    return {
                        x: parseFloat(r[12] || r[4], 0),
                        y: parseFloat(r[13] || r[5], 0)
                    };
                }
                return {
                    x: 0,
                    y: 0
                };
            }(el);
            var o = {
                x: pos.x,
                y: pos.y
            };
            if ("left" in obj) {
                /** @type {number} */
                o.x = pos.x + obj.left - elementOffset.left;
            }
            if ("top" in obj) {
                /** @type {number} */
                o.y = pos.y + obj.top - elementOffset.top;
            }
            (function (container, v) {
                var t = window.getComputedStyle(container, null);
                var authType = t.getPropertyValue("transform") || t.getPropertyValue(scale());
                if (authType && "none" !== authType) {
                    var values;
                    var value = authType.match(REkey);
                    if (value) {
                        (values = (value = value[1]).split(",").map(function (IDM_s0) {
                            return parseFloat(IDM_s0, 10);
                        }))[4] = v.x;
                        values[5] = v.y;
                        setScale(container, "matrix(".concat(values.join(","), ")"));
                    } else {
                        (values = authType.match(coffeeExt)[1].split(",").map(function (IDM_s0) {
                            return parseFloat(IDM_s0, 10);
                        }))[12] = v.x;
                        values[13] = v.y;
                        setScale(container, "matrix3d(".concat(values.join(","), ")"));
                    }
                } else {
                    setScale(container, "translateX(".concat(v.x, "px) translateY(").concat(v.y, "px) translateZ(0)"));
                }
            })(el, o);
        }
        /**
         * @param {!Array} array
         * @param {!Function} obj
         * @return {undefined}
         */
        function keySet(array, obj) {
            /** @type {number} */
            var i = 0;
            for (; i < array.length; i++) {
                obj(array[i]);
            }
        }
        /**
         * @param {string} elem
         * @return {?}
         */
        function getWidthOrHeight(elem) {
            return "border-box" === css(elem, "boxSizing");
        }
        /**
         * @param {!Object} text
         * @param {(Object|string)} obj
         * @param {!Function} n
         * @return {undefined}
         */
        function clear(text, obj, n) {
            var key;
            var a = {};
            var c = text.style;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    a[key] = c[key];
                    c[key] = obj[key];
                }
            }
            for (key in n.call(text), obj) {
                if (obj.hasOwnProperty(key)) {
                    c[key] = a[key];
                }
            }
        }
        /**
         * @param {string} node
         * @param {!Array} t
         * @param {!Array} context
         * @return {?}
         */
        function getComputedStyle(node, t, context) {
            var id;
            var j;
            var i;
            /** @type {number} */
            var val = 0;
            /** @type {number} */
            j = 0;
            for (; j < t.length; j++) {
                if (id = t[j]) {
                    /** @type {number} */
                    i = 0;
                    for (; i < context.length; i++) {
                        var type = void 0;
                        type = "border" === id ? "".concat(id).concat(context[i], "Width") : id + context[i];
                        /** @type {number} */
                        val = val + (parseFloat(css(node, type)) || 0);
                    }
                }
            }
            return val;
        }
        /**
         * @param {!Object} el
         * @param {string} type
         * @param {number} data
         * @return {?}
         */
        function getSize(el, type, data) {
            /** @type {number} */
            var string = data;
            if (isWindow(el)) {
                return "width" === type ? arr.viewportWidth(el) : arr.viewportHeight(el);
            }
            if (9 === el.nodeType) {
                return "width" === type ? arr.docWidth(el) : arr.docHeight(el);
            }
            /** @type {!Array} */
            var language = "width" === type ? ["Left", "Right"] : ["Top", "Bottom"];
            /** @type {number} */
            var current = "width" === type ? Math.floor(el.getBoundingClientRect().width) : Math.floor(el.getBoundingClientRect().height);
            var scope = getWidthOrHeight(el);
            /** @type {number} */
            var item = 0;
            if (null === current || void 0 === current || current <= 0) {
                current = void 0;
                if (null === (item = css(el, type)) || void 0 === item || Number(item) < 0) {
                    item = el.style[type] || 0;
                }
                /** @type {number} */
                item = parseFloat(item) || 0;
            }
            if (void 0 === string) {
                /** @type {number} */
                string = scope ? 1 : -1;
            }
            var root = void 0 !== current || scope;
            /** @type {number} */
            var value = current || item;
            return -1 === string ? root ? value - getComputedStyle(el, ["border", "padding"], language) : item : root ? 1 === string ? value : value + (2 === string ? -getComputedStyle(el, ["border"], language) : getComputedStyle(el, ["margin"], language)) : item + getComputedStyle(el, class_names.slice(string), language);
        }
        /**
         * @return {?}
         */
        function clearTimeout() {
            /** @type {number} */
            var arglen = arguments.length;
            /** @type {!Array} */
            var args = new Array(arglen);
            /** @type {number} */
            var i = 0;
            for (; i < arglen; i++) {
                args[i] = arguments[i];
            }
            var err;
            var key = args[0];
            return 0 !== key.offsetWidth ? err = getSize.apply(void 0, args) : clear(key, tmp, function () {
                err = getSize.apply(void 0, args);
            }), err;
        }
        /**
         * @param {string} obj
         * @param {!Function} arg
         * @return {?}
         */
        function _(obj, arg) {
            var k;
            for (k in arg) {
                if (arg.hasOwnProperty(k)) {
                    obj[k] = arg[k];
                }
            }
            return obj;
        }
        /**
         * @param {!Element} element
         * @return {?}
         */
        function getOffsetParent(element) {
            if (me.isWindow(element) || 9 === element.nodeType) {
                return null;
            }
            var parent;
            var container = me.getDocument(element).body;
            var positionStyle = me.css(element, "position");
            if (!("fixed" === positionStyle || "absolute" === positionStyle)) {
                return "html" === element.nodeName.toLowerCase() ? null : getParent(element);
            }
            parent = getParent(element);
            for (; parent && parent !== container && 9 !== parent.nodeType; parent = getParent(parent)) {
                if ("static" !== (positionStyle = me.css(parent, "position"))) {
                    return parent;
                }
            }
            return null;
        }
        /**
         * @param {!Element} element
         * @param {string} selector
         * @return {?}
         */
        function move(element, selector) {
            var result = {
                left: 0,
                right: 1 / 0,
                top: 0,
                bottom: 1 / 0
            };
            var el = getOffsetParent(element);
            var node = me.getDocument(element);
            var obj = node.defaultView || node.parentWindow;
            var document = node.body;
            var target = node.documentElement;
            for (; el;) {
                if (-1 !== navigator.userAgent.indexOf("MSIE") && 0 === el.clientWidth || el === document || el === target || "visible" === me.css(el, "overflow")) {
                    if (el === document || el === target) {
                        break;
                    }
                } else {
                    var pos = me.offset(el);
                    pos.left += el.clientLeft;
                    pos.top += el.clientTop;
                    /** @type {number} */
                    result.top = Math.max(result.top, pos.top);
                    /** @type {number} */
                    result.right = Math.min(result.right, pos.left + el.clientWidth);
                    /** @type {number} */
                    result.bottom = Math.min(result.bottom, pos.top + el.clientHeight);
                    /** @type {number} */
                    result.left = Math.max(result.left, pos.left);
                }
                el = getOffsetParent(el);
            }
            /** @type {null} */
            var oposition = null;
            if (!(me.isWindow(element) || 9 === element.nodeType)) {
                oposition = element.style.position;
                if ("absolute" === me.css(element, "position")) {
                    /** @type {string} */
                    element.style.position = "fixed";
                }
            }
            var x = me.getWindowScrollLeft(obj);
            var y = me.getWindowScrollTop(obj);
            var chartWidthHalf = me.viewportWidth(obj);
            var d = me.viewportHeight(obj);
            var width = target.scrollWidth;
            var w = target.scrollHeight;
            var body = window.getComputedStyle(document);
            if ("hidden" === body.overflowX && (width = obj.innerWidth), "hidden" === body.overflowY && (w = obj.innerHeight), element.style && (element.style.position = oposition), selector || function (target) {
                if (me.isWindow(target) || 9 === target.nodeType) {
                    return false;
                }
                var current = me.getDocument(target);
                var text = current.body;
                /** @type {null} */
                var name = null;
                name = str(target);
                for (; name && name !== text && name !== current; name = str(name)) {
                    if ("fixed" === me.css(name, "position")) {
                        return true;
                    }
                }
                return false;
            }(element)) {
                /** @type {number} */
                result.left = Math.max(result.left, x);
                /** @type {number} */
                result.top = Math.max(result.top, y);
                /** @type {number} */
                result.right = Math.min(result.right, x + chartWidthHalf);
                /** @type {number} */
                result.bottom = Math.min(result.bottom, y + d);
            } else {
                /** @type {number} */
                var temp = Math.max(width, x + chartWidthHalf);
                /** @type {number} */
                result.right = Math.min(result.right, temp);
                /** @type {number} */
                var max = Math.max(w, y + d);
                /** @type {number} */
                result.bottom = Math.min(result.bottom, max);
            }
            return result.top >= 0 && result.left >= 0 && result.bottom > result.top && result.right > result.left ? result : null;
        }
        /**
         * @param {!Object} el
         * @return {?}
         */
        function getRegion(el) {
            var ret;
            var key;
            var value;
            if (me.isWindow(el) || 9 === el.nodeType) {
                var obj = me.getWindow(el);
                ret = {
                    left: me.getWindowScrollLeft(obj),
                    top: me.getWindowScrollTop(obj)
                };
                key = me.viewportWidth(obj);
                value = me.viewportHeight(obj);
            } else {
                ret = me.offset(el);
                key = me.outerWidth(el);
                value = me.outerHeight(el);
            }
            return ret.width = key, ret.height = value, ret;
        }
        /**
         * @param {!Object} params
         * @param {string} parent
         * @return {?}
         */
        function drawCorners(params, parent) {
            var n = parent.charAt(0);
            var p = parent.charAt(1);
            var width = params.width;
            var height = params.height;
            var posX = params.left;
            var posY = params.top;
            return "c" === n ? posY = posY + height / 2 : "b" === n && (posY = posY + height), "c" === p ? posX = posX + width / 2 : "r" === p && (posX = posX + width), {
                left: posX,
                top: posY
            };
        }
        /**
         * @param {!Object} params
         * @param {!Object} options
         * @param {!Object} n
         * @param {!Object} v
         * @param {!Object} s
         * @return {?}
         */
        function normalize(params, options, n, v, s) {
            var op = drawCorners(options, n[1]);
            var p = drawCorners(params, n[0]);
            /** @type {!Array} */
            var layArea = [p.left - op.left, p.top - op.top];
            return {
                left: Math.round(params.left - layArea[0] + v[0] - s[0]),
                top: Math.round(params.top - layArea[1] + v[1] - s[1])
            };
        }
        /**
         * @param {!Object} elFuturePos
         * @param {!Object} elRegion
         * @param {!Object} visibleRect
         * @return {?}
         */
        function isFailX(elFuturePos, elRegion, visibleRect) {
            return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
        }
        /**
         * @param {!Object} elFuturePos
         * @param {!Object} elRegion
         * @param {!ClientRect} visibleRect
         * @return {?}
         */
        function isFailY(elFuturePos, elRegion, visibleRect) {
            return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
        }
        /**
         * @param {!Array} value
         * @param {!RegExp} type
         * @param {!NodeList} node
         * @return {?}
         */
        function flip(value, type, node) {
            /** @type {!Array} */
            var result = [];
            return me.each(value, function (e) {
                result.push(e.replace(type, function (nextNodeProp) {
                    return node[nextNodeProp];
                }));
            }), result;
        }
        /**
         * @param {!NodeList} options
         * @param {number} limit
         * @return {?}
         */
        function random(options, limit) {
            return options[limit] = -options[limit], options;
        }
        /**
         * @param {string} val
         * @param {number} diff
         * @return {?}
         */
        function decode(val, diff) {
            return (/%$/.test(val) ? parseInt(val.substring(0, val.length - 1), 10) / 100 * diff : parseInt(val, 10)) || 0;
        }
        /**
         * @param {!Object} value
         * @param {!Object} data
         * @return {undefined}
         */
        function parsePath(value, data) {
            value[0] = decode(value[0], data.width);
            value[1] = decode(value[1], data.height);
        }
        /**
         * @param {!Object} input
         * @param {!Object} path
         * @param {!Object} options
         * @param {string} buffer
         * @return {?}
         */
        function draw(input, path, options, buffer) {
            var data = options.points;
            var i = options.offset || [0, 0];
            var p = options.targetOffset || [0, 0];
            var overflow = options.overflow;
            var element = options.source || input;
            /** @type {!Array<?>} */
            i = [].concat(i);
            /** @type {!Array<?>} */
            p = [].concat(p);
            var newOverflowCfg = {};
            /** @type {number} */
            var item = 0;
            var visibleRect = move(element, !(!(overflow = overflow || {}) || !overflow.alwaysByViewport));
            var node = getRegion(element);
            parsePath(i, node);
            parsePath(p, path);
            var value = normalize(node, path, data, i, p);
            var child = me.merge(node, value);
            if (visibleRect && (overflow.adjustX || overflow.adjustY) && buffer) {
                if (overflow.adjustX && isFailX(value, node, visibleRect)) {
                    var width = flip(data, /[lr]/gi, {
                        l: "r",
                        r: "l"
                    });
                    var u = random(i, 0);
                    var s = random(p, 0);
                    if (!function (pos, css, rect) {
                        return pos.left > rect.right || pos.left + css.width < rect.left;
                    }(normalize(node, path, width, u, s), node, visibleRect)) {
                        /** @type {number} */
                        item = 1;
                        data = width;
                        i = u;
                        p = s;
                    }
                }
                if (overflow.adjustY && isFailY(value, node, visibleRect)) {
                    var width = flip(data, /[tb]/gi, {
                        t: "b",
                        b: "t"
                    });
                    var u = random(i, 1);
                    var s = random(p, 1);
                    if (!function (e, body, rect) {
                        return e.top > rect.bottom || e.top + body.height < rect.top;
                    }(normalize(node, path, width, u, s), node, visibleRect)) {
                        /** @type {number} */
                        item = 1;
                        data = width;
                        i = u;
                        p = s;
                    }
                }
                if (item) {
                    value = normalize(node, path, data, i, p);
                    me.mix(child, value);
                }
                var title = isFailX(value, node, visibleRect);
                var name = isFailY(value, node, visibleRect);
                if (title || name) {
                    var type = data;
                    if (title) {
                        type = flip(data, /[lr]/gi, {
                            l: "r",
                            r: "l"
                        });
                    }
                    if (name) {
                        type = flip(data, /[tb]/gi, {
                            t: "b",
                            b: "t"
                        });
                    }
                    data = type;
                    i = options.offset || [0, 0];
                    p = options.targetOffset || [0, 0];
                }
                newOverflowCfg.adjustX = overflow.adjustX && title;
                newOverflowCfg.adjustY = overflow.adjustY && name;
                if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
                    child = function (e, t, c, overflow) {
                        var b = me.clone(e);
                        var a = {
                            width: t.width,
                            height: t.height
                        };
                        return overflow.adjustX && b.left < c.left && (b.left = c.left), overflow.resizeWidth && b.left >= c.left && b.left + a.width > c.right && (a.width -= b.left + a.width - c.right), overflow.adjustX && b.left + a.width > c.right && (b.left = Math.max(c.right - a.width, c.left)), overflow.adjustY && b.top < c.top && (b.top = c.top), overflow.resizeHeight && b.top >= c.top && b.top + a.height > c.bottom && (a.height -= b.top + a.height - c.bottom), overflow.adjustY && b.top + a.height > c.bottom &&
                            (b.top = Math.max(c.bottom - a.height, c.top)), me.mix(b, a);
                    }(value, node, visibleRect, newOverflowCfg);
                }
            }
            return child.width !== node.width && me.css(element, "width", me.width(element) + child.width - node.width), child.height !== node.height && me.css(element, "height", me.height(element) + child.height - node.height), me.offset(element, {
                left: child.left,
                top: child.top
            }, {
                useCssRight: options.useCssRight,
                useCssBottom: options.useCssBottom,
                useCssTransform: options.useCssTransform,
                ignoreShake: options.ignoreShake
            }), {
                points: data,
                offset: i,
                targetOffset: p,
                overflow: newOverflowCfg
            };
        }
        /**
         * @param {!Object} c
         * @param {?} e
         * @param {!Object} opts
         * @return {?}
         */
        function bindEvents(c, e, opts) {
            var el = opts.target || e;
            var rect = getRegion(el);
            /** @type {boolean} */
            var frameBuffer = !function (el, event) {
                var region = move(el, event);
                var pos = getRegion(el);
                return !region || pos.left + pos.width <= region.left || pos.top + pos.height <= region.top || pos.left >= region.right || pos.top >= region.bottom;
            }(el, opts.overflow && opts.overflow.alwaysByViewport);
            return draw(c, rect, opts, frameBuffer);
        }
        /**
         * @param {!Object} type
         * @param {?} next
         * @return {?}
         */
        function on(type, next) {
            /** @type {null} */
            var user = null;
            /** @type {null} */
            var c = null;
            var o = new Set(function (e) {
                var new_target = call(e, 1)[0].target;
                if (document.documentElement.contains(new_target)) {
                    var text = new_target.getBoundingClientRect();
                    var h = text.width;
                    var l = text.height;
                    /** @type {number} */
                    var u = Math.floor(h);
                    /** @type {number} */
                    var p = Math.floor(l);
                    if (!(user === u && c === p)) {
                        Promise.resolve().then(function () {
                            next({
                                width: u,
                                height: p
                            });
                        });
                    }
                    /** @type {number} */
                    user = u;
                    /** @type {number} */
                    c = p;
                }
            });
            return type && o.observe(type), function () {
                o.disconnect();
            };
        }
        /**
         * @param {?} callback
         * @return {?}
         */
        function findOrCreate(callback) {
            return "function" !== typeof callback ? null : callback();
        }
        /**
         * @param {!Object} error
         * @return {?}
         */
        function formatError(error) {
            return "object" === stringify(error) && error ? error : null;
        }
        /**
         * @return {undefined}
         */
        function ou() {
        }
        /**
         * @return {?}
         */
        function filterModelValue() {
            return "";
        }
        /**
         * @param {!Object} e
         * @return {?}
         */
        function TabbarDND_init(e) {
            return e ? e.ownerDocument : window.document;
        }
        /**
         * @param {string} value
         * @param {string} name
         * @param {string} options
         * @return {?}
         */
        function s(value, name, options) {
            return name || (options ? options[value] || options.other : void 0);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function click(options) {
            var path = options.prefixCls;
            var visible = options.visible;
            var tabHeads = options.children;
            var popup = options.popup;
            var verbose = options.popupClassName;
            var column = options.popupOffset;
            var data = options.disabled;
            var name = options.mode;
            var readOnlyFn = options.onVisibleChange;
            var that = React.useContext(componentName);
            var previousButtonBar = that.getPopupContainer;
            var value = that.rtl;
            var key_promises = that.subMenuOpenDelay;
            var keyfinder = that.subMenuCloseDelay;
            var defaults = that.builtinPlacements;
            var link = that.triggerSubMenuAction;
            var malakh = that.forceSubMenuRender;
            var status = that.rootClassName;
            var m = that.motion;
            var g = that.defaultMotions;
            var group = call(React.useState(false), 2);
            var endtoken = group[0];
            var allAnnotations = group[1];
            var corsOptions = assign(assign({}, value ? removeClass : partial), defaults);
            var axis = axes[name];
            var theirResource = assign(assign({}, s(name, m, g)), {}, {
                leavedClassName: "".concat(path, "-hidden"),
                removeOnLeave: false,
                motionAppear: true
            });
            var timer = React.useRef();
            return React.useEffect(function () {
                return timer.current = $timeout(function () {
                    allAnnotations(visible);
                }), function () {
                    $timeout.cancel(timer.current);
                };
            }, [visible]), React.createElement(PivotButton, {
                prefixCls: path,
                popupClassName: require()("".concat(path, "-popup"), debug({}, "".concat(path, "-rtl"), value), verbose, status),
                stretch: "horizontal" === name ? "minWidth" : null,
                getPopupContainer: previousButtonBar,
                builtinPlacements: corsOptions,
                popupPlacement: axis,
                popupVisible: endtoken,
                popup: popup,
                popupAlign: column && {
                    offset: column
                },
                action: data ? [] : [link],
                mouseEnterDelay: key_promises,
                mouseLeaveDelay: keyfinder,
                onPopupVisibleChange: readOnlyFn,
                forceRender: malakh,
                popupMotion: theirResource
            }, tabHeads);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function loop(options) {
            var libraryID = options.id;
            var openOpts = options.open;
            var currentPath = options.keyPath;
            var tabHeads = options.children;
            /** @type {string} */
            var name = "inline";
            var that = React.useContext(componentName);
            var x = that.prefixCls;
            var malakh = that.forceSubMenuRender;
            var m = that.motion;
            var g = that.defaultMotions;
            var mode = that.mode;
            var o = React.useRef(false);
            /** @type {boolean} */
            o.current = mode === name;
            var data = call(React.useState(!o.current), 2);
            var ns = data[0];
            var i = data[1];
            var selected = !!o.current && openOpts;
            React.useEffect(function () {
                if (o.current) {
                    i(false);
                }
            }, [mode]);
            var props = assign({}, s(name, m, g));
            if (currentPath.length > 1) {
                /** @type {boolean} */
                props.motionAppear = false;
            }
            /** @type {function(?): ?} */
            var showTooltip = props.onVisibleChanged;
            return props.onVisibleChanged = function (callback) {
                return o.current || callback || i(true), null === showTooltip || void 0 === showTooltip ? void 0 : showTooltip(callback);
            }, ns ? null : React.createElement(element, {
                mode: name,
                locked: !o.current
            }, React.createElement(PatchItem, _extends({
                visible: selected
            }, props, {
                forceRender: malakh,
                removeOnLeave: false,
                leavedClassName: "".concat(x, "-hidden")
            }), function (obj) {
                var buttonClass = obj.className;
                var style = obj.style;
                return React.createElement(CalendarHeader, {
                    id: libraryID,
                    className: buttonClass,
                    style: style
                }, tabHeads);
            }));
        }
        /**
         * @param {!Object} props
         * @return {?}
         */
        function Button(props) {
            var value;
            var key = props.eventKey;
            var s = props.children;
            var left = dispatch(key);
            var text = repeat(s, left);
            var html = _possibleConstructorReturn();
            return React.useEffect(function () {
                if (html) {
                    return html.registerPath(key, left), function () {
                        html.unregisterPath(key, left);
                    };
                }
            }, [left]), value = html ? text : React.createElement(render, props, text), React.createElement(scripts.Provider, {
                value: left
            }, value);
        }
        /**
         * @param {!Element} el
         * @return {?}
         */
        function mousedown(el) {
            var err = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (isElementVisible(el)) {
                var type = el.nodeName.toLowerCase();
                var selected = ["input", "select", "textarea", "button"].includes(type) || el.isContentEditable || "a" === type && !!el.getAttribute("href");
                var obj = el.getAttribute("tabindex");
                /** @type {number} */
                var value = Number(obj);
                /** @type {null} */
                var i = null;
                return obj && !Number.isNaN(value) ? i = value : selected && null === i && (i = 0), selected && el.disabled && (i = null), null !== i && (i >= 0 || err && i < 0);
            }
            return false;
        }
        /**
         * @param {!Node} p
         * @return {?}
         */
        function mouseDown(p) {
            var inCircles = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            var prompt1 = resolve(p.querySelectorAll("*")).filter(function (e) {
                return mousedown(e, inCircles);
            });
            return mousedown(p, inCircles) && prompt1.unshift(p), prompt1;
        }
        /**
         * @param {!Node} e
         * @param {!Set} obj
         * @return {?}
         */
        function remove(e, obj) {
            return mouseDown(e, true).filter(function (val) {
                return obj.has(val);
            });
        }
        /**
         * @param {!Node} list
         * @param {!Set} key
         * @param {?} data
         * @return {?}
         */
        function clean(list, key, data) {
            var startPos = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
            if (!list) {
                return null;
            }
            var array = remove(list, key);
            var length = array.length;
            var i = array.findIndex(function (nodemon) {
                return data === nodemon;
            });
            return startPos < 0 ? -1 === i ? i = length - 1 : i = i - 1 : startPos > 0 && (i = i + 1), array[i = (i + length) % length];
        }
        /**
         * @param {undefined} elem
         * @param {!Object} key
         * @param {number} list
         * @param {!Array} e
         * @param {!Object} tree
         * @param {?} query
         * @param {?} dom
         * @param {?} selector
         * @param {!Function} callback
         * @param {!Array} handler
         * @return {?}
         */
        function addListeners(elem, key, list, e, tree, query, dom, selector, callback, handler) {
            var timer = React.useRef();
            var config = React.useRef();
            /** @type {!Object} */
            config.current = key;
            /**
             * @return {undefined}
             */
            var click = function () {
                $timeout.cancel(timer.current);
            };
            return React.useEffect(function () {
                return function () {
                    click();
                };
            }, []), function (event) {
                var type = event.which;
                if ([].concat(rv, [k, keyName, dir, number]).includes(type)) {
                    var options;
                    var order;
                    var utils;
                    /**
                     * @return {?}
                     */
                    var add = function () {
                        return options = new Set, order = new Map, utils = new Map, query().forEach(function (key) {
                            /** @type {(Element|null)} */
                            var value = document.querySelector("[data-menu-id='".concat(eq(e, key), "']"));
                            if (value) {
                                options.add(value);
                                utils.set(value, key);
                                order.set(key, value);
                            }
                        }), options;
                    };
                    add();
                    var element = function (element, observable) {
                        var el = element || document.activeElement;
                        for (; el;) {
                            if (observable.has(el)) {
                                return el;
                            }
                            el = el.parentElement;
                        }
                        return null;
                    }(order.get(key), options);
                    var html = utils.get(element);
                    var node = function (x, isDev, vertical, name) {
                        var err;
                        var _TOOL2MODE;
                        var path;
                        var processedOptions;
                        /** @type {string} */
                        var p = "prev";
                        /** @type {string} */
                        var newPos = "next";
                        /** @type {string} */
                        var result = "children";
                        /** @type {string} */
                        var offset = "parent";
                        if ("inline" === x && name === k) {
                            return {
                                inlineTrigger: true
                            };
                        }
                        var inline = (debug(err = {}, domain, p), debug(err, length, newPos), err);
                        var TOOL2MODE = (debug(_TOOL2MODE = {}, w, vertical ? newPos : p), debug(_TOOL2MODE, cacheKey, vertical ? p : newPos), debug(_TOOL2MODE, length, result), debug(_TOOL2MODE, k, result), _TOOL2MODE);
                        var packVertical = (debug(path = {}, domain, p), debug(path, length, newPos), debug(path, k, result), debug(path, keyName, offset), debug(path, w, vertical ? result : offset), debug(path, cacheKey, vertical ? offset : result), path);
                        switch (null === (processedOptions = {
                            inline: inline,
                            horizontal: TOOL2MODE,
                            vertical: packVertical,
                            inlineSub: inline,
                            horizontalSub: packVertical,
                            verticalSub: packVertical
                        }["".concat(x).concat(isDev ? "" : "Sub")]) || void 0 === processedOptions ? void 0 : processedOptions[name]) {
                            case p:
                                return {
                                    offset: -1,
                                    sibling: true
                                };
                            case newPos:
                                return {
                                    offset: 1,
                                    sibling: true
                                };
                            case offset:
                                return {
                                    offset: -1,
                                    sibling: false
                                };
                            case result:
                                return {
                                    offset: 1,
                                    sibling: false
                                };
                            default:
                                return null;
                        }
                    }(elem, 1 === dom(html, true).length, list, type);
                    if (!node && type !== dir && type !== number) {
                        return;
                    }
                    if (rv.includes(type) || [dir, number].includes(type)) {
                        event.preventDefault();
                    }
                    /**
                     * @param {!Object} elem
                     * @return {undefined}
                     */
                    var update = function (elem) {
                        if (elem) {
                            /** @type {!Object} */
                            var node = elem;
                            var n = elem.querySelector("a");
                            if (null === n || void 0 === n ? void 0 : n.getAttribute("href")) {
                                node = n;
                            }
                            var item = utils.get(elem);
                            selector(item);
                            click();
                            timer.current = $timeout(function () {
                                if (config.current === item) {
                                    node.focus();
                                }
                            });
                        }
                    };
                    if ([dir, number].includes(type) || node.sibling || !element) {
                        var value;
                        var cur;
                        var args = remove(value = element && "inline" !== elem ? function (suppressDisabledCheck) {
                            var climbElement = suppressDisabledCheck;
                            for (; climbElement;) {
                                if (climbElement.getAttribute("data-menu-list")) {
                                    return climbElement;
                                }
                                climbElement = climbElement.parentElement;
                            }
                            return null;
                        }(element) : tree.current, options);
                        cur = type === dir ? args[0] : type === number ? args[args.length - 1] : clean(value, options, element, node.offset);
                        update(cur);
                    } else {
                        if (node.inlineTrigger) {
                            callback(html);
                        } else {
                            if (node.offset > 0) {
                                callback(html, true);
                                click();
                                timer.current = $timeout(function () {
                                    add();
                                    var id = element.getAttribute("aria-controls");
                                    var cur = clean(document.getElementById(id), options);
                                    update(cur);
                                }, 5);
                            } else {
                                if (node.offset < 0) {
                                    var style = dom(html, true);
                                    var name = style[style.length - 2];
                                    var local = order.get(name);
                                    callback(name, false);
                                    update(local);
                                }
                            }
                        }
                    }
                }
                if (!(null === handler || void 0 === handler)) {
                    handler(event);
                }
            };
        }
        /**
         * @return {?}
         */
        function build() {
            var deviceCall = call(React.useState({}), 2)[1];
            var NodeMap = (0, React.useRef)(new Map);
            var MapReference = (0, React.useRef)(new Map);
            var name = call(React.useState([]), 2);
            var obj = name[0];
            var template = name[1];
            var state = (0, React.useRef)(0);
            var timestampGenerator = (0, React.useRef)(false);
            var f = (0, React.useCallback)(function (e, table) {
                var container = createNode(table);
                MapReference.current.set(container, e);
                NodeMap.current.set(e, container);
                state.current += 1;
                var click;
                var page = state.current;
                /**
                 * @return {undefined}
                 */
                click = function () {
                    if (page === state.current) {
                        if (!timestampGenerator.current) {
                            deviceCall({});
                        }
                    }
                };
                Promise.resolve().then(click);
            }, []);
            var d = (0, React.useCallback)(function (collisionType, query) {
                var child = createNode(query);
                MapReference.current.delete(child);
                NodeMap.current.delete(collisionType);
            }, []);
            var p = (0, React.useCallback)(function (listItm) {
                template(listItm);
            }, []);
            var extractDomains = (0, React.useCallback)(function (paramName, lib) {
                var r = NodeMap.current.get(paramName) || "";
                var path = r.split(href);
                return lib && obj.includes(path[0]) && path.unshift(prop), path;
            }, [obj]);
            var h = (0, React.useCallback)(function (featureObjs, newScaleKey) {
                return featureObjs.some(function (url) {
                    return extractDomains(url, true).includes(newScaleKey);
                });
            }, [extractDomains]);
            var m = (0, React.useCallback)(function (e) {
                /** @type {string} */
                var endingTagName = "".concat(NodeMap.current.get(e)).concat(href);
                /** @type {!Set} */
                var result = new Set;
                return resolve(MapReference.current.keys()).forEach(function (tagName) {
                    if (tagName.startsWith(endingTagName)) {
                        result.add(MapReference.current.get(tagName));
                    }
                }), result;
            }, []);
            return React.useEffect(function () {
                return function () {
                    /** @type {boolean} */
                    timestampGenerator.current = true;
                };
            }, []), {
                registerPath: f,
                unregisterPath: d,
                refreshOverflowKeys: p,
                isSubPathKey: h,
                getKeyPath: extractDomains,
                getKeys: function () {
                    var exclude = resolve(NodeMap.current.keys());
                    return obj.length && exclude.push(prop), exclude;
                },
                getSubPathKeys: m
            };
        }
        /**
         * @param {!Object} data
         * @return {?}
         */
        function option(data) {
            var n = data.children;
            var obj = get(data, then);
            var text = repeat(n, dispatch(obj.eventKey));
            return _possibleConstructorReturn() ? text : React.createElement(view, apply(obj, ["warnKey"]), text);
        }
        /**
         * @param {!Element} data
         * @return {?}
         */
        function Group(data) {
            var classes = data.className;
            var dialog = data.style;
            var predicted_answer = React.useContext(componentName).prefixCls;
            return _possibleConstructorReturn() ? null : React.createElement("li", {
                className: require()("".concat(predicted_answer, "-item-divider"), classes),
                style: dialog
            });
        }
        /**
         * @param {!Object} options
         * @param {!Function} n
         * @return {?}
         */
        function open(options, n) {
            var allowError = options.arrow;
            var error = void 0 !== allowError && allowError;
            var data = options.prefixCls;
            var str = void 0 === data ? "rc-dropdown" : data;
            var sTransitionName = options.transitionName;
            var animationOptions = options.animation;
            var align = options.align;
            var key = options.placement;
            var newElKey = void 0 === key ? "bottomLeft" : key;
            var object = options.placements;
            var type = void 0 === object ? out : object;
            var readOnlyFn = options.getPopupContainer;
            var pagesToDisplay = options.showAction;
            var outFile = options.hideAction;
            var aglexConfig = options.overlayClassName;
            var gen_code_options = options.overlayStyle;
            var dryRun = options.visible;
            var b = options.trigger;
            var me = void 0 === b ? ["hover"] : b;
            var autoFocus = options.autoFocus;
            var context = get(options, elementId);
            var result = call(React.useState(), 2);
            var length = result[0];
            var $ = result[1];
            var asValue = "visible" in options ? dryRun : length;
            var editor = React.useRef(null);
            React.useImperativeHandle(n, function () {
                return editor.current;
            });
            (function (config) {
                var visible = config.visible;
                var getWavFile2 = config.setTriggerVisible;
                var branch = config.triggerRef;
                var map = config.onVisibleChange;
                var options = config.autoFocus;
                var timestampGenerator = React.useRef(false);
                /**
                 * @return {undefined}
                 */
                var onmessage = function () {
                    var _ref;
                    var helper;
                    var r;
                    var focus;
                    if (visible && branch.current) {
                        if (!(null === (_ref = branch.current) || void 0 === _ref || null === (helper = _ref.triggerRef) || void 0 === helper || null === (r = helper.current) || void 0 === r || null === (focus = r.focus) || void 0 === focus)) {
                            focus.call(r);
                        }
                        getWavFile2(false);
                        if ("function" === typeof map) {
                            map(false);
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                var update = function () {
                    var _ref;
                    var tokens;
                    var token;
                    var login;
                    var a = mouseDown(null === (_ref = branch.current) || void 0 === _ref || null === (tokens = _ref.popupRef) || void 0 === tokens || null === (token = tokens.current) || void 0 === token || null === (login = token.getElement) || void 0 === login ? void 0 : login.call(token))[0];
                    return !!(null === a || void 0 === a ? void 0 : a.focus) && (a.focus(), timestampGenerator.current = true, true);
                };
                /**
                 * @param {!Event} event
                 * @return {undefined}
                 */
                var fn = function (event) {
                    switch (event.keyCode) {
                        case lockForEditingKeycode:
                            onmessage();
                            break;
                        case quasimodeKeycode:
                            /** @type {boolean} */
                            var new_el = false;
                            if (!timestampGenerator.current) {
                                new_el = update();
                            }
                            if (new_el) {
                                event.preventDefault();
                            } else {
                                onmessage();
                            }
                    }
                };
                React.useEffect(function () {
                    return visible ? (window.addEventListener("keydown", fn), options && $timeout(update, 3), function () {
                        window.removeEventListener("keydown", fn);
                        /** @type {boolean} */
                        timestampGenerator.current = false;
                    }) : function () {
                        /** @type {boolean} */
                        timestampGenerator.current = false;
                    };
                }, [visible]);
            })({
                visible: asValue,
                setTriggerVisible: $,
                triggerRef: editor,
                onVisibleChange: options.onVisibleChange,
                autoFocus: autoFocus
            });
            /**
             * @return {?}
             */
            var render = function () {
                var scm_branches = function () {
                    var fn = options.overlay;
                    return "function" === typeof fn ? fn() : fn;
                }();
                return React.createElement(React.Fragment, null, error && React.createElement("div", {
                    className: "".concat(str, "-arrow")
                }), scm_branches);
            };
            var originalOutFile = outFile;
            return originalOutFile || -1 === me.indexOf("contextMenu") || (originalOutFile = ["click"]), React.createElement(PivotButton, assign(assign({
                builtinPlacements: type
            }, context), {}, {
                prefixCls: str,
                ref: editor,
                popupClassName: require()(aglexConfig, debug({}, "".concat(str, "-show-arrow"), error)),
                popupStyle: gen_code_options,
                action: me,
                showAction: pagesToDisplay,
                hideAction: originalOutFile || [],
                popupPlacement: newElKey,
                popupAlign: align,
                popupTransitionName: sTransitionName,
                popupAnimation: animationOptions,
                popupVisible: asValue,
                stretch: function () {
                    var dryRun = options.minOverlayWidthMatchTrigger;
                    var readOnlyFn = options.alignPoint;
                    return "minOverlayWidthMatchTrigger" in options ? dryRun : !readOnlyFn;
                }() ? "minWidth" : "",
                popup: "function" === typeof options.overlay ? render : render(),
                onPopupVisibleChange: function (mirror) {
                    var wrap = options.onVisibleChange;
                    $(mirror);
                    if ("function" === typeof wrap) {
                        wrap(mirror);
                    }
                },
                onPopupClick: function (e) {
                    var halfcondition = options.onOverlayClick;
                    $(false);
                    if (halfcondition) {
                        halfcondition(e);
                    }
                },
                getPopupContainer: readOnlyFn
            }), function () {
                var result = options.children;
                var imports = result.props ? result.props : {};
                var langClass = require()(imports.className, function () {
                    var translatedStr = options.openClassName;
                    return void 0 !== translatedStr ? translatedStr : "".concat(str, "-open");
                }());
                return asValue && result ? React.cloneElement(result, {
                    className: langClass
                }) : result;
            }());
        }
        /**
         * @param {!Object} options
         * @param {string} model
         * @return {?}
         */
        function Form(options, model) {
            var name = options.prefixCls;
            var scope = options.editable;
            var code = options.locale;
            var textStyle = options.style;
            return scope && false !== scope.showAdd ? React.createElement("button", {
                ref: model,
                type: "button",
                className: "".concat(name, "-nav-add"),
                style: textStyle,
                "aria-label": (null === code || void 0 === code ? void 0 : code.addAriaLabel) || "Add tab",
                onClick: function (event) {
                    scope.onEdit("add", {
                        event: event
                    });
                }
            }, scope.addIcon || "+") : null;
        }
        /**
         * @param {!Object} self
         * @param {string} editor
         * @return {?}
         */
        function setup(self, editor) {
            /**
             * @param {number} _
             * @return {?}
             */
            function outputGradient(_) {
                var data = temp.filter(function (showCalloutAnimation) {
                    return !showCalloutAnimation.disabled;
                });
                var name = data.findIndex(function (data) {
                    return data.key === node;
                }) || 0;
                var d = data.length;
                /** @type {number} */
                var b = 0;
                for (; b < d; b = b + 1) {
                    var i = data[name = (name + _ + d) % d];
                    if (!i.disabled) {
                        return void $(i.key);
                    }
                }
            }
            var opt = self.prefixCls;
            var name = self.id;
            var temp = self.tabs;
            var code = self.locale;
            var u = self.mobile;
            var boxInput = self.moreIcon;
            var categories = void 0 === boxInput ? "More" : boxInput;
            var prefix = self.moreTransitionName;
            var style = self.style;
            var classes = self.className;
            var me = self.editable;
            var max = self.tabBarGutter;
            var options = self.rtl;
            var next = self.removeAriaLabel;
            var action = self.onTabClick;
            var hparent = self.getPopupContainer;
            var declarations = self.popupClassName;
            var data = call((0, React.useState)(false), 2);
            var passid = data[0];
            var eraseResultWindow = data[1];
            var result = call((0, React.useState)(null), 2);
            var node = result[0];
            var $ = result[1];
            /** @type {string} */
            var id = "".concat(name, "-more-popup");
            /** @type {string} */
            var key = "".concat(opt, "-dropdown");
            /** @type {(null|string)} */
            var context = null !== node ? "".concat(id, "-").concat(node) : null;
            var R = null === code || void 0 === code ? void 0 : code.dropdownAriaLabel;
            var images = React.createElement(content, {
                onClick: function (e) {
                    var path = e.key;
                    var event = e.domEvent;
                    action(path, event);
                    eraseResultWindow(false);
                },
                prefixCls: "".concat(key, "-menu"),
                id: id,
                tabIndex: -1,
                role: "listbox",
                "aria-activedescendant": context,
                selectedKeys: [node],
                "aria-label": void 0 !== R ? R : "expanded dropdown"
            }, temp.map(function (options) {
                var tick = me && false !== options.closable && !options.disabled;
                return React.createElement(Item, {
                    key: options.key,
                    id: "".concat(id, "-").concat(options.key),
                    role: "option",
                    "aria-controls": name && "".concat(name, "-panel-").concat(options.key),
                    disabled: options.disabled
                }, React.createElement("span", null, options.tab), tick && React.createElement("button", {
                    type: "button",
                    "aria-label": next || "remove",
                    tabIndex: 0,
                    className: "".concat(key, "-menu-item-remove"),
                    onClick: function (e) {
                        e.stopPropagation();
                        (function (event, awsKey) {
                            event.preventDefault();
                            event.stopPropagation();
                            me.onEdit("remove", {
                                key: awsKey,
                                event: event
                            });
                        })(e, options.key);
                    }
                }, options.closeIcon || me.removeIcon || "\u00d7"));
            }));
            (0, React.useEffect)(function () {
                /** @type {(Element|null)} */
                var firstError = document.getElementById(context);
                if (firstError && firstError.scrollIntoView) {
                    firstError.scrollIntoView(false);
                }
            }, [node]);
            (0, React.useEffect)(function () {
                if (!passid) {
                    $(null);
                }
            }, [passid]);
            var d = debug({}, options ? "marginRight" : "marginLeft", max);
            if (!temp.length) {
                /** @type {string} */
                d.visibility = "hidden";
                /** @type {number} */
                d.order = 1;
            }
            var aglexConfig = require()(debug({}, "".concat(key, "-rtl"), options));
            var url = u ? null : React.createElement(z, {
                prefixCls: key,
                overlay: images,
                trigger: ["hover"],
                visible: !!temp.length && passid,
                transitionName: prefix,
                onVisibleChange: eraseResultWindow,
                overlayClassName: require()(aglexConfig, declarations),
                mouseEnterDelay: .1,
                mouseLeaveDelay: .1,
                getPopupContainer: hparent
            }, React.createElement("button", {
                type: "button",
                className: "".concat(opt, "-nav-more"),
                style: d,
                tabIndex: -1,
                "aria-hidden": "true",
                "aria-haspopup": "listbox",
                "aria-controls": id,
                id: "".concat(name, "-more"),
                "aria-expanded": passid,
                onKeyDown: function (event) {
                    var keyCode = event.which;
                    if (passid) {
                        switch (keyCode) {
                            case key.UP:
                                outputGradient(-1);
                                event.preventDefault();
                                break;
                            case key.DOWN:
                                outputGradient(1);
                                event.preventDefault();
                                break;
                            case key.ESC:
                                eraseResultWindow(false);
                                break;
                            case key.SPACE:
                            case key.ENTER:
                                if (null !== node) {
                                    action(node, event);
                                }
                        }
                    } else {
                        if ([key.DOWN, key.SPACE, key.ENTER].includes(keyCode)) {
                            eraseResultWindow(true);
                            event.preventDefault();
                        }
                    }
                }
            }, categories));
            return React.createElement("div", {
                className: require()("".concat(opt, "-nav-operations"), classes),
                style: style,
                ref: editor
            }, url, React.createElement(TabTemplate, {
                prefixCls: opt,
                locale: code,
                editable: me
            }));
        }
        /**
         * @param {!Function} key
         * @param {!Function} cb
         * @return {?}
         */
        function migrateAnonDrive(key, cb) {
            var options = React.useRef(key);
            var cb = call(React.useState({}), 2)[1];
            return [options.current, function (value) {
                var num = "function" === typeof value ? value(options.current) : value;
                if (num !== options.current) {
                    cb(num, options.current);
                }
                options.current = num;
                cb({});
            }];
        }
        /**
         * @param {!Object} options
         * @param {string} section
         * @return {?}
         */
        function init(options, section) {
            /**
             * @param {number} r
             * @return {?}
             */
            function abs(r) {
                return r < n ? n : r > x ? x : r;
            }
            /**
             * @return {undefined}
             */
            function stop() {
                buildLayoutString(Date.now());
            }
            /**
             * @return {undefined}
             */
            function next() {
                window.clearTimeout(_private.current);
            }
            /**
             * @return {undefined}
             */
            function action() {
                var image = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : index;
                var offset = groups.get(image) || {
                    width: 0,
                    height: 0,
                    left: 0,
                    right: 0,
                    top: 0
                };
                if (error) {
                    var x = x1;
                    if (rtl) {
                        if (offset.right < x1) {
                            /** @type {number} */
                            x = offset.right;
                        } else {
                            if (offset.right + offset.width > x1 + size) {
                                /** @type {number} */
                                x = offset.right + offset.width - size;
                            }
                        }
                    } else {
                        if (offset.left < -x1) {
                            /** @type {number} */
                            x = -offset.left;
                        } else {
                            if (offset.left + offset.width > -x1 + size) {
                                /** @type {number} */
                                x = -(offset.left + offset.width - size);
                            }
                        }
                    }
                    min(0);
                    floor(abs(x));
                } else {
                    var y = h;
                    if (offset.top < -h) {
                        /** @type {number} */
                        y = -offset.top;
                    } else {
                        if (offset.top + offset.height > -h + j) {
                            /** @type {number} */
                            y = -(offset.top + offset.height - j);
                        }
                    }
                    floor(0);
                    min(abs(y));
                }
            }
            /**
             * @return {undefined}
             */
            function toggleTapDisabled() {
                $timeout.cancel(timer.current);
            }
            var _songs$push2;
            var component = React.useContext(context);
            var id = component.prefixCls;
            var tabs = component.tabs;
            var classes = options.className;
            var textStyle = options.style;
            var libraryID = options.id;
            var video = options.animated;
            var index = options.activeKey;
            var rtl = options.rtl;
            var extra = options.extra;
            var editable = options.editable;
            var code = options.locale;
            var undefined = options.tabPosition;
            var transform = options.tabBarGutter;
            var trackers = options.children;
            var d = options.onTabClick;
            var callback = options.onTabScroll;
            var _this = (0, React.useRef)();
            var value = (0, React.useRef)();
            var onRefChagne = (0, React.useRef)();
            var node = (0, React.useRef)();
            var level = function () {
                var membrane = (0, React.useRef)(new Map);
                return [function (b) {
                    return membrane.current.has(b) || membrane.current.set(b, React.createRef()), membrane.current.get(b);
                }, function (collisionType) {
                    membrane.current.delete(collisionType);
                }];
            }();
            var label = call(level, 2);
            var get = label[0];
            var setStyle = label[1];
            /** @type {boolean} */
            var error = "top" === undefined || "bottom" === undefined;
            var res = call(migrateAnonDrive(0, function (x, cx) {
                if (error && callback) {
                    callback({
                        direction: x > cx ? "left" : "right"
                    });
                }
            }), 2);
            var x1 = res[0];
            var floor = res[1];
            var hidden = call(migrateAnonDrive(0, function (distY, cy) {
                if (!error && callback) {
                    callback({
                        direction: distY > cy ? "top" : "bottom"
                    });
                }
            }), 2);
            var h = hidden[0];
            var min = hidden[1];
            var match = call((0, React.useState)(0), 2);
            var width = match[0];
            var last = match[1];
            var data = call((0, React.useState)(0), 2);
            var max = data[0];
            var filter = data[1];
            var group = call((0, React.useState)(null), 2);
            var size = group[0];
            var start = group[1];
            var coordsOfTerritoriesToSplit = call((0, React.useState)(null), 2);
            var j = coordsOfTerritoriesToSplit[0];
            var i = coordsOfTerritoriesToSplit[1];
            var blue = call((0, React.useState)(0), 2);
            var b = blue[0];
            var isNaN = blue[1];
            var ret = call((0, React.useState)(0), 2);
            var ch = ret[0];
            var val = ret[1];
            var stylesheet = function (fn) {
                var correction = (0, React.useRef)([]);
                var updateDevicesAfterDelay = call((0, React.useState)({}), 2)[1];
                var diff = (0, React.useRef)("function" === typeof fn ? fn() : fn);
                var throttled2 = throttle(function () {
                    var t = diff.current;
                    correction.current.forEach(function (walk) {
                        t = walk(t);
                    });
                    /** @type {!Array} */
                    correction.current = [];
                    diff.current = t;
                    updateDevicesAfterDelay({});
                });
                return [diff.current, function (e) {
                    correction.current.push(e);
                    throttled2();
                }];
            }(new Map);
            var results = call(stylesheet, 2);
            var form = results[0];
            var sublimeTextRender = results[1];
            var groups = function (t, context, dst_w) {
                return (0, React.useMemo)(function () {
                    var phase;
                    /** @type {!Map} */
                    var obj = new Map;
                    var loc = context.get(null === (phase = t[0]) || void 0 === phase ? void 0 : phase.key) || location;
                    var width = loc.left + loc.width;
                    /** @type {number} */
                    var k = 0;
                    for (; k < t.length; k = k + 1) {
                        var phase;
                        var value = t[k].key;
                        var node = context.get(value);
                        if (!node) {
                            node = context.get(null === (phase = t[k - 1]) || void 0 === phase ? void 0 : phase.key) || location;
                        }
                        var margin = obj.get(value) || assign({}, node);
                        /** @type {number} */
                        margin.right = width - margin.left - margin.width;
                        obj.set(value, margin);
                    }
                    return obj;
                }, [t.map(function (shortcutKeyObject) {
                    return shortcutKeyObject.key;
                }).join("_"), context, dst_w]);
            }(tabs, form, width);
            /** @type {string} */
            var polite = "".concat(id, "-nav-operations-hidden");
            /** @type {number} */
            var n = 0;
            /** @type {number} */
            var x = 0;
            if (error) {
                if (rtl) {
                    /** @type {number} */
                    n = 0;
                    /** @type {number} */
                    x = Math.max(0, width - size);
                } else {
                    /** @type {number} */
                    n = Math.min(0, size - width);
                    /** @type {number} */
                    x = 0;
                }
            } else {
                /** @type {number} */
                n = Math.min(0, j - max);
                /** @type {number} */
                x = 0;
            }
            var _private = (0, React.useRef)();
            var animations = call((0, React.useState)(), 2);
            var animation = animations[0];
            var buildLayoutString = animations[1];
            !function (b, $) {
                var group = call((0, React.useState)(), 2);
                var start = group[0];
                var distanceBetween = group[1];
                var data = call((0, React.useState)(0), 2);
                var v = data[0];
                var zoom = data[1];
                var black = call((0, React.useState)(0), 2);
                var snap = black[0];
                var abs = black[1];
                var blank = call((0, React.useState)(), 2);
                var btn6_7 = blank[0];
                var extend = blank[1];
                var $this = (0, React.useRef)();
                var point = (0, React.useRef)();
                var Paint = (0, React.useRef)(null);
                Paint.current = {
                    onTouchStart: function (event) {
                        var first = event.touches[0];
                        var x = first.screenX;
                        var y = first.screenY;
                        distanceBetween({
                            x: x,
                            y: y
                        });
                        window.clearInterval($this.current);
                    },
                    onTouchMove: function (event) {
                        if (start) {
                            event.preventDefault();
                            var first = event.touches[0];
                            var x = first.screenX;
                            var y = first.screenY;
                            distanceBetween({
                                x: x,
                                y: y
                            });
                            /** @type {number} */
                            var result = x - start.x;
                            /** @type {number} */
                            var i = y - start.y;
                            $(result, i);
                            /** @type {number} */
                            var value = Date.now();
                            zoom(value);
                            abs(value - v);
                            extend({
                                x: result,
                                y: i
                            });
                        }
                    },
                    onTouchEnd: function () {
                        if (start && (distanceBetween(null), extend(null), btn6_7)) {
                            /** @type {number} */
                            var ratio = btn6_7.x / snap;
                            /** @type {number} */
                            var i = btn6_7.y / snap;
                            /** @type {number} */
                            var first = Math.abs(ratio);
                            /** @type {number} */
                            var x = Math.abs(i);
                            if (Math.max(first, x) < .1) {
                                return;
                            }
                            /** @type {number} */
                            var scale = ratio;
                            /** @type {number} */
                            var u = i;
                            $this.current = window.setInterval(function () {
                                if (Math.abs(scale) < .01 && Math.abs(u) < .01) {
                                    window.clearInterval($this.current);
                                } else {
                                    $(20 * (scale = scale * zoomScale), 20 * (u = u * zoomScale));
                                }
                            }, 20);
                        }
                    },
                    onWheel: function (event) {
                        var x = event.deltaX;
                        var deltaY = event.deltaY;
                        /** @type {number} */
                        var delta = 0;
                        /** @type {number} */
                        var j = Math.abs(x);
                        /** @type {number} */
                        var y = Math.abs(deltaY);
                        if (j === y) {
                            delta = "x" === point.current ? x : deltaY;
                        } else {
                            if (j > y) {
                                delta = x;
                                /** @type {string} */
                                point.current = "x";
                            } else {
                                delta = deltaY;
                                /** @type {string} */
                                point.current = "y";
                            }
                        }
                        if ($(-delta, -delta)) {
                            event.preventDefault();
                        }
                    }
                };
                React.useEffect(function () {
                    /**
                     * @param {!Event} e
                     * @return {undefined}
                     */
                    function touchmove(e) {
                        Paint.current.onTouchMove(e);
                    }
                    /**
                     * @param {?} e
                     * @return {undefined}
                     */
                    function onTouchMove(e) {
                        Paint.current.onTouchEnd(e);
                    }
                    return document.addEventListener("touchmove", touchmove, {
                        passive: false
                    }), document.addEventListener("touchend", onTouchMove, {
                        passive: false
                    }), b.current.addEventListener("touchstart", function (e) {
                        Paint.current.onTouchStart(e);
                    }, {
                        passive: false
                    }), b.current.addEventListener("wheel", function (event) {
                        Paint.current.onWheel(event);
                    }), function () {
                        document.removeEventListener("touchmove", touchmove);
                        document.removeEventListener("touchend", onTouchMove);
                    };
                }, []);
            }(_this, function (identity, iteratee) {
                /**
                 * @param {?} op
                 * @param {number} value
                 * @return {undefined}
                 */
                function func(op, value) {
                    op(function (left) {
                        return abs(left + value);
                    });
                }
                if (error) {
                    if (size >= width) {
                        return false;
                    }
                    func(floor, identity);
                } else {
                    if (j >= max) {
                        return false;
                    }
                    func(min, iteratee);
                }
                return next(), stop(), true;
            });
            (0, React.useEffect)(function () {
                return next(), animation && (_private.current = window.setTimeout(function () {
                    buildLayoutString(0);
                }, 100)), next;
            }, [animation]);
            var model = function (array, values, colorData, r, me) {
                var j;
                var l;
                var currentEnd;
                var d = me.tabs;
                var tabPosition = me.tabPosition;
                var border = me.rtl;
                if (["top", "bottom"].includes(tabPosition)) {
                    /** @type {string} */
                    j = "width";
                    /** @type {string} */
                    l = border ? "right" : "left";
                    /** @type {number} */
                    currentEnd = Math.abs(values.left);
                } else {
                    /** @type {string} */
                    j = "height";
                    /** @type {string} */
                    l = "top";
                    /** @type {number} */
                    currentEnd = -values.top;
                }
                var b = values[j];
                var a = colorData[j];
                var offset = r[j];
                var x = b;
                return a + offset > b && a < b && (x = b - offset), (0, React.useMemo)(function () {
                    if (!d.length) {
                        return [0, 0];
                    }
                    var width = d.length;
                    var left = width;
                    /** @type {number} */
                    var i = 0;
                    for (; i < width; i = i + 1) {
                        var nums = array.get(d[i].key) || bb;
                        if (nums[l] + nums[j] > currentEnd + x) {
                            /** @type {number} */
                            left = i - 1;
                            break;
                        }
                    }
                    /** @type {number} */
                    var e = 0;
                    /** @type {number} */
                    var s = width - 1;
                    for (; s >= 0; s = s - 1) {
                        if ((array.get(d[s].key) || bb)[l] < currentEnd) {
                            /** @type {number} */
                            e = s + 1;
                            break;
                        }
                    }
                    return [e, left];
                }, [array, currentEnd, x, tabPosition, d.map(function (shortcutKeyObject) {
                    return shortcutKeyObject.key;
                }).join("_"), border]);
            }(groups, {
                width: size,
                height: j,
                left: x1,
                top: h
            }, {
                width: width,
                height: max
            }, {
                width: b,
                height: ch
            }, assign(assign({}, options), {}, {
                tabs: tabs
            }));
            var black = call(model, 2);
            var off = black[0];
            var idx = black[1];
            var css = {};
            if ("top" === undefined || "bottom" === undefined) {
                css[rtl ? "marginRight" : "marginLeft"] = transform;
            } else {
                css.marginTop = transform;
            }
            var categories = tabs.map(function (item, n) {
                var name = item.key;
                return React.createElement(SettingsGridSectionBulkActionsFieldset, {
                    id: libraryID,
                    prefixCls: id,
                    key: name,
                    tab: item,
                    style: 0 === n ? void 0 : css,
                    closable: item.closable,
                    editable: editable,
                    active: name === index,
                    renderWrapper: trackers,
                    removeAriaLabel: null === code || void 0 === code ? void 0 : code.removeAriaLabel,
                    ref: get(name),
                    onClick: function (e) {
                        d(name, e);
                    },
                    onRemove: function () {
                        setStyle(name);
                    },
                    onFocus: function () {
                        action(name);
                        stop();
                        if (_this.current) {
                            if (!rtl) {
                                /** @type {number} */
                                _this.current.scrollLeft = 0;
                            }
                            /** @type {number} */
                            _this.current.scrollTop = 0;
                        }
                    }
                });
            });
            var resize = throttle(function () {
                var ref;
                var data;
                var current;
                var next;
                var currentObject;
                var ptr;
                var cmApp = (null === (ref = _this.current) || void 0 === ref ? void 0 : ref.offsetWidth) || 0;
                var selector = (null === (data = _this.current) || void 0 === data ? void 0 : data.offsetHeight) || 0;
                var iParse = (null === (current = node.current) || void 0 === current ? void 0 : current.offsetWidth) || 0;
                var elem = (null === (next = node.current) || void 0 === next ? void 0 : next.offsetHeight) || 0;
                start(cmApp);
                i(selector);
                isNaN(iParse);
                val(elem);
                /** @type {number} */
                var values = ((null === (currentObject = value.current) || void 0 === currentObject ? void 0 : currentObject.offsetWidth) || 0) - iParse;
                /** @type {number} */
                var noParamReally = ((null === (ptr = value.current) || void 0 === ptr ? void 0 : ptr.offsetHeight) || 0) - elem;
                last(values);
                filter(noParamReally);
                sublimeTextRender(function () {
                    /** @type {!Map} */
                    var m = new Map;
                    return tabs.forEach(function (kv) {
                        var v = kv.key;
                        var r = get(v).current;
                        if (r) {
                            m.set(v, {
                                width: r.offsetWidth,
                                height: r.offsetHeight,
                                left: r.offsetLeft,
                                top: r.offsetTop
                            });
                        }
                    }), m;
                });
            });
            var bytes = tabs.slice(0, off);
            var svg = tabs.slice(idx + 1);
            /** @type {!Array<?>} */
            var openTabs = [].concat(resolve(bytes), resolve(svg));
            var tiledImageBRs = call((0, React.useState)(), 2);
            var tiledImageBR = tiledImageBRs[0];
            var _drawX = tiledImageBRs[1];
            var c = groups.get(index);
            var timer = (0, React.useRef)();
            (0, React.useEffect)(function () {
                var ctx = {};
                return c && (error ? (rtl ? ctx.right = c.right : ctx.left = c.left, ctx.width = c.width) : (ctx.top = c.top, ctx.height = c.height)), toggleTapDisabled(), timer.current = $timeout(function () {
                    _drawX(ctx);
                }), toggleTapDisabled;
            }, [c, error, rtl]);
            (0, React.useEffect)(function () {
                action();
            }, [index, c, groups, error]);
            (0, React.useEffect)(function () {
                resize();
            }, [rtl, transform, index, tabs.map(function (shortcutKeyObject) {
                return shortcutKeyObject.key;
            }).join("_")]);
            var item;
            var p;
            var name;
            var result;
            /** @type {boolean} */
            var open = !!openTabs.length;
            /** @type {string} */
            var key = "".concat(id, "-nav-wrap");
            return error ? rtl ? (p = x1 > 0, item = x1 + size < width) : (item = x1 < 0, p = -x1 + size < width) : (name = h < 0, result = -h + j < max), React.createElement("div", {
                ref: section,
                role: "tablist",
                className: require()("".concat(id, "-nav"), classes),
                style: textStyle,
                onKeyDown: function () {
                    stop();
                }
            }, React.createElement(Input, {
                position: "left",
                extra: extra,
                prefixCls: id
            }), React.createElement(FilterForm, {
                onResize: resize
            }, React.createElement("div", {
                className: require()(key, (_songs$push2 = {}, debug(_songs$push2, "".concat(key, "-ping-left"), item), debug(_songs$push2, "".concat(key, "-ping-right"), p), debug(_songs$push2, "".concat(key, "-ping-top"), name), debug(_songs$push2, "".concat(key, "-ping-bottom"), result), _songs$push2)),
                ref: _this
            }, React.createElement(FilterForm, {
                onResize: resize
            }, React.createElement("div", {
                ref: value,
                className: "".concat(id, "-nav-list"),
                style: {
                    transform: "translate(".concat(x1, "px, ").concat(h, "px)"),
                    transition: animation ? "none" : void 0
                }
            }, categories, React.createElement(TabTemplate, {
                ref: node,
                prefixCls: id,
                locale: code,
                editable: editable,
                style: assign(assign({}, 0 === categories.length ? void 0 : css), {}, {
                    visibility: open ? "hidden" : null
                })
            }), React.createElement("div", {
                className: require()("".concat(id, "-ink-bar"), debug({}, "".concat(id, "-ink-bar-animated"), video.inkBar)),
                style: tiledImageBR
            }))))), React.createElement(Window, _extends({}, options, {
                removeAriaLabel: null === code || void 0 === code ? void 0 : code.removeAriaLabel,
                ref: onRefChagne,
                prefixCls: id,
                tabs: openTabs,
                className: !open && polite,
                tabMoving: !!animation
            })), React.createElement(Input, {
                position: "right",
                extra: extra,
                prefixCls: id
            }));
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function Panel(options) {
            var libraryID = options.id;
            var name = options.activeKey;
            var el = options.animated;
            var iterator = options.tabPosition;
            var rtl = options.rtl;
            var readOnlyFn = options.destroyInactiveTabPane;
            var data = React.useContext(context);
            var files = data.prefixCls;
            var tabs = data.tabs;
            var val = el.tabPane;
            var result = tabs.findIndex(function (section) {
                return section.key === name;
            });
            return React.createElement("div", {
                className: require()("".concat(files, "-content-holder"))
            }, React.createElement("div", {
                className: require()("".concat(files, "-content"), "".concat(files, "-content-").concat(iterator), debug({}, "".concat(files, "-content-animated"), val)),
                style: result && val ? debug({}, rtl ? "marginRight" : "marginLeft", "-".concat(result, "00%")) : null
            }, tabs.map(function (props) {
                return React.cloneElement(props.node, {
                    key: props.key,
                    prefixCls: files,
                    tabKey: props.key,
                    id: libraryID,
                    animated: val,
                    active: props.key === name,
                    destroyInactiveTabPane: readOnlyFn
                });
            })));
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function toggle(options) {
            var _name = options.prefixCls;
            var data = options.forceRender;
            var classes = options.className;
            var style = options.style;
            var node = options.id;
            var isActive = options.active;
            var easing = options.animated;
            var readOnlyFn = options.destroyInactiveTabPane;
            var type = options.tabKey;
            var img = options.children;
            var result = call(React.useState(data), 2);
            var value = result[0];
            var _value = result[1];
            React.useEffect(function () {
                if (isActive) {
                    _value(true);
                } else {
                    if (readOnlyFn) {
                        _value(false);
                    }
                }
            }, [isActive, readOnlyFn]);
            var styles = {};
            return isActive || (easing ? (styles.visibility = "hidden", styles.height = 0, styles.overflowY = "hidden") : styles.display = "none"), React.createElement("div", {
                id: node && "".concat(node, "-panel-").concat(type),
                role: "tabpanel",
                tabIndex: isActive ? 0 : -1,
                "aria-labelledby": node && "".concat(node, "-tab-").concat(type),
                "aria-hidden": !isActive,
                style: assign(assign({}, styles), style),
                className: require()("".concat(_name, "-tabpane"), isActive && "".concat(_name, "-tabpane-active"), classes)
            }, (isActive || value || data) && img);
        }
        /**
         * @param {!Object} props
         * @param {string} original
         * @return {?}
         */
        function generate(props, original) {
            var _ref;
            var AnimatedZoomAdapter;
            var x = props.id;
            var i = props.prefixCls;
            var id = void 0 === i ? "rc-tabs" : i;
            var name = props.className;
            var content = props.children;
            var direction = props.direction;
            var maxZoomLevel = props.activeKey;
            var defaultValue = props.defaultActiveKey;
            var size = props.editable;
            var v = props.animated;
            var def = void 0 === v ? {
                inkBar: true,
                tabPane: false
            } : v;
            var y = props.tabPosition;
            var axis = void 0 === y ? "top" : y;
            var isFormSubmitted = props.tabBarGutter;
            var useStyleString = props.tabBarStyle;
            var event = props.tabBarExtraContent;
            var locale = props.locale;
            var highlightedColumn = props.moreIcon;
            var getPixelPositionOffset = props.moreTransitionName;
            var mapPaneName = props.destroyInactiveTabPane;
            var render = props.renderTabBar;
            var onChange = props.onChange;
            var show = props.onTabClick;
            var setValidations = props.onTabScroll;
            var optionalHandlerMaker = props.getPopupContainer;
            var formRadioGroup = props.popupClassName;
            var options = get(props, components);
            var tabs = function (string) {
                return filter(string).map(function (node) {
                    return React.isValidElement(node) ? assign(assign({
                        key: void 0 !== node.key ? String(node.key) : void 0
                    }, node.props), {}, {
                        node: node
                    }) : null;
                }).filter(function (canCreateDiscussions) {
                    return canCreateDiscussions;
                });
            }(content);
            /** @type {boolean} */
            var hostnames = "rtl" === direction;
            AnimatedZoomAdapter = false === def ? {
                inkBar: false,
                tabPane: false
            } : true === def ? {
                inkBar: true,
                tabPane: true
            } : assign({
                inkBar: true,
                tabPane: false
            }, "object" === stringify(def) ? def : {});
            var form = call((0, React.useState)(false), 2);
            var value = form[0];
            var select = form[1];
            (0, React.useEffect)(function () {
                select(detectBrowser());
            }, []);
            var result = call(done(function () {
                var tab;
                return null === (tab = tabs[0]) || void 0 === tab ? void 0 : tab.key;
            }, {
                value: maxZoomLevel,
                defaultValue: defaultValue
            }), 2);
            var key = result[0];
            var $ = result[1];
            var blank = call((0, React.useState)(function () {
                return tabs.findIndex(function (a) {
                    return a.key === key;
                });
            }), 2);
            var cmMaxHeight = blank[0];
            var setProperty = blank[1];
            (0, React.useEffect)(function () {
                var tab;
                var i = tabs.findIndex(function (a) {
                    return a.key === key;
                });
                if (-1 === i) {
                    /** @type {number} */
                    i = Math.max(0, Math.min(cmMaxHeight, tabs.length - 1));
                    $(null === (tab = tabs[i]) || void 0 === tab ? void 0 : tab.key);
                }
                setProperty(i);
            }, [tabs.map(function (shortcutKeyObject) {
                return shortcutKeyObject.key;
            }).join("_"), key, cmMaxHeight]);
            var blue = call(done(null, {
                value: x
            }), 2);
            var mid = blue[0];
            var scale = blue[1];
            var a = axis;
            if (value && !["left", "right"].includes(axis)) {
                /** @type {string} */
                a = "top";
            }
            (0, React.useEffect)(function () {
                if (!x) {
                    scale("rc-tabs-".concat(currentValue));
                    currentValue = currentValue + 1;
                }
            }, []);
            var categories;
            var data = {
                id: mid,
                activeKey: key,
                animated: AnimatedZoomAdapter,
                tabPosition: a,
                rtl: hostnames,
                mobile: value
            };
            var item = assign(assign({}, data), {}, {
                editable: size,
                locale: locale,
                moreIcon: highlightedColumn,
                moreTransitionName: getPixelPositionOffset,
                tabBarGutter: isFormSubmitted,
                onTabClick: function (index, evt) {
                    if (!(null === show || void 0 === show)) {
                        show(index, evt);
                    }
                    /** @type {boolean} */
                    var remove = index !== key;
                    $(index);
                    if (remove) {
                        if (!(null === onChange || void 0 === onChange)) {
                            onChange(index);
                        }
                    }
                },
                onTabScroll: setValidations,
                extra: event,
                style: useStyleString,
                panes: content,
                getPopupContainer: optionalHandlerMaker,
                popupClassName: formRadioGroup
            });
            return categories = render ? render(item, app) : React.createElement(app, item), React.createElement(context.Provider, {
                value: {
                    tabs: tabs,
                    prefixCls: id
                }
            }, React.createElement("div", _extends({
                ref: original,
                id: x,
                className: require()(id, "".concat(id, "-").concat(a), (_ref = {}, debug(_ref, "".concat(id, "-mobile"), value), debug(_ref, "".concat(id, "-editable"), size), debug(_ref, "".concat(id, "-rtl"), hostnames), _ref), name)
            }, options), categories, React.createElement(Panel, _extends({
                destroyInactiveTabPane: mapPaneName
            }, data, {
                animated: AnimatedZoomAdapter
            }))));
        }
        /**
         * @param {!Object} opts
         * @return {?}
         */
        function run(opts) {
            var editable;
            var body = opts.type;
            var classes = opts.className;
            var value = opts.size;
            var callback = opts.onEdit;
            var _featureClick = opts.hideAdd;
            var warningsOption = opts.centered;
            var nTrIn = opts.addIcon;
            var state = sendMessage(opts, ["type", "className", "size", "onEdit", "hideAdd", "centered", "addIcon"]);
            var radix = state.prefixCls;
            var m = state.moreIcon;
            var val = void 0 === m ? React.createElement(member, null) : m;
            var parent = React.useContext(object);
            var $ = parent.getPrefixCls;
            var direction = parent.direction;
            var result = $("tabs", radix);
            if ("editable-card" === body) {
                editable = {
                    onEdit: function (id, data) {
                        var result = data.key;
                        var value = data.event;
                        if (!(null === callback || void 0 === callback)) {
                            callback("add" === id ? value : result, id);
                        }
                    },
                    removeIcon: React.createElement(span, null),
                    addIcon: nTrIn || React.createElement(tr, null),
                    showAdd: true !== _featureClick
                };
            }
            var mm = $();
            return React.createElement(foobar.Consumer, null, function (all) {
                var _extends2;
                var key = void 0 !== value ? value : all;
                return React.createElement(RedBox, _extends({
                    direction: direction,
                    moreTransitionName: "".concat(mm, "-slide-up")
                }, state, {
                    className: require()((_extends2 = {}, debug(_extends2, "".concat(result, "-").concat(key), key), debug(_extends2, "".concat(result, "-card"), ["card", "editable-card"].includes(body)), debug(_extends2, "".concat(result, "-editable-card"), "editable-card" === body), debug(_extends2, "".concat(result, "-centered"), warningsOption), _extends2), classes),
                    editable: editable,
                    moreIcon: val,
                    prefixCls: result
                }));
            });
        }
        /**
         * @param {!Function} data
         * @return {?}
         */
        function escape(data) {
            var group = call(React.useState(data), 2);
            var endtoken = group[0];
            var start = group[1];
            return React.useEffect(function () {
                /** @type {number} */
                var autoResumeTimer = setTimeout(function () {
                    start(data);
                }, data.length ? 0 : 10);
                return function () {
                    clearTimeout(autoResumeTimer);
                };
            }, [data]), endtoken;
        }
        /**
         * @param {!Function} e
         * @param {string} className
         * @param {string} name
         * @return {?}
         */
        function h(e, className, name) {
            var x = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            return {
                key: "string" === typeof e ? e : "".concat(name, "-").concat(x),
                error: e,
                errorStatus: className
            };
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function end(options) {
            var node = options.help;
            var num = options.helpStatus;
            var errors = options.errors;
            var word = void 0 === errors ? singular : errors;
            var offset = options.warnings;
            var type = void 0 === offset ? singular : offset;
            var classes = options.className;
            var readOnlyFn = options.onVisibleChanged;
            var _name = React.useContext(Menu).prefixCls;
            var callEnd = React.useContext(object).getPrefixCls;
            /** @type {string} */
            var id = "".concat(_name, "-item-explain");
            var predicted_answer = callEnd();
            var p = escape(word);
            var key = escape(type);
            var keysToSend = React.useMemo(function () {
                return void 0 !== node && null !== node ? [h(node, num, "help")] : [].concat(resolve(p.map(function (e, u) {
                    return h(e, "error", "error", u);
                })), resolve(key.map(function (e, u) {
                    return h(e, "warning", "warning", u);
                })));
            }, [node, num, p, key]);
            return React.createElement(PatchItem, {
                motionDeadline: surfaceContext.motionDeadline,
                motionName: "".concat(predicted_answer, "-show-help"),
                visible: !!keysToSend.length,
                onVisibleChanged: readOnlyFn
            }, function (elem) {
                var className = elem.className;
                var style = elem.style;
                return React.createElement("div", {
                    className: require()(id, className, classes),
                    style: style
                }, React.createElement(AddTodo, _extends({
                    keys: keysToSend
                }, surfaceContext, {
                    motionName: "".concat(predicted_answer, "-show-help-item"),
                    component: false
                }), function (options) {
                    var relationshipKey = options.key;
                    var text = options.error;
                    var ext = options.errorStatus;
                    var key = options.className;
                    var textStyle = options.style;
                    return React.createElement("div", {
                        key: relationshipKey,
                        role: "alert",
                        className: require()(key, debug({}, "".concat(id, "-").concat(ext), ext)),
                        style: textStyle
                    }, text);
                }));
            });
        }
        /**
         * @param {!Object} value
         * @return {?}
         */
        function hasClass(value) {
            return "object" == typeof value && null != value && 1 === value.nodeType;
        }
        /**
         * @param {string} undefined
         * @param {?} cat
         * @return {?}
         */
        function scrollishStyle(undefined, cat) {
            return (!cat || "hidden" !== undefined) && "visible" !== undefined && "clip" !== undefined;
        }
        /**
         * @param {!Element} target
         * @param {?} obj
         * @return {?}
         */
        function position(target, obj) {
            if (target.clientHeight < target.scrollHeight || target.clientWidth < target.scrollWidth) {
                /** @type {(CSSStyleDeclaration|null)} */
                var style = getComputedStyle(target, null);
                return scrollishStyle(style.overflowY, obj) || scrollishStyle(style.overflowX, obj) || function (target) {
                    var el = function (aNode) {
                        if (!aNode.ownerDocument || !aNode.ownerDocument.defaultView) {
                            return null;
                        }
                        try {
                            return aNode.ownerDocument.defaultView.frameElement;
                        } catch (e) {
                            return null;
                        }
                    }(target);
                    return !!el && (el.clientHeight < target.scrollHeight || el.clientWidth < target.scrollWidth);
                }(target);
            }
            return false;
        }
        /**
         * @param {(boolean|number|string)} x
         * @param {(boolean|number|string)} a
         * @param {(boolean|number|string)} size
         * @param {number} height
         * @param {number} text
         * @param {(boolean|number|string)} y
         * @param {(boolean|number|string)} b
         * @param {(boolean|number|string)} value
         * @return {?}
         */
        function print(x, a, size, height, text, y, b, value) {
            return y < x && b > a || y > x && b < a ? 0 : y <= x && value <= size || b >= a && value >= size ? y - x - height : b > a && value < size || y < x && value > size ? b - a + text : 0;
        }
        /**
         * @param {!Object} node
         * @param {!Object} data
         * @return {?}
         */
        function show(node, data) {
            /** @type {!Window} */
            var view = window;
            var left = data.scrollMode;
            var undefined = data.block;
            var number = data.inline;
            var b = data.boundary;
            var dt = data.skipOverflowHiddenElements;
            /** @type {!Function} */
            var getSelection = "function" == typeof b ? b : function (a) {
                return a !== b;
            };
            if (!hasClass(node)) {
                throw new TypeError("Invalid target");
            }
            /** @type {!Element} */
            var err = document.scrollingElement || document.documentElement;
            /** @type {!Array} */
            var opts = [];
            /** @type {!Object} */
            var element = node;
            for (; hasClass(element) && getSelection(element);) {
                if ((element = element.parentElement) === err) {
                    opts.push(element);
                    break;
                }
                if (!(null != element && element === document.body && position(element) && !position(document.documentElement))) {
                    if (null != element && position(element, dt)) {
                        opts.push(element);
                    }
                }
            }
            var len = view.visualViewport ? view.visualViewport.width : innerWidth;
            var length = view.visualViewport ? view.visualViewport.height : innerHeight;
            var start = window.scrollX || pageXOffset;
            var v = window.scrollY || pageYOffset;
            var args = node.getBoundingClientRect();
            var h = args.height;
            var dx = args.width;
            var value = args.top;
            var j = args.right;
            var end = args.bottom;
            var x = args.left;
            var y = "start" === undefined || "nearest" === undefined ? value : "end" === undefined ? end : value + h / 2;
            var i = "center" === number ? x + dx / 2 : "end" === number ? j : x;
            /** @type {!Array} */
            var result = [];
            /** @type {number} */
            var t = 0;
            for (; t < opts.length; t++) {
                var e = opts[t];
                var config = e.getBoundingClientRect();
                var padding = config.height;
                var w = config.width;
                var radius = config.top;
                var c = config.right;
                var offset = config.bottom;
                var start = config.left;
                if ("if-needed" === left && value >= 0 && x >= 0 && end <= length && j <= len && value >= radius && end <= offset && x >= start && j <= c) {
                    return result;
                }
                /** @type {(CSSStyleDeclaration|null)} */
                var cs = getComputedStyle(e);
                /** @type {number} */
                var average = parseInt(cs.borderLeftWidth, 10);
                /** @type {number} */
                var index = parseInt(cs.borderTopWidth, 10);
                /** @type {number} */
                var d = parseInt(cs.borderRightWidth, 10);
                /** @type {number} */
                var top = parseInt(cs.borderBottomWidth, 10);
                /** @type {number} */
                var s = 0;
                /** @type {number} */
                var pos = 0;
                /** @type {number} */
                var k = "offsetWidth" in e ? e.offsetWidth - e.clientWidth - average - d : 0;
                /** @type {number} */
                var height = "offsetHeight" in e ? e.offsetHeight - e.clientHeight - index - top : 0;
                if (err === e) {
                    s = "start" === undefined ? y : "end" === undefined ? y - length : "nearest" === undefined ? print(v, v + length, length, index, top, v + y, v + y + h, h) : y - length / 2;
                    pos = "start" === number ? i : "center" === number ? i - len / 2 : "end" === number ? i - len : print(start, start + len, len, average, d, start + i, start + i + dx, dx);
                    /** @type {number} */
                    s = Math.max(0, s + v);
                    /** @type {number} */
                    pos = Math.max(0, pos + start);
                } else {
                    s = "start" === undefined ? y - radius - index : "end" === undefined ? y - offset + top + height : "nearest" === undefined ? print(radius, offset, padding, index, top + height, y, y + h, h) : y - (radius + padding / 2) + height / 2;
                    pos = "start" === number ? i - start - average : "center" === number ? i - (start + w / 2) + k / 2 : "end" === number ? i - c + d + k : print(start, c, w, average, d + k, i, i + dx, dx);
                    var idx = e.scrollLeft;
                    var l = e.scrollTop;
                    y = y + (l - (s = Math.max(0, Math.min(l + s, e.scrollHeight - padding + height))));
                    i = i + (idx - (pos = Math.max(0, Math.min(idx + pos, e.scrollWidth - w + k))));
                }
                result.push({
                    el: e,
                    top: s,
                    left: pos
                });
            }
            return result;
        }
        /**
         * @param {!Object} value
         * @return {?}
         */
        function abs(value) {
            return value === Object(value) && 0 !== Object.keys(value).length;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function seed(value) {
            return void 0 === value || false === value ? [] : Array.isArray(value) ? value : [value];
        }
        /**
         * @param {!Array} className
         * @param {string} id
         * @return {?}
         */
        function has(className, id) {
            if (className.length) {
                var items = className.join("_");
                return id ? "".concat(id, "_").concat(items) : statusName.indexOf(items) >= 0 ? "".concat("form_item", "_").concat(items) : items;
            }
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function getSpecificFile(type) {
            return seed(type).join("_");
        }
        /**
         * @param {number} url
         * @return {?}
         */
        function code(url) {
            var namespace = call(cancel(), 1)[0];
            var exports = React.useRef({});
            var nodeClazz = React.useMemo(function () {
                return null !== url && void 0 !== url ? url : _extends(_extends({}, namespace), {
                    __INTERNAL__: {
                        itemRef: function (page) {
                            return function (second) {
                                var first = getSpecificFile(page);
                                if (second) {
                                    exports.current[first] = second;
                                } else {
                                    delete exports.current[first];
                                }
                            };
                        }
                    },
                    scrollToField: function (i) {
                        var timeListProps = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var s = seed(i);
                        var v = has(s, nodeClazz.__INTERNAL__.name);
                        /** @type {(Element|null)} */
                        var type = v ? document.getElementById(v) : null;
                        if (type) {
                            getOffset(type, _extends({
                                scrollMode: "if-needed",
                                block: "nearest"
                            }, timeListProps));
                        }
                    },
                    getFieldInstance: function (page) {
                        var name = getSpecificFile(page);
                        return exports.current[name];
                    }
                });
            }, [url, namespace]);
            return [nodeClazz];
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function Slider(options) {
            var undefined = options.showArrow;
            var name = options.arrowContent;
            var value = options.children;
            var opt = options.prefixCls;
            var libraryID = options.id;
            var productNameStyle = options.overlayInnerStyle;
            var classes = options.className;
            var textStyle = options.style;
            return React.createElement("div", {
                className: require()("".concat(opt, "-content"), classes),
                style: textStyle
            }, false !== undefined && React.createElement("div", {
                className: "".concat(opt, "-arrow"),
                key: "arrow"
            }, name), React.createElement("div", {
                className: "".concat(opt, "-inner"),
                id: libraryID,
                role: "tooltip",
                style: productNameStyle
            }, "function" === typeof value ? value() : value));
        }
        /**
         * @param {?} path
         * @return {?}
         */
        function compare(path) {
            return "boolean" === typeof path ? path ? loaded : name : _extends(_extends({}, name), path);
        }
        /**
         * @param {?} options
         * @return {?}
         */
        function createCornerElements(options) {
            var step = options.arrowWidth;
            var step_x = void 0 === step ? 4 : step;
            var key = options.horizontalArrowShift;
            var newElKey = void 0 === key ? 16 : key;
            var index = options.verticalArrowShift;
            var i = void 0 === index ? 8 : index;
            var file = options.autoAdjustOverflow;
            var merge = options.arrowPointAtCenter;
            var c = {
                left: {
                    points: ["cr", "cl"],
                    offset: [-4, 0]
                },
                right: {
                    points: ["cl", "cr"],
                    offset: [4, 0]
                },
                top: {
                    points: ["bc", "tc"],
                    offset: [0, -4]
                },
                bottom: {
                    points: ["tc", "bc"],
                    offset: [0, 4]
                },
                topLeft: {
                    points: ["bl", "tc"],
                    offset: [-(newElKey + step_x), -4]
                },
                leftTop: {
                    points: ["tr", "cl"],
                    offset: [-4, -(i + step_x)]
                },
                topRight: {
                    points: ["br", "tc"],
                    offset: [newElKey + step_x, -4]
                },
                rightTop: {
                    points: ["tl", "cr"],
                    offset: [4, -(i + step_x)]
                },
                bottomRight: {
                    points: ["tr", "bc"],
                    offset: [newElKey + step_x, 4]
                },
                rightBottom: {
                    points: ["bl", "cr"],
                    offset: [4, i + step_x]
                },
                bottomLeft: {
                    points: ["tl", "bc"],
                    offset: [-(newElKey + step_x), 4]
                },
                leftBottom: {
                    points: ["br", "cl"],
                    offset: [-4, i + step_x]
                }
            };
            return Object.keys(c).forEach(function (idx) {
                c[idx] = merge ? _extends(_extends({}, c[idx]), {
                    overflow: compare(file),
                    targetOffset: targetOffset
                }) : _extends(_extends({}, choices[idx]), {
                    overflow: compare(file)
                });
                /** @type {boolean} */
                c[idx].ignoreShake = true;
            }), c;
        }
        /**
         * @param {!Object} that
         * @param {?} key
         * @return {?}
         */
        function reset(that, key) {
            var malakh = that.type;
            if ((true === malakh.__ANT_BUTTON || "button" === that.type) && that.props.disabled || true === malakh.__ANT_SWITCH && (that.props.disabled || that.props.loading) || true === malakh.__ANT_RADIO && that.props.disabled) {
                var c = function (defaults, positiveElements) {
                    var processedOptions = {};
                    var options = _extends({}, defaults);
                    return positiveElements.forEach(function (name) {
                        if (defaults && name in defaults) {
                            processedOptions[name] = defaults[name];
                            delete options[name];
                        }
                    }), {
                        picked: processedOptions,
                        omitted: options
                    };
                }(that.props.style, ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]);
                var namespace = c.picked;
                var name = c.omitted;
                var baseHRstyle = _extends(_extends({
                    display: "inline-block"
                }, namespace), {
                    cursor: "not-allowed",
                    width: that.props.block ? "100%" : null
                });
                var indicators = $(that, {
                    style: _extends(_extends({}, name), {
                        pointerEvents: "none"
                    }),
                    className: null
                });
                return React.createElement("span", {
                    style: baseHRstyle,
                    className: require()(that.props.className, "".concat(key, "-disabled-compatible-wrapper"))
                }, indicators);
            }
            return that;
        }
        /**
         * @param {!Object} data
         * @return {?}
         */
        function add(data) {
            var err;
            var regex = data.prefixCls;
            var key = data.className;
            var dialog = data.style;
            var node = data.help;
            var result = data.errors;
            var values = data.warnings;
            var pattern = data.validateStatus;
            var state = data.meta;
            var opts = data.hasFeedback;
            var a = data.hidden;
            var items = data.children;
            var name = data.fieldId;
            var param = data.isRequired;
            var w = data.onSubItemMetaChange;
            var property = getProperty(data, ["prefixCls", "className", "style", "help", "errors", "warnings", "validateStatus", "meta", "hasFeedback", "hidden", "children", "fieldId", "isRequired", "onSubItemMetaChange"]);
            /** @type {string} */
            var id = "".concat(regex, "-item");
            var E = React.useContext(child).requiredMark;
            var ref = React.useRef(null);
            var args = escape(result);
            var buffer = escape(values);
            /** @type {boolean} */
            var byteLength = void 0 !== node && null !== node;
            /** @type {boolean} */
            var inMaySave = !!(byteLength || result.length || values.length);
            var _ref2 = call(React.useState(null), 2);
            var padding = _ref2[0];
            var x = _ref2[1];
            _shallowCopyKeys(function () {
                if (inMaySave && ref.current) {
                    /** @type {(CSSStyleDeclaration|null)} */
                    var cs = getComputedStyle(ref.current);
                    x(parseInt(cs.marginBottom, 10));
                }
            }, [inMaySave]);
            /** @type {string} */
            var type = "";
            if (void 0 !== pattern) {
                type = pattern;
            } else {
                if (state.validating) {
                    /** @type {string} */
                    type = "validating";
                } else {
                    if (args.length) {
                        /** @type {string} */
                        type = "error";
                    } else {
                        if (buffer.length) {
                            /** @type {string} */
                            type = "warning";
                        } else {
                            if (state.touched) {
                                /** @type {string} */
                                type = "success";
                            }
                        }
                    }
                }
            }
            var command_module_id = React.useMemo(function () {
                var response;
                if (opts) {
                    var data = type && service[type];
                    response = data ? React.createElement("span", {
                        className: require()("".concat(id, "-feedback-icon"), "".concat(id, "-feedback-icon-").concat(type))
                    }, React.createElement(data, null)) : null;
                }
                return {
                    status: type,
                    hasFeedback: opts,
                    feedbackIcon: response,
                    isFormItemInput: true
                };
            }, [type, opts]);
            var table = (debug(err = {}, id, true), debug(err, "".concat(id, "-with-help"), byteLength || args.length || buffer.length), debug(err, "".concat(key), !!key), debug(err, "".concat(id, "-has-feedback"), type && opts), debug(err, "".concat(id, "-has-success"), "success" === type), debug(err, "".concat(id, "-has-warning"), "warning" === type), debug(err, "".concat(id, "-has-error"), "error" === type), debug(err, "".concat(id, "-is-validating"), "validating" === type), debug(err, "".concat(id,
                "-hidden"), a), err);
            return React.createElement("div", {
                className: require()(table),
                style: dialog,
                ref: ref
            }, React.createElement(SimpleBinding, _extends({
                className: "".concat(id, "-row")
            }, apply(property, ["_internalItemRender", "colon", "dependencies", "extra", "fieldKey", "getValueFromEvent", "getValueProps", "htmlFor", "id", "initialValue", "isListField", "label", "labelAlign", "labelCol", "labelWrap", "messageVariables", "name", "normalize", "noStyle", "preserve", "required", "requiredMark", "rules", "shouldUpdate", "trigger", "tooltip", "validateFirst", "validateTrigger", "valuePropName", "wrapperCol"])), React.createElement(constructor, _extends({
                htmlFor: name,
                required: param,
                requiredMark: E
            }, data, {
                prefixCls: regex
            })), React.createElement(factory, _extends({}, data, state, {
                errors: args,
                warnings: buffer,
                prefixCls: regex,
                status: type,
                help: node,
                marginBottom: padding,
                onErrorVisibleChanged: function (callback) {
                    if (!callback) {
                        x(null);
                    }
                }
            }), React.createElement(redux.Provider, {
                value: w
            }, React.createElement(channel.Provider, {
                value: command_module_id
            }, items)))), !!padding && React.createElement("div", {
                className: "".concat(id, "-margin-offset"),
                style: {
                    marginBottom: -padding
                }
            }));
        }
        /**
         * @param {boolean} a
         * @return {undefined}
         */
        function listener(a) {
            var o = doc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            if (o && "object" === stringify(o)) {
                /** @type {boolean} */
                o.usingClientEntryPoint = a;
            }
        }
        /**
         * @param {undefined} e
         * @param {!Object} t
         * @return {undefined}
         */
        function register(e, t) {
            if (interpolateBar) {
                (function (e, t) {
                    listener(true);
                    var v = t[j] || interpolateBar(t);
                    listener(false);
                    v.render(e);
                    t[j] = v;
                })(e, t);
            } else {
                (function (fn, e) {
                    _e(fn, e);
                })(e, t);
            }
        }
        /**
         * @param {!Object} result
         * @return {?}
         */
        function processResult(result) {
            return onLoad.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function onLoad() {
            return (onLoad = slice(test().mark(function loop(data) {
                return test().wrap(function (context$5$0) {
                    for (; ;) {
                        switch (context$5$0.prev = context$5$0.next) {
                            case 0:
                                return context$5$0.abrupt("return", Promise.resolve().then(function () {
                                    var u;
                                    if (!(null === (u = data[j]) || void 0 === u)) {
                                        u.unmount();
                                    }
                                    delete data[j];
                                }));
                            case 1:
                            case "end":
                                return context$5$0.stop();
                        }
                    }
                }, loop);
            }))).apply(this, arguments);
        }
        /**
         * @param {!Object} id
         * @return {undefined}
         */
        function makeResponse(id) {
            relationships(id);
        }
        /**
         * @return {?}
         */
        function finish() {
            return (finish = slice(test().mark(function next(result) {
                return test().wrap(function (_context6) {
                    for (; ;) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                if (void 0 === interpolateBar) {
                                    /** @type {number} */
                                    _context6.next = 2;
                                    break;
                                }
                                return _context6.abrupt("return", processResult(result));
                            case 2:
                                makeResponse(result);
                            case 3:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, next);
            }))).apply(this, arguments);
        }
        /**
         * @param {!Object} t
         * @return {?}
         */
        function notify(t) {
            var qml = React.useRef({});
            var group = call(React.useState([]), 2);
            var item = group[0];
            var low = group[1];
            return [function (r) {
                /** @type {boolean} */
                var showExamples = true;
                t.add(r, function (showInterfaces, item) {
                    var name = item.key;
                    if (showInterfaces && (!qml.current[name] || showExamples)) {
                        var a = React.createElement(Week, _extends({}, item, {
                            holder: showInterfaces
                        }));
                        qml.current[name] = a;
                        low(function (map) {
                            var i = map.findIndex(function (https) {
                                return https.key === item.key;
                            });
                            if (-1 === i) {
                                return [].concat(resolve(map), [a]);
                            }
                            var m = resolve(map);
                            return m[i] = a, m;
                        });
                    }
                    /** @type {boolean} */
                    showExamples = false;
                });
            }, React.createElement(React.Fragment, null, item)];
        }
        /**
         * @return {?}
         */
        function createKey() {
            var cb = lastCallback;
            return lastCallback = lastCallback + 1, "rcNotification_".concat(testMiddlewares, "_").concat(cb);
        }
        /**
         * @param {!Array} s
         * @param {!NodeList} t
         * @return {?}
         */
        function versionGT(s, t) {
            if (s.length !== t.length) {
                return false;
            }
            /** @type {number} */
            var i = 0;
            for (; i < s.length; i++) {
                if (p = s[i], c = t[i], !(p === c || isNaN(p) && isNaN(c))) {
                    return false;
                }
            }
            var p;
            var c;
            return true;
        }
        /**
         * @param {?} value
         * @return {undefined}
         */
        function getHeat(value) {
            allOperations = value ? _extends(_extends({}, allOperations), value) : _extends({}, Backbone.Modal);
        }
        /**
         * @param {?} position
         * @return {?}
         */
        function objectAnimationOut(position) {
            var css;
            var tabPadding = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o_old;
            var bottomBorderPosition = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : pingPongTimeout;
            switch (position) {
                case "top":
                    css = {
                        left: "50%",
                        transform: "translateX(-50%)",
                        right: "auto",
                        top: tabPadding,
                        bottom: "auto"
                    };
                    break;
                case "topLeft":
                    css = {
                        left: 0,
                        top: tabPadding,
                        bottom: "auto"
                    };
                    break;
                case "topRight":
                    css = {
                        right: 0,
                        top: tabPadding,
                        bottom: "auto"
                    };
                    break;
                case "bottom":
                    css = {
                        left: "50%",
                        transform: "translateX(-50%)",
                        right: "auto",
                        top: "auto",
                        bottom: bottomBorderPosition
                    };
                    break;
                case "bottomLeft":
                    css = {
                        left: 0,
                        top: "auto",
                        bottom: bottomBorderPosition
                    };
                    break;
                default:
                    css = {
                        right: 0,
                        top: "auto",
                        bottom: bottomBorderPosition
                    };
            }
            return css;
        }
        /**
         * @param {!Object} options
         * @param {!Function} $super
         * @return {undefined}
         */
        function fetch(options, $super) {
            var num = options.placement;
            var value = void 0 === num ? ACTIVE : num;
            var position = options.top;
            var bottom = options.bottom;
            var getContainer = options.getContainer;
            var additionalExpression = void 0 === getContainer ? scopeExpressionContent : getContainer;
            var PNGProcessor = options.prefixCls;
            var Q = pipe();
            var fire = Q.getPrefixCls;
            var extend = Q.getIconPrefixCls;
            var result = fire("notification", PNGProcessor || displayText);
            var globalDependencies = extend();
            /** @type {string} */
            var name = "".concat(result, "-").concat(value);
            var count = results[name];
            if (count) {
                Promise.resolve(count).then(function (value) {
                    $super({
                        prefixCls: "".concat(result, "-notice"),
                        iconPrefixCls: globalDependencies,
                        instance: value
                    });
                });
            } else {
                var langClass = require()("".concat(result, "-").concat(value), debug({}, "".concat(result, "-rtl"), true === hash));
                /** @type {!Promise} */
                results[name] = new Promise(function (yamlLoader) {
                    R.newInstance({
                        prefixCls: result,
                        className: langClass,
                        style: objectAnimationOut(value, position, bottom),
                        getContainer: additionalExpression,
                        maxCount: revCount
                    }, function (value) {
                        yamlLoader(value);
                        $super({
                            prefixCls: "".concat(result, "-notice"),
                            iconPrefixCls: globalDependencies,
                            instance: value
                        });
                    });
                });
            }
        }
        /**
         * @param {!Object} options
         * @param {?} key
         * @param {?} shop
         * @return {?}
         */
        function info(options, key, shop) {
            var length = options.duration;
            var toption = options.icon;
            var name = options.type;
            var items = options.description;
            var month = options.message;
            var data = options.btn;
            var onClose = options.onClose;
            var onClick = options.onClick;
            var id = options.key;
            var style = options.style;
            var className = options.className;
            var alternate_text = options.closeIcon;
            var text = void 0 === alternate_text ? default_text : alternate_text;
            var len = void 0 === length ? curve : length;
            /** @type {null} */
            var value = null;
            if (toption) {
                value = React.createElement("span", {
                    className: "".concat(key, "-icon")
                }, options.icon);
            } else {
                if (name) {
                    value = React.createElement(defaultOpts[name] || null, {
                        className: "".concat(key, "-icon ").concat(key, "-icon-").concat(name)
                    });
                }
            }
            var closeIcon = React.createElement("span", {
                className: "".concat(key, "-close-x")
            }, text || React.createElement(span, {
                className: "".concat(key, "-close-icon")
            }));
            var height = !items && value ? React.createElement("span", {
                className: "".concat(key, "-message-single-line-auto-margin")
            }) : null;
            return {
                content: React.createElement(HTML, {
                    iconPrefixCls: shop
                }, React.createElement("div", {
                    className: value ? "".concat(key, "-with-icon") : "",
                    role: "alert"
                }, value, React.createElement("div", {
                    className: "".concat(key, "-message")
                }, height, month), React.createElement("div", {
                    className: "".concat(key, "-description")
                }, items), data ? React.createElement("span", {
                    className: "".concat(key, "-btn")
                }, data) : null)),
                duration: len,
                closable: true,
                closeIcon: closeIcon,
                onClose: onClose,
                onClick: onClick,
                key: id,
                style: style || {},
                className: require()(className, debug({}, "".concat(key, "-").concat(name), !!name))
            };
        }
        /**
         * @param {?} e
         * @param {!Object} data
         * @return {undefined}
         */
        function redraw(e, data) {
            var r = function (e, options) {
                var result = {};
                /**
                 * @param {?} o
                 * @param {!Array} t
                 * @return {?}
                 */
                var get = function (o, t) {
                    var ext = o.clone();
                    return (ext = (null === t || void 0 === t ? void 0 : t(ext)) || ext).toRgbString();
                };
                /**
                 * @param {?} source
                 * @param {string} name
                 * @return {undefined}
                 */
                var log = function (source, name) {
                    var color = new String(source);
                    var array2 = merge(color.toRgbString());
                    result["".concat(name, "-color")] = get(color);
                    result["".concat(name, "-color-disabled")] = array2[1];
                    result["".concat(name, "-color-hover")] = array2[4];
                    result["".concat(name, "-color-active")] = array2[7];
                    result["".concat(name, "-color-outline")] = color.clone().setAlpha(.2).toRgbString();
                    result["".concat(name, "-color-deprecated-bg")] = array2[1];
                    result["".concat(name, "-color-deprecated-border")] = array2[3];
                };
                if (options.primaryColor) {
                    log(options.primaryColor, "primary");
                    var value = new String(options.primaryColor);
                    var args = merge(value.toRgbString());
                    args.forEach(function (resolvedViewModel, index) {
                        result["primary-".concat(index + 1)] = resolvedViewModel;
                    });
                    result["primary-color-deprecated-l-35"] = get(value, function (a) {
                        return a.lighten(35);
                    });
                    result["primary-color-deprecated-l-20"] = get(value, function (a) {
                        return a.lighten(20);
                    });
                    result["primary-color-deprecated-t-20"] = get(value, function (cur) {
                        return cur.tint(20);
                    });
                    result["primary-color-deprecated-t-50"] = get(value, function (cur) {
                        return cur.tint(50);
                    });
                    result["primary-color-deprecated-f-12"] = get(value, function (layer) {
                        return layer.setAlpha(.12 * layer.getAlpha());
                    });
                    var obj = new String(args[0]);
                    result["primary-color-active-deprecated-f-30"] = get(obj, function (layer) {
                        return layer.setAlpha(.3 * layer.getAlpha());
                    });
                    result["primary-color-active-deprecated-d-02"] = get(obj, function (b) {
                        return b.darken(2);
                    });
                }
                if (options.successColor) {
                    log(options.successColor, "success");
                }
                if (options.warningColor) {
                    log(options.warningColor, "warning");
                }
                if (options.errorColor) {
                    log(options.errorColor, "error");
                }
                if (options.infoColor) {
                    log(options.infoColor, "info");
                }
                /** @type {!Array<?>} */
                var drilldownLevelLabels = Object.keys(result).map(function (i) {
                    return "--".concat(e, "-").concat(i, ": ").concat(result[i], ";");
                });
                return "\n  :root {\n    ".concat(drilldownLevelLabels.join("\n"), "\n  }\n  ").trim();
            }(e, data);
            if (translate()) {
                request(r, "".concat(predicted_answer, "-dynamic-theme"));
            }
        }
        /**
         * @return {?}
         */
        function time() {
            return calculateSectionStatus || "ant";
        }
        /**
         * @return {?}
         */
        function yd() {
            return whatToScale || "anticon";
        }
        /**
         * @return {?}
         */
        function nameGenerator() {
            return Od++;
        }
        /**
         * @param {!Object} component
         * @param {!Function} done
         * @return {undefined}
         */
        function read(component, done) {
            var renderer = component.prefixCls;
            var name = component.getPopupContainer;
            var host = pipe();
            var fn = host.getPrefixCls;
            var $ = host.getRootPrefixCls;
            var concat = host.getIconPrefixCls;
            var o = fn("message", renderer || svg);
            var match = $(component.rootPrefixCls, o);
            var write = concat();
            if (instance) {
                done({
                    prefixCls: o,
                    rootPrefixCls: match,
                    iconPrefixCls: write,
                    instance: instance
                });
            } else {
                var config = {
                    prefixCls: o,
                    transitionName: isRegexMode ? term : "".concat(match, "-").concat(term),
                    style: {
                        top: icqavTableTop
                    },
                    getContainer: uniqueMatch || name,
                    maxCount: max
                };
                R.newInstance(config, function (module) {
                    if (instance) {
                        done({
                            prefixCls: o,
                            rootPrefixCls: match,
                            iconPrefixCls: write,
                            instance: instance
                        });
                    } else {
                        /** @type {!Object} */
                        instance = module;
                        done({
                            prefixCls: o,
                            rootPrefixCls: match,
                            iconPrefixCls: write,
                            instance: module
                        });
                    }
                });
            }
        }
        /**
         * @param {!Object} item
         * @param {?} id
         * @param {?} type
         * @return {?}
         */
        function push(item, id, type) {
            var err;
            var t = void 0 !== item.duration ? item.duration : elapsedTime;
            var val = index[item.type];
            var langClass = require()("".concat(id, "-custom-content"), (debug(err = {}, "".concat(id, "-").concat(item.type), item.type), debug(err, "".concat(id, "-rtl"), true === myRtl), err));
            return {
                key: item.key,
                duration: t,
                style: item.style || {},
                className: item.className,
                content: React.createElement(HTML, {
                    iconPrefixCls: type
                }, React.createElement("div", {
                    className: langClass
                }, item.icon || val && React.createElement(val, null), React.createElement("span", null, item.content))),
                onClose: item.onClose,
                onClick: item.onClick
            };
        }
        /**
         * @param {?} $
         * @param {string} t
         * @return {undefined}
         */
        function bootstrap($, t) {
            /**
             * @param {(Object|string)} name
             * @param {!Object} n
             * @param {!Object} result
             * @return {?}
             */
            $[t] = function (name, n, result) {
                return function (e) {
                    return "[object Object]" === Object.prototype.toString.call(e) && !!e.content;
                }(name) ? $.open(_extends(_extends({}, name), {
                    type: t
                })) : ("function" === typeof n && (result = n, n = void 0), $.open({
                    content: name,
                    duration: n,
                    type: t,
                    onClose: result
                }));
            };
        }
        /**
         * @param {number} o
         * @return {?}
         */
        function hasOwnProperty(o) {
            return void 0 !== o && null !== o;
        }
        /**
         * @param {?} selector
         * @param {!Object} component
         * @param {!Object} options
         * @return {?}
         */
        function getElements(selector, component, options) {
            var colon = component.colon;
            var value = component.prefixCls;
            var bordered = component.bordered;
            var path = options.component;
            var id = options.type;
            var labels = options.showLabel;
            var response = options.showContent;
            var namespace = options.labelStyle;
            var timeListProps = options.contentStyle;
            return selector.map(function (o, a) {
                var node = o.props;
                var label = node.label;
                var child = node.children;
                var key = node.prefixCls;
                var attr = void 0 === key ? value : key;
                var clazz = node.className;
                var name = node.style;
                var style = node.labelStyle;
                var state = node.contentStyle;
                var span = node.span;
                var itemTag = void 0 === span ? 1 : span;
                var p = o.key;
                return "string" === typeof path ? React.createElement(Cell, {
                    key: "".concat(id, "-").concat(p || a),
                    className: clazz,
                    style: name,
                    labelStyle: _extends(_extends({}, namespace), style),
                    contentStyle: _extends(_extends({}, timeListProps), state),
                    span: itemTag,
                    colon: colon,
                    component: path,
                    itemPrefixCls: attr,
                    bordered: bordered,
                    label: labels ? label : null,
                    content: response ? child : null
                }) : [React.createElement(Cell, {
                    key: "label-".concat(p || a),
                    className: clazz,
                    style: _extends(_extends(_extends({}, namespace), name), style),
                    span: 1,
                    colon: colon,
                    component: path[0],
                    itemPrefixCls: attr,
                    bordered: bordered,
                    label: label
                }), React.createElement(Cell, {
                    key: "content-".concat(p || a),
                    className: clazz,
                    style: _extends(_extends(_extends({}, timeListProps), name), state),
                    span: 2 * itemTag - 1,
                    component: path[1],
                    itemPrefixCls: attr,
                    bordered: bordered,
                    content: child
                })];
            });
        }
        /**
         * @param {!Object} value
         * @param {number} element
         * @param {number} key
         * @return {?}
         */
        function save(value, element, key) {
            /** @type {!Object} */
            var r = value;
            return (void 0 === element || element > key) && (r = $(value, {
                span: key
            })), r;
        }
        /**
         * @param {!Object} config
         * @return {?}
         */
        function traverse(config) {
            var pornResult;
            var container = config.prefixCls;
            var title = config.title;
            var icon = config.extra;
            var start = config.column;
            var node = void 0 === start ? suffixes : start;
            var _ = config.colon;
            var resContentLength = void 0 === _ || _;
            var bordered = config.bordered;
            var layoutName = config.layout;
            var base = config.children;
            var className = config.className;
            var dialog = config.style;
            var e = config.size;
            var labelStyle = config.labelStyle;
            var contentStyle = config.contentStyle;
            var options = React.useContext(object);
            var expect = options.getPrefixCls;
            var direction = options.direction;
            var name = expect("descriptions", container);
            var form = call(React.useState({}), 2);
            var elem = form[0];
            var template = form[1];
            var value = function (obj, string) {
                if ("number" === typeof obj) {
                    return obj;
                }
                if ("object" === stringify(obj)) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < models.length; i++) {
                        var index = models[i];
                        if (string[index] && void 0 !== obj[index]) {
                            return obj[index] || suffixes[index];
                        }
                    }
                }
                return 3;
            }(node, elem);
            React.useEffect(function () {
                var topicA = PubSub.subscribe(function (listItm) {
                    if ("object" === stringify(node)) {
                        template(listItm);
                    }
                });
                return function () {
                    PubSub.unsubscribe(topicA);
                };
            }, []);
            var resolved = function (part, val1) {
                var deprecatedStylingMethods = filter(part).filter(function (canCreateDiscussions) {
                    return canCreateDiscussions;
                });
                /** @type {!Array} */
                var allPasses = [];
                /** @type {!Array} */
                var test = [];
                /** @type {!Array} */
                var a = val1;
                return deprecatedStylingMethods.forEach(function (data, i) {
                    var props;
                    var key = null === (props = data.props) || void 0 === props ? void 0 : props.span;
                    var b = key || 1;
                    if (i === deprecatedStylingMethods.length - 1) {
                        return test.push(save(data, key, a)), void allPasses.push(test);
                    }
                    if (b < a) {
                        /** @type {number} */
                        a = a - b;
                        test.push(data);
                    } else {
                        test.push(save(data, b, a));
                        allPasses.push(test);
                        /** @type {!Array} */
                        a = val1;
                        /** @type {!Array} */
                        test = [];
                    }
                }), allPasses;
            }(base, value);
            var command_module_id = React.useMemo(function () {
                return {
                    labelStyle: labelStyle,
                    contentStyle: contentStyle
                };
            }, [labelStyle, contentStyle]);
            return React.createElement(meta.Provider, {
                value: command_module_id
            }, React.createElement("div", {
                className: require()(name, (pornResult = {}, debug(pornResult, "".concat(name, "-").concat(e), e && "default" !== e), debug(pornResult, "".concat(name, "-bordered"), !!bordered), debug(pornResult, "".concat(name, "-rtl"), "rtl" === direction), pornResult), className),
                style: dialog
            }, (title || icon) && React.createElement("div", {
                className: "".concat(name, "-header")
            }, title && React.createElement("div", {
                className: "".concat(name, "-title")
            }, title), icon && React.createElement("div", {
                className: "".concat(name, "-extra")
            }, icon)), React.createElement("div", {
                className: "".concat(name, "-view")
            }, React.createElement("table", null, React.createElement("tbody", null, resolved.map(function (firstRow, index) {
                return React.createElement(SettingsTableRow, {
                    key: index,
                    index: index,
                    colon: resContentLength,
                    prefixCls: name,
                    vertical: "vertical" === layoutName,
                    bordered: bordered,
                    row: firstRow
                });
            }))))));
        }
        /**
         * @param {!Function} e
         * @return {?}
         */
        function tmpl(e) {
            /**
             * @return {undefined}
             */
            function callback() {
                if ((rl = rl - 1) <= 0) {
                    e();
                    delete throttles[i];
                } else {
                    throttles[i] = $timeout(callback);
                }
            }
            var numRows = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
            /** @type {number} */
            var i = _g++;
            var rl = numRows;
            return throttles[i] = $timeout(callback), i;
        }
        /**
         * @param {!Object} el
         * @return {?}
         */
        function positionHighlight(el) {
            return !el || null === el.offsetParent || el.hidden;
        }
        /**
         * @param {string} text
         * @return {?}
         */
        function arrayToText(text) {
            var match = (text || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
            return !(match && match[1] && match[2] && match[3]) || !(match[1] === match[2] && match[2] === match[3]);
        }
        /**
         * @param {string} undefined
         * @return {?}
         */
        function isBlank(undefined) {
            return "text" === undefined || "link" === undefined;
        }
        /**
         * @param {?} value
         * @param {number} name
         * @return {?}
         */
        function r(value, name) {
            if (null !== value && void 0 !== value) {
                var label;
                /** @type {string} */
                var text = name ? " " : "";
                return "string" !== typeof value && "number" !== typeof value && "string" === typeof value.type && isArray(value.props.children) ? $(value, {
                    children: value.props.children.split("").join(text)
                }) : "string" === typeof value ? isArray(value) ? React.createElement("span", null, value.split("").join(text)) : React.createElement("span", null, value) : (label = value, React.isValidElement(label) && label.type === React.Fragment ? React.createElement("span", null, value) : value);
            }
        }
        /**
         * @param {!Request} task_response_translator
         * @return {?}
         */
        function client(task_response_translator) {
            return query.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function query() {
            return query = slice(test().mark(function request(token) {
                return test().wrap(function (context$5$0) {
                    for (; ;) {
                        switch (context$5$0.prev = context$5$0.next) {
                            case 0:
                                return context$5$0.abrupt("return", fetch(token).then(function () {
                                    var init = slice(test().mark(function init(response) {
                                        return test().wrap(function (context$5$0) {
                                            for (; ;) {
                                                switch (context$5$0.prev = context$5$0.next) {
                                                    case 0:
                                                        if (response.ok) {
                                                            /** @type {number} */
                                                            context$5$0.next = 3;
                                                            break;
                                                        }
                                                        throw 401 === response.status && window.location.reload(), new Error(response.statusText);
                                                    case 3:
                                                        return context$5$0.abrupt("return", response.json());
                                                    case 4:
                                                    case "end":
                                                        return context$5$0.stop();
                                                }
                                            }
                                        }, init);
                                    }));
                                    return function (canCreateDiscussions) {
                                        return init.apply(this, arguments);
                                    };
                                }()).catch(function (canCreateDiscussions) {
                                    throw canCreateDiscussions;
                                }));
                            case 1:
                            case "end":
                                return context$5$0.stop();
                        }
                    }
                }, request);
            })), query.apply(this, arguments);
        }
        /**
         * @param {string} element
         * @param {?} eventsString
         * @return {?}
         */
        function prioritizeAndRun(element, eventsString) {
            return seq.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function seq() {
            return seq = slice(test().mark(function next(i, options) {
                var levee;
                /** @type {!Arguments} */
                var fixtureUrls = arguments;
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return levee = fixtureUrls.length > 2 && void 0 !== fixtureUrls[2] ? fixtureUrls[2] : {}, _context.abrupt("return", client(new Request(options, {
                                    method: i,
                                    headers: {
                                        "Content-type": "application/json"
                                    },
                                    body: JSON.stringify(levee)
                                })).then(output));
                            case 2:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, next);
            })), seq.apply(this, arguments);
        }
        /**
         * @param {!Object} data
         * @return {?}
         */
        function output(data) {
            if (0 !== data.code) {
                throw new Error(data.message);
            }
            return data;
        }
        /**
         * @param {string} row
         * @return {?}
         */
        function parseSimpleHeader(row) {
            return CropAreaRectangle.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function CropAreaRectangle() {
            return CropAreaRectangle = slice(test().mark(function request(type) {
                var value;
                /** @type {!Arguments} */
                var fixtureUrls = arguments;
                return test().wrap(function (_context4) {
                    for (; ;) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                return value = fixtureUrls.length > 1 && void 0 !== fixtureUrls[1] ? fixtureUrls[1] : {}, _context4.abrupt("return", prioritizeAndRun("post", type, value));
                            case 2:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, request);
            })), CropAreaRectangle.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function statements() {
            return (statements = slice(test().mark(function parse(isFirstArg) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.next = 2, parseSimpleHeader(REST_PATH + "/user/login", isFirstArg);
                            case 2:
                                return _context.abrupt("return", _context.sent);
                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, parse);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function complete() {
            return (complete = slice(test().mark(function next(elem) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.next = 2, parseSimpleHeader(REST_PATH + "/user/logout", elem);
                            case 2:
                                return _context.abrupt("return", _context.sent);
                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, next);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function Connection() {
            return (Connection = slice(test().mark(function parse(isFirstArg) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.next = 2, parseSimpleHeader(REST_PATH + "/user/register", isFirstArg);
                            case 2:
                                return _context.abrupt("return", _context.sent);
                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, parse);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function c() {
            return (c = slice(test().mark(function parse(data) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if ("" !== data.authToken) {
                                    /** @type {number} */
                                    _context.next = 2;
                                    break;
                                }
                                return _context.abrupt("return");
                            case 2:
                                return _context.next = 4, parseSimpleHeader(REST_PATH + "/user/checkAuth", data);
                            case 4:
                                return _context.abrupt("return", _context.sent);
                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, parse);
            }))).apply(this, arguments);
        }
        /**
         * @param {?} data
         * @return {?}
         */
        function trace(data) {
            return klass.apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function klass() {
            return (klass = slice(test().mark(function parse(isFirstArg) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.next = 2, parseSimpleHeader(REST_PATH + "/push/getRoomInfo", isFirstArg);
                            case 2:
                                return _context.abrupt("return", _context.sent);
                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, parse);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function property() {
            return (property = slice(test().mark(function parse(isFirstArg) {
                return test().wrap(function (_context) {
                    for (; ;) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.next = 2, parseSimpleHeader(REST_PATH + "/push/pushRoom", isFirstArg);
                            case 2:
                                return _context.abrupt("return", _context.sent);
                            case 3:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, parse);
            }))).apply(this, arguments);
        }
        /**
         * @return {?}
         */
        function addClass() {
            return localStorage.getItem("authToken");
        }
        /**
         * @param {?} sessionId
         * @return {?}
         */
        function openConsole(sessionId) {
            return localStorage.setItem("authToken", sessionId);
        }
        /**
         * @param {number} flags
         * @return {?}
         */
        function f(flags) {
            return (flags || []).map(function (error, availableBaseTypes) {
                if (error && "object" === stringify(error)) {
                    /** @type {!Object} */
                    var data = error;
                    var content = data.label;
                    var i = data.children;
                    var url = data.key;
                    var group = data.type;
                    var result = pick(data, ["label", "children", "key", "type"]);
                    var urlString = null !== url && void 0 !== url ? url : "tmp-".concat(availableBaseTypes);
                    return i || "group" === group ? "group" === group ? React.createElement(option, _extends({
                        key: urlString
                    }, result, {
                        title: content
                    }), f(i)) : React.createElement(Link, _extends({
                        key: urlString
                    }, result, {
                        title: content
                    }), f(i)) : "divider" === group ? React.createElement(tag, _extends({
                        key: urlString
                    }, result)) : React.createElement(input, _extends({
                        key: urlString
                    }, result), content);
                }
                return null;
            }).filter(function (acc) {
                return acc;
            });
        }
        /**
         * @param {number} m
         * @return {?}
         */
        function runASSERTS(m) {
            return React.useMemo(function () {
                return m ? f(m) : m;
            }, [m]);
        }
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        function onMousedown(event) {
            event.preventDefault();
            /** @type {string} */
            event.returnValue = "";
        }
        /**
         * @return {?}
         */
        function observable() {
            /** @type {!Array} */
            var e = [];
            return {
                get length() {
                    return e.length;
                },
                push: function (name) {
                    return e.push(name), function () {
                        e = e.filter(function (sortColumnIdentifier) {
                            return sortColumnIdentifier !== name;
                        });
                    };
                },
                call: function (value) {
                    e.forEach(function (resolve) {
                        return resolve && resolve(value);
                    });
                }
            };
        }
        /**
         * @return {?}
         */
        function generateKey() {
            return Math.random().toString(36).substr(2, 8);
        }
        /**
         * @param {!Object} options
         * @return {?}
         */
        function unpack(options) {
            var path = options.pathname;
            var key = void 0 === path ? "/" : path;
            var prefix = options.search;
            var s = void 0 === prefix ? "" : prefix;
            var str = options.hash;
            var val = void 0 === str ? "" : str;
            return s && "?" !== s && (key = key + ("?" === s.charAt(0) ? s : "?" + s)), val && "#" !== val && (key = key + ("#" === val.charAt(0) ? val : "#" + val)), key;
        }
        /**
         * @param {(Object|string)} value
         * @return {?}
         */
        function match(value) {
            var params = {};
            if (value) {
                var n = value.indexOf("#");
                if (n >= 0) {
                    params.hash = value.substr(n);
                    value = value.substr(0, n);
                }
                var i = value.indexOf("?");
                if (i >= 0) {
                    params.search = value.substr(i);
                    value = value.substr(0, i);
                }
                if (value) {
                    /** @type {(Object|string)} */
                    params.pathname = value;
                }
            }
            return params;
        }
        /**
         * @param {boolean} string
         * @param {?} type
         * @return {undefined}
         */
        function shift(string, type) {
            if (!string) {
                throw new Error(type);
            }
        }
        /**
         * @param {!Array} data
         * @param {(Object|string)} f
         * @param {number} regex
         * @return {?}
         */
        function keys(data, f, regex) {
            if (void 0 === regex) {
                /** @type {string} */
                regex = "/";
            }
            var a = split(("string" === typeof f ? match(f) : f).pathname || "/", regex);
            if (null == a) {
                return null;
            }
            var result = use(data);
            !function (deletedIds) {
                deletedIds.sort(function (a, b) {
                    return a.score !== b.score ? b.score - a.score : function (text, part) {
                        var n = text.length === part.length && text.slice(0, -1).every(function (family_given, i) {
                            return family_given === part[i];
                        });
                        return n ? text[text.length - 1] - part[part.length - 1] : 0;
                    }(a.routesMeta.map(function (control) {
                        return control.childrenIndex;
                    }), b.routesMeta.map(function (control) {
                        return control.childrenIndex;
                    }));
                });
            }(result);
            /** @type {null} */
            var arr = null;
            /** @type {number} */
            var i = 0;
            for (; null == arr && i < result.length; ++i) {
                arr = route(result[i], a);
            }
            return arr;
        }
        /**
         * @param {!Array} data
         * @param {!Array} options
         * @param {!Array} node
         * @param {number} item
         * @return {?}
         */
        function use(data, options, node, item) {
            return void 0 === options && (options = []), void 0 === node && (node = []), void 0 === item && (item = ""), data.forEach(function (opts, canCreateDiscussions) {
                var options = {
                    relativePath: opts.path || "",
                    caseSensitive: true === opts.caseSensitive,
                    childrenIndex: canCreateDiscussions,
                    route: opts
                };
                if (options.relativePath.startsWith("/")) {
                    if (!options.relativePath.startsWith(item)) {
                        shift(false);
                    }
                    options.relativePath = options.relativePath.slice(item.length);
                }
                var value = evaluate([item, options.relativePath]);
                var child = node.concat(options);
                if (opts.children && opts.children.length > 0) {
                    if (true === opts.index) {
                        shift(false);
                    }
                    use(opts.children, options, child, value);
                }
                if (null != opts.path || opts.index) {
                    options.push({
                        path: value,
                        score: getPath(value, opts.index),
                        routesMeta: child
                    });
                }
            }), options;
        }
        /**
         * @param {string} object
         * @param {?} keys
         * @return {?}
         */
        function getPath(object, keys) {
            var cur = object.split("/");
            var start = cur.length;
            return cur.some(substr) && (start = start + -2), keys && (start = start + 2), cur.filter(function (value) {
                return !substr(value);
            }).reduce(function (canCreateDiscussions, t) {
                return canCreateDiscussions + (reFeaturedMethod.test(t) ? 3 : "" === t ? 1 : 10);
            }, start);
        }
        /**
         * @param {?} data
         * @param {(number|string)} path
         * @return {?}
         */
        function route(data, path) {
            var spheres = data.routesMeta;
            var userInfo = {};
            /** @type {string} */
            var value = "/";
            /** @type {!Array} */
            var middleware = [];
            /** @type {number} */
            var iter_sph = 0;
            for (; iter_sph < spheres.length; ++iter_sph) {
                var options = spheres[iter_sph];
                /** @type {boolean} */
                var hashStart = iter_sph === spheres.length - 1;
                var ext = "/" === value ? path : path.slice(value.length) || "/";
                var data = replace({
                    path: options.relativePath,
                    caseSensitive: options.caseSensitive,
                    end: hashStart
                }, ext);
                if (!data) {
                    return null;
                }
                Object.assign(userInfo, data.params);
                var route = options.route;
                middleware.push({
                    params: userInfo,
                    pathname: evaluate([value, data.pathname]),
                    pathnameBase: relative(evaluate([value, data.pathnameBase])),
                    route: route
                });
                if ("/" !== data.pathnameBase) {
                    value = evaluate([value, data.pathnameBase]);
                }
            }
            return middleware;
        }
        /**
         * @param {!Object} options
         * @param {string} from
         * @return {?}
         */
        function replace(options, from) {
            if ("string" === typeof options) {
                options = {
                    path: options,
                    caseSensitive: false,
                    end: true
                };
            }
            var Default = function (s, sensitive, after) {
                if (void 0 === sensitive) {
                    /** @type {boolean} */
                    sensitive = false;
                }
                if (void 0 === after) {
                    /** @type {boolean} */
                    after = true;
                }
                /** @type {!Array} */
                var _watchableTools = [];
                /** @type {string} */
                var res = "^" + s.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/:(\w+)/g, function (canCreateDiscussions, t) {
                    return _watchableTools.push(t), "([^\\/]+)";
                });
                if (s.endsWith("*")) {
                    _watchableTools.push("*");
                    /** @type {string} */
                    res = res + ("*" === s || "/*" === s ? "(.*)$" : "(?:\\/(.+)|\\/*)$");
                } else {
                    /** @type {string} */
                    res = res + (after ? "\\/*$" : "(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)");
                }
                return [new RegExp(res, sensitive ? void 0 : "i"), _watchableTools];
            }(options.path, options.caseSensitive, options.end);
            var group = call(Default, 2);
            var id = group[0];
            var groupMembers = group[1];
            var itm = from.match(id);
            if (!itm) {
                return null;
            }
            var s = itm[0];
            var curBook = s.replace(/(.)\/+$/, "$1");
            var BROWSER_ENGINES = itm.slice(1);
            var nominatimQuery = groupMembers.reduce(function (eventsDict, event, browser) {
                if ("*" === event) {
                    var suffix = BROWSER_ENGINES[browser] || "";
                    curBook = s.slice(0, s.length - suffix.length).replace(/(.)\/+$/, "$1");
                }
                return eventsDict[event] = function (vEventVer, canCreateDiscussions) {
                    try {
                        return decodeURIComponent(vEventVer);
                    } catch (n) {
                        return vEventVer;
                    }
                }(BROWSER_ENGINES[browser] || ""), eventsDict;
            }, {});
            return {
                params: nominatimQuery,
                pathname: s,
                pathnameBase: curBook,
                pattern: options
            };
        }
        /**
         * @param {!Object} value
         * @param {!Array} arr
         * @param {number} x
         * @return {?}
         */
        function join(value, arr, x) {
            var r;
            var link = "string" === typeof value ? match(value) : value;
            var prefix = "" === value || "" === link.pathname ? "/" : link.pathname;
            if (null == prefix) {
                /** @type {number} */
                r = x;
            } else {
                /** @type {number} */
                var idx = arr.length - 1;
                if (prefix.startsWith("..")) {
                    var l = prefix.split("/");
                    for (; ".." === l[0];) {
                        l.shift();
                        /** @type {number} */
                        idx = idx - 1;
                    }
                    link.pathname = l.join("/");
                }
                r = idx >= 0 ? arr[idx] : "/";
            }
            var file = function (f, text) {
                if (void 0 === text) {
                    /** @type {string} */
                    text = "/";
                }
                var location = "string" === typeof f ? match(f) : f;
                var url = location.pathname;
                var str = location.search;
                var query = void 0 === str ? "" : str;
                var key = location.hash;
                var name = void 0 === key ? "" : key;
                var title = url ? url.startsWith("/") ? url : function (url, numberString) {
                    var n = numberString.replace(/\/+$/, "").split("/");
                    return url.split("/").forEach(function (e) {
                        if (".." === e) {
                            if (n.length > 1) {
                                n.pop();
                            }
                        } else {
                            if ("." !== e) {
                                n.push(e);
                            }
                        }
                    }), n.length > 1 ? n.join("/") : "/";
                }(url, text) : text;
                return {
                    pathname: title,
                    search: selectAll(query),
                    hash: md5(name)
                };
            }(link, r);
            return prefix && "/" !== prefix && prefix.endsWith("/") && !file.pathname.endsWith("/") && (file.pathname += "/"), file;
        }
        /**
         * @param {string} str
         * @param {!Object} path
         * @return {?}
         */
        function split(str, path) {
            if ("/" === path) {
                return str;
            }
            if (!str.toLowerCase().startsWith(path.toLowerCase())) {
                return null;
            }
            var attrOptions = str.charAt(path.length);
            return attrOptions && "/" !== attrOptions ? null : str.slice(path.length) || "/";
        }
        /**
         * @param {!Object} a
         * @return {?}
         */
        function redirect(a) {
            if (!unshift()) {
                shift(false);
            }
            var options = (0, React.useContext)(DTOptions);
            var basename = options.basename;
            var history = options.navigator;
            var el = getTemplate(a);
            var key = el.hash;
            var path = el.pathname;
            var url = el.search;
            var pathname = path;
            if ("/" !== basename) {
                var s = function (url) {
                    return "" === url || "" === url.pathname ? "/" : "string" === typeof url ? match(url).pathname : url.pathname;
                }(a);
                var isSub = null != s && s.endsWith("/");
                pathname = "/" === path ? basename + (isSub ? "/" : "") : evaluate([basename, path]);
            }
            return history.createHref({
                pathname: pathname,
                search: url,
                hash: key
            });
        }
        /**
         * @return {?}
         */
        function unshift() {
            return null != (0, React.useContext)(pinInput);
        }
        /**
         * @return {?}
         */
        function parseUrl() {
            return unshift() || shift(false), (0, React.useContext)(pinInput).location;
        }
        /**
         * @return {?}
         */
        function write() {
            if (!unshift()) {
                shift(false);
            }
            var options = (0, React.useContext)(DTOptions);
            var cid = options.basename;
            var types = options.navigator;
            var completions = (0, React.useContext)(media).matches;
            var dir = parseUrl().pathname;
            /** @type {string} */
            var key = JSON.stringify(completions.map(function (canCreateDiscussions) {
                return canCreateDiscussions.pathnameBase;
            }));
            var timestampGenerator = (0, React.useRef)(false);
            return (0, React.useEffect)(function () {
                /** @type {boolean} */
                timestampGenerator.current = true;
            }), (0, React.useCallback)(function (id, options) {
                if (void 0 === options && (options = {}), timestampGenerator.current) {
                    if ("number" !== typeof id) {
                        var file = join(id, JSON.parse(key), dir);
                        if ("/" !== cid) {
                            file.pathname = evaluate([cid, file.pathname]);
                        }
                        (options.replace ? types.replace : types.push)(file, options.state);
                    } else {
                        types.go(id);
                    }
                }
            }, [cid, types, key, dir]);
        }
        /**
         * @param {!Object} tree
         * @return {?}
         */
        function getTemplate(tree) {
            var completions = (0, React.useContext)(media).matches;
            var dir = parseUrl().pathname;
            /** @type {string} */
            var key = JSON.stringify(completions.map(function (canCreateDiscussions) {
                return canCreateDiscussions.pathnameBase;
            }));
            return (0, React.useMemo)(function () {
                return join(tree, JSON.parse(key), dir);
            }, [tree, key, dir]);
        }
        /**
         * @param {string} path
         * @param {!Array} options
         * @return {?}
         */
        function proxyMiddleware(path, options) {
            return void 0 === options && (options = []), null == path ? null : path.reduceRight(function (outlet, h, ind) {
                return (0, React.createElement)(media.Provider, {
                    children: void 0 !== h.route.element ? h.route.element : outlet,
                    value: {
                        outlet: outlet,
                        matches: options.concat(path.slice(0, ind + 1))
                    }
                });
            }, null);
        }
        /**
         * @param {?} name
         * @return {undefined}
         */
        function op(name) {
            shift(false);
        }
        /**
         * @param {!Object} data
         * @return {?}
         */
        function collect(data) {
            var name = data.basename;
            var path = void 0 === name ? "/" : name;
            var list = data.children;
            var arr = void 0 === list ? null : list;
            var m = data.location;
            var routeName = data.navigationType;
            var navigationType = void 0 === routeName ? stack.Pop : routeName;
            var nav = data.navigator;
            var dp = data.static;
            var descriptionEditable = void 0 !== dp && dp;
            if (unshift()) {
                shift(false);
            }
            var relPath = relative(path);
            var command_module_id = (0, React.useMemo)(function () {
                return {
                    basename: relPath,
                    navigator: nav,
                    static: descriptionEditable
                };
            }, [relPath, nav, descriptionEditable]);
            if ("string" === typeof m) {
                m = match(m);
            }
            var node = m;
            var key = node.pathname;
            var url = void 0 === key ? "/" : key;
            var val = node.search;
            var str = void 0 === val ? "" : val;
            var a = node.hash;
            var value = void 0 === a ? "" : a;
            var state = node.state;
            var nextState = void 0 === state ? null : state;
            var step = node.key;
            var id = void 0 === step ? "default" : step;
            var issuedispenseLocationUuid = (0, React.useMemo)(function () {
                var path = split(url, relPath);
                return null == path ? null : {
                    pathname: path,
                    search: str,
                    hash: value,
                    state: nextState,
                    key: id
                };
            }, [relPath, url, str, value, nextState, id]);
            return null == issuedispenseLocationUuid ? null : (0, React.createElement)(DTOptions.Provider, {
                value: command_module_id
            }, (0, React.createElement)(pinInput.Provider, {
                children: arr,
                value: {
                    location: issuedispenseLocationUuid,
                    navigationType: navigationType
                }
            }));
        }
        /**
         * @param {!Object} meta
         * @return {?}
         */
        function inspect(meta) {
            var n = meta.children;
            var l = meta.location;
            return function (args, a) {
                if (!unshift()) {
                    shift(false);
                }
                var r;
                var options = (0, React.useContext)(media).matches;
                var action = options[options.length - 1];
                var defaultParams = action ? action.params : {};
                var key = (action && action.pathname, action ? action.pathnameBase : "/");
                var G__20648 = (action && action.route, parseUrl());
                if (a) {
                    var currentPath;
                    var e = "string" === typeof a ? match(a) : a;
                    if (!("/" === key || (null == (currentPath = e.pathname) ? void 0 : currentPath.startsWith(key)))) {
                        shift(false);
                    }
                    r = e;
                } else {
                    r = G__20648;
                }
                var x = r.pathname || "/";
                var _keys = keys(args, {
                    pathname: "/" === key ? x : x.slice(key.length) || "/"
                });
                return proxyMiddleware(_keys && _keys.map(function (req) {
                    return Object.assign({}, req, {
                        params: Object.assign({}, defaultParams, req.params),
                        pathname: evaluate([key, req.pathname]),
                        pathnameBase: "/" === req.pathnameBase ? key : evaluate([key, req.pathnameBase])
                    });
                }), options);
            }(recurse(n), l);
        }
        /**
         * @param {!Function} obj
         * @return {?}
         */
        function recurse(obj) {
            /** @type {!Array} */
            var value = [];
            return React.Children.forEach(obj, function (base) {
                if ((0, React.isValidElement)(base)) {
                    if (base.type !== React.Fragment) {
                        if (base.type !== op) {
                            shift(false);
                        }
                        var options = {
                            caseSensitive: base.props.caseSensitive,
                            element: base.props.element,
                            index: base.props.index,
                            path: base.props.path
                        };
                        if (base.props.children) {
                            options.children = recurse(base.props.children);
                        }
                        value.push(options);
                    } else {
                        value.push.apply(value, recurse(base.props.children));
                    }
                }
            }), value;
        }
        /**
         * @return {?}
         */
        function parseArgs() {
            return parseArgs = Object.assign || function (obj) {
                /** @type {number} */
                var i = 1;
                for (; i < arguments.length; i++) {
                    var arg = arguments[i];
                    var k;
                    for (k in arg) {
                        if (Object.prototype.hasOwnProperty.call(arg, k)) {
                            obj[k] = arg[k];
                        }
                    }
                }
                return obj;
            }, parseArgs.apply(this, arguments);
        }
        /**
         * @param {!Object} e
         * @param {!Array} array
         * @return {?}
         */
        function copy(e, array) {
            if (null == e) {
                return {};
            }
            var k;
            var i;
            var t = {};
            /** @type {!Array<string>} */
            var params = Object.keys(e);
            /** @type {number} */
            i = 0;
            for (; i < params.length; i++) {
                /** @type {string} */
                k = params[i];
                if (!(array.indexOf(k) >= 0)) {
                    t[k] = e[k];
                }
            }
            return t;
        }
        /**
         * @param {!Object} that
         * @return {?}
         */
        function exports(that) {
            var name = that.basename;
            var bChildren = that.children;
            var win = that.window;
            var tv = (0, React.useRef)();
            if (null == tv.current) {
                tv.current = function (win) {
                    /**
                     * @return {?}
                     */
                    function init() {
                        var location = window.location;
                        var path = location.pathname;
                        var search = location.search;
                        var hash = location.hash;
                        var cfg = router.state || {};
                        return [cfg.idx, shape({
                            pathname: path,
                            search: search,
                            hash: hash,
                            state: cfg.usr || null,
                            key: cfg.key || "default"
                        })];
                    }
                    /**
                     * @param {(Object|string)} val
                     * @return {?}
                     */
                    function success(val) {
                        return "string" === typeof val ? val : unpack(val);
                    }
                    /**
                     * @param {(Object|string)} value
                     * @param {number} message
                     * @return {?}
                     */
                    function test(value, message) {
                        return void 0 === message && (message = null), shape(_extends({
                            pathname: obj.pathname,
                            hash: "",
                            search: ""
                        }, "string" === typeof value ? match(value) : value, {
                            state: message,
                            key: generateKey()
                        }));
                    }
                    /**
                     * @param {!Object} data
                     * @param {number} idx
                     * @return {?}
                     */
                    function getValue(data, idx) {
                        return [{
                            usr: data.state,
                            key: data.key,
                            idx: idx
                        }, success(data)];
                    }
                    /**
                     * @param {!Object} msg
                     * @param {string} t
                     * @param {!Object} opts
                     * @return {?}
                     */
                    function check(msg, t, opts) {
                        return !self.length || (self.call({
                            action: msg,
                            location: t,
                            retry: opts
                        }), false);
                    }
                    /**
                     * @param {!Object} f
                     * @return {undefined}
                     */
                    function cb(f) {
                        /** @type {!Object} */
                        field = f;
                        var m = init();
                        idx = m[0];
                        obj = m[1];
                        c.call({
                            action: field,
                            location: obj
                        });
                    }
                    /**
                     * @param {number} id
                     * @return {undefined}
                     */
                    function send(id) {
                        router.go(id);
                    }
                    if (void 0 === win) {
                        win = {};
                    }
                    var undefined = win.window;
                    var window = void 0 === undefined ? document.defaultView : undefined;
                    var router = window.history;
                    /** @type {null} */
                    var result = null;
                    window.addEventListener(ActionEvent, function () {
                        if (result) {
                            self.call(result);
                            /** @type {null} */
                            result = null;
                        } else {
                            var url = stack.Pop;
                            var ret = init();
                            var offset = ret[0];
                            var parent = ret[1];
                            if (self.length) {
                                if (null != offset) {
                                    /** @type {number} */
                                    var step = idx - offset;
                                    if (step) {
                                        result = {
                                            action: url,
                                            location: parent,
                                            retry: function () {
                                                send(-1 * step);
                                            }
                                        };
                                        send(step);
                                    }
                                }
                            } else {
                                cb(url);
                            }
                        }
                    });
                    var field = stack.Pop;
                    var state = init();
                    var idx = state[0];
                    var obj = state[1];
                    var c = observable();
                    var self = observable();
                    if (null == idx) {
                        /** @type {number} */
                        idx = 0;
                        router.replaceState(_extends({}, router.state, {
                            idx: idx
                        }), "");
                    }
                    var history = {
                        get action() {
                            return field;
                        },
                        get location() {
                            return obj;
                        },
                        createHref: success,
                        push: function update(value, str) {
                            var url = stack.Push;
                            var result = test(value, str);
                            if (check(url, result, function () {
                                update(value, str);
                            })) {
                                var value = getValue(result, idx + 1);
                                var command = value[0];
                                var e = value[1];
                                try {
                                    router.pushState(command, "", e);
                                } catch (f) {
                                    window.location.assign(e);
                                }
                                cb(url);
                            }
                        },
                        replace: function c(value, a) {
                            var url = stack.Replace;
                            var result = test(value, a);
                            if (check(url, result, function () {
                                c(value, a);
                            })) {
                                var data = getValue(result, idx);
                                var tokens = data[0];
                                var hash = data[1];
                                router.replaceState(tokens, "", hash);
                                cb(url);
                            }
                        },
                        go: send,
                        back: function () {
                            send(-1);
                        },
                        forward: function () {
                            send(1);
                        },
                        listen: function (name) {
                            return c.push(name);
                        },
                        block: function (type) {
                            var zip = self.push(type);
                            return 1 === self.length && window.addEventListener(RESIZE_EV, onMousedown), function () {
                                zip();
                                if (!self.length) {
                                    window.removeEventListener(RESIZE_EV, onMousedown);
                                }
                            };
                        }
                    };
                    return history;
                }({
                    window: win
                });
            }
            var data = tv.current;
            var result = call((0, React.useState)({
                action: data.action,
                location: data.location
            }), 2);
            var error = result[0];
            var type = result[1];
            return (0, React.useLayoutEffect)(function () {
                return data.listen(type);
            }, [data]), (0, React.createElement)(collect, {
                basename: name,
                children: bChildren,
                location: error.location,
                navigationType: error.action,
                navigator: data
            });
        }
        /**
         * @param {!Object} index
         * @param {undefined} n
         * @param {string} e
         * @param {!Array} template
         * @return {?}
         */
        function onSuccess(index, n, e, template) {
            /** @type {boolean} */
            var UTC = e.indexOf(index) === e.length - 1;
            var d = function (tpl, r) {
                if (!tpl.breadcrumbName) {
                    return null;
                }
                /** @type {string} */
                var i = Object.keys(r).join("|");
                var .num_const = tpl.breadcrumbName.replace(new RegExp(":(".concat(i, ")"), "g"), function (match, n) {
                    return r[n] || match;
                });
                return .num_const;
            }(index, n);
            return UTC ? React.createElement("span", null, d) : React.createElement("a", {
                href: "#/".concat(template.join("/"))
            }, d);
        }
        var React = __webpack_require__(2791);
        var core = __webpack_require__(1250);
        var __WEBPACK_IMPORTED_MODULE_1_jsmidgen__ = __webpack_require__(1694);
        var require = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jsmidgen__);
        var object = React.createContext({
            getPrefixCls: function (name, value) {
                return value || (name ? "ant-".concat(name) : "ant");
            }
        });
        var src = object.Consumer;
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var put = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var react_redux_1 = React.createContext({
            siderHook: {
                addSider: function () {
                    return null;
                },
                removeSider: function () {
                    return null;
                }
            }
        });
        var t_path = React.forwardRef(function (node, oldRef) {
            var e = node.prefixCls;
            var state = node.className;
            var tabHeads = node.children;
            var tagName = node.tagName;
            var result = put(node, ["prefixCls", "className", "children", "tagName"]);
            var style = require()(e, state);
            return React.createElement(tagName, _extends(_extends({
                className: style
            }, result), {
                ref: oldRef
            }), tabHeads);
        });
        var clonedVars = React.forwardRef(function (data, oldRef) {
            var err;
            var currentDirection = React.useContext(object).direction;
            var group = call(React.useState([]), 2);
            var expr = group[0];
            var low = group[1];
            var id = data.prefixCls;
            var name = data.className;
            var items = data.children;
            var response = data.hasSider;
            var tag = data.tagName;
            var result = put(data, ["prefixCls", "className", "children", "hasSider", "tagName"]);
            var attachment = require()(id, (debug(err = {}, "".concat(id, "-has-sider"), "boolean" === typeof response ? response : expr.length > 0), debug(err, "".concat(id, "-rtl"), "rtl" === currentDirection), err), name);
            var command_module_id = React.useMemo(function () {
                return {
                    siderHook: {
                        addSider: function (b) {
                            low(function (value) {
                                return [].concat(resolve(value), [b]);
                            });
                        },
                        removeSider: function (value) {
                            low(function (swimlanes) {
                                return swimlanes.filter(function (optionsValue) {
                                    return optionsValue !== value;
                                });
                            });
                        }
                    }
                };
            }, []);
            return React.createElement(react_redux_1.Provider, {
                value: command_module_id
            }, React.createElement(tag, _extends({
                ref: oldRef,
                className: attachment
            }, result), items));
        });
        var currentRelations = template({
            suffixCls: "layout",
            tagName: "section",
            displayName: "Layout"
        })(clonedVars);
        var Header = template({
            suffixCls: "layout-header",
            tagName: "header",
            displayName: "Header"
        })(t_path);
        var Footer = template({
            suffixCls: "layout-footer",
            tagName: "footer",
            displayName: "Footer"
        })(t_path);
        var contents = template({
            suffixCls: "layout-content",
            tagName: "main",
            displayName: "Content"
        })(t_path);
        var addedRelations = currentRelations;
        var m = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "0 0 1024 1024",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z"
                    }
                }]
            },
            name: "bars",
            theme: "outlined"
        };
        var removeCritText = (0, React.createContext)({});
        var namedColors = {
            aliceblue: "#f0f8ff",
            antiquewhite: "#faebd7",
            aqua: "#00ffff",
            aquamarine: "#7fffd4",
            azure: "#f0ffff",
            beige: "#f5f5dc",
            bisque: "#ffe4c4",
            black: "#000000",
            blanchedalmond: "#ffebcd",
            blue: "#0000ff",
            blueviolet: "#8a2be2",
            brown: "#a52a2a",
            burlywood: "#deb887",
            cadetblue: "#5f9ea0",
            chartreuse: "#7fff00",
            chocolate: "#d2691e",
            coral: "#ff7f50",
            cornflowerblue: "#6495ed",
            cornsilk: "#fff8dc",
            crimson: "#dc143c",
            cyan: "#00ffff",
            darkblue: "#00008b",
            darkcyan: "#008b8b",
            darkgoldenrod: "#b8860b",
            darkgray: "#a9a9a9",
            darkgreen: "#006400",
            darkgrey: "#a9a9a9",
            darkkhaki: "#bdb76b",
            darkmagenta: "#8b008b",
            darkolivegreen: "#556b2f",
            darkorange: "#ff8c00",
            darkorchid: "#9932cc",
            darkred: "#8b0000",
            darksalmon: "#e9967a",
            darkseagreen: "#8fbc8f",
            darkslateblue: "#483d8b",
            darkslategray: "#2f4f4f",
            darkslategrey: "#2f4f4f",
            darkturquoise: "#00ced1",
            darkviolet: "#9400d3",
            deeppink: "#ff1493",
            deepskyblue: "#00bfff",
            dimgray: "#696969",
            dimgrey: "#696969",
            dodgerblue: "#1e90ff",
            firebrick: "#b22222",
            floralwhite: "#fffaf0",
            forestgreen: "#228b22",
            fuchsia: "#ff00ff",
            gainsboro: "#dcdcdc",
            ghostwhite: "#f8f8ff",
            goldenrod: "#daa520",
            gold: "#ffd700",
            gray: "#808080",
            green: "#008000",
            greenyellow: "#adff2f",
            grey: "#808080",
            honeydew: "#f0fff0",
            hotpink: "#ff69b4",
            indianred: "#cd5c5c",
            indigo: "#4b0082",
            ivory: "#fffff0",
            khaki: "#f0e68c",
            lavenderblush: "#fff0f5",
            lavender: "#e6e6fa",
            lawngreen: "#7cfc00",
            lemonchiffon: "#fffacd",
            lightblue: "#add8e6",
            lightcoral: "#f08080",
            lightcyan: "#e0ffff",
            lightgoldenrodyellow: "#fafad2",
            lightgray: "#d3d3d3",
            lightgreen: "#90ee90",
            lightgrey: "#d3d3d3",
            lightpink: "#ffb6c1",
            lightsalmon: "#ffa07a",
            lightseagreen: "#20b2aa",
            lightskyblue: "#87cefa",
            lightslategray: "#778899",
            lightslategrey: "#778899",
            lightsteelblue: "#b0c4de",
            lightyellow: "#ffffe0",
            lime: "#00ff00",
            limegreen: "#32cd32",
            linen: "#faf0e6",
            magenta: "#ff00ff",
            maroon: "#800000",
            mediumaquamarine: "#66cdaa",
            mediumblue: "#0000cd",
            mediumorchid: "#ba55d3",
            mediumpurple: "#9370db",
            mediumseagreen: "#3cb371",
            mediumslateblue: "#7b68ee",
            mediumspringgreen: "#00fa9a",
            mediumturquoise: "#48d1cc",
            mediumvioletred: "#c71585",
            midnightblue: "#191970",
            mintcream: "#f5fffa",
            mistyrose: "#ffe4e1",
            moccasin: "#ffe4b5",
            navajowhite: "#ffdead",
            navy: "#000080",
            oldlace: "#fdf5e6",
            olive: "#808000",
            olivedrab: "#6b8e23",
            orange: "#ffa500",
            orangered: "#ff4500",
            orchid: "#da70d6",
            palegoldenrod: "#eee8aa",
            palegreen: "#98fb98",
            paleturquoise: "#afeeee",
            palevioletred: "#db7093",
            papayawhip: "#ffefd5",
            peachpuff: "#ffdab9",
            peru: "#cd853f",
            pink: "#ffc0cb",
            plum: "#dda0dd",
            powderblue: "#b0e0e6",
            purple: "#800080",
            rebeccapurple: "#663399",
            red: "#ff0000",
            rosybrown: "#bc8f8f",
            royalblue: "#4169e1",
            saddlebrown: "#8b4513",
            salmon: "#fa8072",
            sandybrown: "#f4a460",
            seagreen: "#2e8b57",
            seashell: "#fff5ee",
            sienna: "#a0522d",
            silver: "#c0c0c0",
            skyblue: "#87ceeb",
            slateblue: "#6a5acd",
            slategray: "#708090",
            slategrey: "#708090",
            snow: "#fffafa",
            springgreen: "#00ff7f",
            steelblue: "#4682b4",
            tan: "#d2b48c",
            teal: "#008080",
            thistle: "#d8bfd8",
            tomato: "#ff6347",
            turquoise: "#40e0d0",
            violet: "#ee82ee",
            wheat: "#f5deb3",
            white: "#ffffff",
            whitesmoke: "#f5f5f5",
            yellow: "#ffff00",
            yellowgreen: "#9acd32"
        };
        /** @type {string} */
        var webAnimations1Src = "(?:".concat("[-\\+]?\\d*\\.\\d+%?", ")|(?:").concat("[-\\+]?\\d+%?", ")");
        /** @type {string} */
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(webAnimations1Src, ")[,|\\s]+(").concat(webAnimations1Src, ")[,|\\s]+(").concat(webAnimations1Src, ")\\s*\\)?");
        /** @type {string} */
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(webAnimations1Src, ")[,|\\s]+(").concat(webAnimations1Src, ")[,|\\s]+(").concat(webAnimations1Src, ")[,|\\s]+(").concat(webAnimations1Src, ")\\s*\\)?");
        var matchers = {
            CSS_UNIT: new RegExp(webAnimations1Src),
            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
            hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
        /** @type {!Array} */
        var navLinksArr = [{
            index: 7,
            opacity: .15
        }, {
            index: 6,
            opacity: .25
        }, {
            index: 5,
            opacity: .3
        }, {
            index: 5,
            opacity: .45
        }, {
            index: 5,
            opacity: .65
        }, {
            index: 5,
            opacity: .85
        }, {
            index: 4,
            opacity: .9
        }, {
            index: 3,
            opacity: .95
        }, {
            index: 2,
            opacity: .97
        }, {
            index: 1,
            opacity: .98
        }];
        var foo = {
            red: "#F5222D",
            volcano: "#FA541C",
            orange: "#FA8C16",
            gold: "#FAAD14",
            yellow: "#FADB14",
            lime: "#A0D911",
            green: "#52C41A",
            cyan: "#13C2C2",
            blue: "#1890FF",
            geekblue: "#2F54EB",
            purple: "#722ED1",
            magenta: "#EB2F96",
            grey: "#666666"
        };
        var colors = {};
        var newSequence = {};
        Object.keys(foo).forEach(function (i) {
            colors[i] = merge(foo[i]);
            colors[i].primary = colors[i][5];
            newSequence[i] = merge(foo[i], {
                theme: "dark",
                backgroundColor: "#141414"
            });
            newSequence[i].primary = newSequence[i][5];
        });
        colors.red;
        colors.volcano;
        colors.gold;
        colors.orange;
        colors.yellow;
        colors.lime;
        colors.green;
        colors.cyan;
        colors.blue;
        colors.geekblue;
        colors.purple;
        colors.magenta;
        colors.grey;
        var TRACK_ERROR_TO_MESSAGE_MAP = {};
        /**
         * @param {boolean} type
         * @param {string} result
         * @return {undefined}
         */
        var assert = function (type, result) {
            report(Spring, type, result);
        };
        /** @type {string} */
        var idPrefix = "rc-util-key";
        /** @type {!Map} */
        var groups = new Map;
        /** @type {string} */
        var General = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
        /** @type {!Array} */
        var classes = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
        var defaults = {
            primaryColor: "#333",
            secondaryColor: "#E6E6E6",
            calculated: false
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var Tooltip = function (options) {
            var context = options.icon;
            var className = options.className;
            var onClick = options.onClick;
            var textStyle = options.style;
            var primaryColor = options.primaryColor;
            var readOnlyFn = options.secondaryColor;
            var data = get(options, classes);
            var opts = defaults;
            if (primaryColor && (opts = {
                primaryColor: primaryColor,
                secondaryColor: readOnlyFn || darken(primaryColor)
            }), function () {
                var problemStr = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : General;
                var config = (0, React.useContext)(removeCritText).csp;
                (0, React.useEffect)(function () {
                    request(problemStr, "@ant-design-icons", {
                        prepend: true,
                        csp: config
                    });
                }, []);
            }(), function (e, text) {
                assert(e, "[@ant-design/icons] ".concat(text));
            }(toFunction(context), "icon should be icon definiton, but got ".concat(context)), !toFunction(context)) {
                return null;
            }
            var obj = context;
            return obj && "function" === typeof obj.icon && (obj = assign(assign({}, obj), {}, {
                icon: obj.icon(opts.primaryColor, opts.secondaryColor)
            })), set(obj.icon, "svg-".concat(obj.name), assign({
                className: className,
                onClick: onClick,
                style: textStyle,
                "data-icon": obj.name,
                width: "1em",
                height: "1em",
                fill: "currentColor",
                "aria-hidden": "true"
            }, data));
        };
        /** @type {string} */
        Tooltip.displayName = "IconReact";
        /**
         * @return {?}
         */
        Tooltip.getTwoToneColors = function () {
            return assign({}, defaults);
        };
        /**
         * @param {!Object} theme
         * @return {undefined}
         */
        Tooltip.setTwoToneColors = function (theme) {
            var primaryColor = theme.primaryColor;
            var name = theme.secondaryColor;
            defaults.primaryColor = primaryColor;
            defaults.secondaryColor = name || darken(primaryColor);
            /** @type {boolean} */
            defaults.calculated = !!name;
        };
        /** @type {function(!Object): ?} */
        var UserEditFormController = Tooltip;
        /** @type {!Array} */
        var required = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
        size("#1890ff");
        var fb = React.forwardRef(function (options, oldRef) {
            var err;
            var classes = options.className;
            var activity = options.icon;
            var includerReg = options.spin;
            var transform = options.rotate;
            var tabIndex = options.tabIndex;
            var onClick = options.onClick;
            var fn = options.twoToneColor;
            var schema = get(options, required);
            var step = React.useContext(removeCritText).prefixCls;
            var id = void 0 === step ? "anticon" : step;
            var styleId = require()(id, (debug(err = {}, "".concat(id, "-").concat(activity.name), !!activity.name), debug(err, "".concat(id, "-spin"), !!includerReg || "loading" === activity.name), err), classes);
            var TAB_INDEX = tabIndex;
            if (void 0 === TAB_INDEX && onClick) {
                /** @type {number} */
                TAB_INDEX = -1;
            }
            /** @type {(undefined|{msTransform: string, transform: string})} */
            var b = transform ? {
                msTransform: "rotate(".concat(transform, "deg)"),
                transform: "rotate(".concat(transform, "deg)")
            } : void 0;
            var group = call(indexOf(fn), 2);
            var endtoken = group[0];
            var secondaryColor = group[1];
            return React.createElement("span", assign(assign({
                role: "img",
                "aria-label": activity.name
            }, schema), {}, {
                ref: oldRef,
                tabIndex: TAB_INDEX,
                onClick: onClick,
                className: styleId
            }), React.createElement(UserEditFormController, {
                icon: activity,
                primaryColor: endtoken,
                secondaryColor: secondaryColor,
                style: b
            }));
        });
        /** @type {string} */
        fb.displayName = "AntdIcon";
        /**
         * @return {?}
         */
        fb.getTwoToneColor = function () {
            var options = UserEditFormController.getTwoToneColors();
            return options.calculated ? [options.primaryColor, options.secondaryColor] : options.primaryColor;
        };
        /** @type {function(!Object): ?} */
        fb.setTwoToneColor = size;
        var VictoryLine = fb;
        /**
         * @param {?} context
         * @param {string} url
         * @return {?}
         */
        var img = function (context, url) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: url,
                icon: m
            }));
        };
        /** @type {string} */
        img.displayName = "BarsOutlined";
        var Icon3D = React.forwardRef(img);
        var defaultOptions = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                    }
                }]
            },
            name: "left",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} object
         * @return {?}
         */
        var form = function (context, object) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: object,
                icon: defaultOptions
            }));
        };
        /** @type {string} */
        form.displayName = "LeftOutlined";
        var rep = React.forwardRef(form);
        var _data = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"
                    }
                }]
            },
            name: "right",
            theme: "outlined"
        };
        /**
         * @param {?} i
         * @param {string} name
         * @return {?}
         */
        var p = function (i, name) {
            return React.createElement(VictoryLine, assign(assign({}, i), {}, {
                ref: name,
                icon: _data
            }));
        };
        /** @type {string} */
        p.displayName = "RightOutlined";
        var NgReactGridShowPerPage = React.forwardRef(p);
        /**
         * @param {?} obj
         * @return {?}
         */
        var isNumber = function (obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        };
        /**
         * @param {!Object} obj
         * @param {!Array} params
         * @return {?}
         */
        var Class = function (obj, params) {
            var ret = {};
            var p;
            for (p in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, p) && params.indexOf(p) < 0) {
                    ret[p] = obj[p];
                }
            }
            if (null != obj && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                p = Object.getOwnPropertySymbols(obj);
                for (; i < p.length; i++) {
                    if (params.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(obj, p[i])) {
                        ret[p[i]] = obj[p[i]];
                    }
                }
            }
            return ret;
        };
        var breakpoints = {
            xs: "479.98px",
            sm: "575.98px",
            md: "767.98px",
            lg: "991.98px",
            xl: "1199.98px",
            xxl: "1599.98px"
        };
        var _reactRedux = React.createContext({});
        var set_svg = function () {
            /** @type {number} */
            var msg = 0;
            return function () {
                var num = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                return msg = msg + 1, "".concat(num).concat(msg);
            };
        }();
        var hello = React.forwardRef(function (options, oldRef) {
            var structure = options.prefixCls;
            var classes = options.className;
            var text = options.trigger;
            var items = options.children;
            var startState = options.defaultCollapsed;
            var freshState = void 0 !== startState && startState;
            var attr = options.theme;
            var n = void 0 === attr ? "dark" : attr;
            var m = options.style;
            var namespace = void 0 === m ? {} : m;
            var current = options.collapsible;
            var forceMarkAsRead = void 0 !== current && current;
            var isReversed = options.reverseArrow;
            var mandatoryOnly = void 0 !== isReversed && isReversed;
            var data = options.width;
            var html = void 0 === data ? 200 : data;
            var args = options.collapsedWidth;
            var arg1 = void 0 === args ? 80 : args;
            var useStyleString = options.zeroWidthTriggerStyle;
            var name = options.breakpoint;
            var value = options.onCollapse;
            var callback = options.onBreakpoint;
            var node = Class(options, ["prefixCls", "className", "trigger", "children", "defaultCollapsed", "theme", "style", "collapsible", "reverseArrow", "width", "collapsedWidth", "zeroWidthTriggerStyle", "breakpoint", "onCollapse", "onBreakpoint"]);
            var touchSystem = (0, React.useContext)(react_redux_1).siderHook;
            var group = call((0, React.useState)("collapsed" in node ? node.collapsed : freshState), 2);
            var startCollapsed = group[0];
            var last = group[1];
            var black = call((0, React.useState)(false), 2);
            var hasUnreadPosts = black[0];
            var defaults = black[1];
            (0, React.useEffect)(function () {
                if ("collapsed" in node) {
                    last(node.collapsed);
                }
            }, [node.collapsed]);
            /**
             * @param {boolean} list
             * @param {string} name
             * @return {undefined}
             */
            var render = function (list, name) {
                if (!("collapsed" in node)) {
                    last(list);
                }
                if (!(null === value || void 0 === value)) {
                    value(list, name);
                }
            };
            var dashboard = (0, React.useRef)();
            /**
             * @param {!Object} options
             * @return {undefined}
             */
            dashboard.current = function (options) {
                defaults(options.matches);
                if (!(null === callback || void 0 === callback)) {
                    callback(options.matches);
                }
                if (startCollapsed !== options.matches) {
                    render(options.matches, "responsive");
                }
            };
            (0, React.useEffect)(function () {
                /**
                 * @param {!Object} type
                 * @return {?}
                 */
                function e(type) {
                    return dashboard.current(type);
                }
                var ref;
                if ("undefined" !== typeof window) {
                    /** @type {function(this:Window, string): (MediaQueryList|null)} */
                    var oldMM = window.matchMedia;
                    if (oldMM && name && name in breakpoints) {
                        /** @type {(MediaQueryList|null)} */
                        ref = oldMM("(max-width: ".concat(breakpoints[name], ")"));
                        try {
                            ref.addEventListener("change", e);
                        } catch (r) {
                            ref.addListener(e);
                        }
                        e(ref);
                    }
                }
                return function () {
                    try {
                        if (!(null === ref || void 0 === ref)) {
                            ref.removeEventListener("change", e);
                        }
                    } catch (r) {
                        if (!(null === ref || void 0 === ref)) {
                            ref.removeListener(e);
                        }
                    }
                };
            }, [name]);
            (0, React.useEffect)(function () {
                var e = set_svg("ant-sider-");
                return touchSystem.addSider(e), function () {
                    return touchSystem.removeSider(e);
                };
            }, []);
            /**
             * @return {undefined}
             */
            var onPlusClick = function () {
                render(!startCollapsed, "clickTrigger");
            };
            var createNode = (0, React.useContext)(object).getPrefixCls;
            var command_module_id = React.useMemo(function () {
                return {
                    siderCollapsed: startCollapsed
                };
            }, [startCollapsed]);
            return React.createElement(_reactRedux.Provider, {
                value: command_module_id
            }, function () {
                var err;
                var id = createNode("layout-sider", structure);
                var props = apply(node, ["collapsed"]);
                var val = startCollapsed ? arg1 : html;
                /** @type {string} */
                var width = isNumber(val) ? "".concat(val, "px") : String(val);
                var srcNodeRef = 0 === parseFloat(String(arg1 || 0)) ? React.createElement("span", {
                    onClick: onPlusClick,
                    className: require()("".concat(id, "-zero-width-trigger"), "".concat(id, "-zero-width-trigger-").concat(mandatoryOnly ? "right" : "left")),
                    style: useStyleString
                }, text || React.createElement(Icon3D, null)) : null;
                var value = {
                    expanded: mandatoryOnly ? React.createElement(NgReactGridShowPerPage, null) : React.createElement(rep, null),
                    collapsed: mandatoryOnly ? React.createElement(rep, null) : React.createElement(NgReactGridShowPerPage, null)
                }[startCollapsed ? "collapsed" : "expanded"];
                var end = null !== text ? srcNodeRef || React.createElement("div", {
                    className: "".concat(id, "-trigger"),
                    onClick: onPlusClick,
                    style: {
                        width: width
                    }
                }, text || value) : null;
                var baseHRstyle = _extends(_extends({}, namespace), {
                    flex: "0 0 ".concat(width),
                    maxWidth: width,
                    minWidth: width,
                    width: width
                });
                var styleId = require()(id, "".concat(id, "-").concat(n), (debug(err = {}, "".concat(id, "-collapsed"), !!startCollapsed), debug(err, "".concat(id, "-has-trigger"), forceMarkAsRead && null !== text && !srcNodeRef), debug(err, "".concat(id, "-below"), !!hasUnreadPosts), debug(err, "".concat(id, "-zero-width"), 0 === parseFloat(width)), err), classes);
                return React.createElement("aside", _extends({
                    className: styleId
                }, props, {
                    style: baseHRstyle,
                    ref: oldRef
                }), React.createElement("div", {
                    className: "".concat(id, "-children")
                }, items), forceMarkAsRead || hasUnreadPosts && srcNodeRef ? end : null);
            }());
        });
        var title = hello;
        var $rootScope = addedRelations;
        $rootScope.Header = Header;
        $rootScope.Footer = Footer;
        $rootScope.Content = contents;
        $rootScope.Sider = title;
        var helper = $rootScope;
        var store = __webpack_require__(7441);
        var d = __webpack_require__(4164);
        var one = __webpack_require__.t(d, 2);
        var MapShim = function () {
            /**
             * @param {!Array} array
             * @param {!Function} value
             * @return {?}
             */
            function getIndex(array, value) {
                /** @type {number} */
                var lastTrackInfoUrl = -1;
                return array.some(function (htmlvalue, trackInfoUrl) {
                    return htmlvalue[0] === value && (lastTrackInfoUrl = trackInfoUrl, true);
                }), lastTrackInfoUrl;
            }
            if ("undefined" !== typeof Map) {
                return Map;
            }
            return function () {
                /**
                 * @return {undefined}
                 */
                function anonymous() {
                    /** @type {!Array} */
                    this.__entries__ = [];
                }
                return Object.defineProperty(anonymous.prototype, "size", {
                    get: function () {
                        return this.__entries__.length;
                    },
                    enumerable: true,
                    configurable: true
                }), anonymous.prototype.get = function (key) {
                    var index = getIndex(this.__entries__, key);
                    var entry = this.__entries__[index];
                    return entry && entry[1];
                }, anonymous.prototype.set = function (key, value) {
                    var index = getIndex(this.__entries__, key);
                    if (~index) {
                        this.__entries__[index][1] = value;
                    } else {
                        this.__entries__.push([key, value]);
                    }
                }, anonymous.prototype.delete = function (type) {
                    var entries = this.__entries__;
                    var i = getIndex(entries, type);
                    if (~i) {
                        entries.splice(i, 1);
                    }
                }, anonymous.prototype.has = function (type) {
                    return !!~getIndex(this.__entries__, type);
                }, anonymous.prototype.clear = function () {
                    this.__entries__.splice(0);
                }, anonymous.prototype.forEach = function (func, array) {
                    if (void 0 === array) {
                        /** @type {null} */
                        array = null;
                    }
                    /** @type {number} */
                    var i = 0;
                    var entries = this.__entries__;
                    for (; i < entries.length; i++) {
                        var obj = entries[i];
                        func.call(array, obj[1], obj[0]);
                    }
                }, anonymous;
            }();
        }();
        /** @type {boolean} */
        var shouldBeLoved = "undefined" !== typeof window && "undefined" !== typeof document && window.document === document;
        var scope = "undefined" !== typeof __webpack_require__.g && __webpack_require__.g.Math === Math ? __webpack_require__.g : "undefined" !== typeof self && self.Math === Math ? self : "undefined" !== typeof window && window.Math === Math ? window : Function("return this")();
        /** @type {!Function} */
        var _i_ = "function" === typeof requestAnimationFrame ? requestAnimationFrame.bind(scope) : function (stripTerrain) {
            return setTimeout(function () {
                return stripTerrain(Date.now());
            }, 1E3 / 60);
        };
        /** @type {!Array} */
        var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
        /** @type {boolean} */
        var hasDefine = "undefined" !== typeof MutationObserver;
        var RepositoryApi = function () {
            /**
             * @return {undefined}
             */
            function ResizeObserverController() {
                /** @type {boolean} */
                this.connected_ = false;
                /** @type {boolean} */
                this.mutationEventsAdded_ = false;
                /** @type {null} */
                this.mutationsObserver_ = null;
                /** @type {!Array} */
                this.observers_ = [];
                this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
                this.refresh = function (round, timeToFadeIn) {
                    /**
                     * @return {undefined}
                     */
                    function river() {
                        if (n) {
                            /** @type {boolean} */
                            n = false;
                            round();
                        }
                        if (r) {
                            push();
                        }
                    }
                    /**
                     * @return {undefined}
                     */
                    function i() {
                        _i_(river);
                    }
                    /**
                     * @return {undefined}
                     */
                    function push() {
                        /** @type {number} */
                        var connectNumber = Date.now();
                        if (n) {
                            if (connectNumber - concurency < 2) {
                                return;
                            }
                            /** @type {boolean} */
                            r = true;
                        } else {
                            /** @type {boolean} */
                            n = true;
                            /** @type {boolean} */
                            r = false;
                            setTimeout(i, timeToFadeIn);
                        }
                        /** @type {number} */
                        concurency = connectNumber;
                    }
                    /** @type {boolean} */
                    var n = false;
                    /** @type {boolean} */
                    var r = false;
                    /** @type {number} */
                    var concurency = 0;
                    return push;
                }(this.refresh.bind(this), 20);
            }
            return ResizeObserverController.prototype.addObserver = function (callback) {
                if (!~this.observers_.indexOf(callback)) {
                    this.observers_.push(callback);
                }
                if (!this.connected_) {
                    this.connect_();
                }
            }, ResizeObserverController.prototype.removeObserver = function (callback) {
                var observers = this.observers_;
                var i = observers.indexOf(callback);
                if (~i) {
                    observers.splice(i, 1);
                }
                if (!observers.length && this.connected_) {
                    this.disconnect_();
                }
            }, ResizeObserverController.prototype.refresh = function () {
                if (this.updateObservers_()) {
                    this.refresh();
                }
            }, ResizeObserverController.prototype.updateObservers_ = function () {
                var deprecatedStylingMethods = this.observers_.filter(function (observer) {
                    return observer.gatherActive(), observer.hasActive();
                });
                return deprecatedStylingMethods.forEach(function (observer) {
                    return observer.broadcastActive();
                }), deprecatedStylingMethods.length > 0;
            }, ResizeObserverController.prototype.connect_ = function () {
                if (shouldBeLoved && !this.connected_) {
                    document.addEventListener("transitionend", this.onTransitionEnd_);
                    window.addEventListener("resize", this.refresh);
                    if (hasDefine) {
                        /** @type {!MutationObserver} */
                        this.mutationsObserver_ = new MutationObserver(this.refresh);
                        this.mutationsObserver_.observe(document, {
                            attributes: true,
                            childList: true,
                            characterData: true,
                            subtree: true
                        });
                    } else {
                        document.addEventListener("DOMSubtreeModified", this.refresh);
                        /** @type {boolean} */
                        this.mutationEventsAdded_ = true;
                    }
                    /** @type {boolean} */
                    this.connected_ = true;
                }
            }, ResizeObserverController.prototype.disconnect_ = function () {
                if (shouldBeLoved && this.connected_) {
                    document.removeEventListener("transitionend", this.onTransitionEnd_);
                    window.removeEventListener("resize", this.refresh);
                    if (this.mutationsObserver_) {
                        this.mutationsObserver_.disconnect();
                    }
                    if (this.mutationEventsAdded_) {
                        document.removeEventListener("DOMSubtreeModified", this.refresh);
                    }
                    /** @type {null} */
                    this.mutationsObserver_ = null;
                    /** @type {boolean} */
                    this.mutationEventsAdded_ = false;
                    /** @type {boolean} */
                    this.connected_ = false;
                }
            }, ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {
                var name = ref.propertyName;
                var out = void 0 === name ? "" : name;
                /** @type {boolean} */
                var r = transitionKeys.some(function (surl) {
                    return !!~out.indexOf(surl);
                });
                if (r) {
                    this.refresh();
                }
            }, ResizeObserverController.getInstance = function () {
                return this.instance_ || (this.instance_ = new ResizeObserverController), this.instance_;
            }, ResizeObserverController.instance_ = null, ResizeObserverController;
        }();
        /**
         * @param {!Object} target
         * @param {undefined} data
         * @return {?}
         */
        var defineConfigurable = function (target, data) {
            /** @type {number} */
            var i = 0;
            /** @type {!Array<string>} */
            var $data = Object.keys(data);
            for (; i < $data.length; i++) {
                /** @type {string} */
                var o = $data[i];
                Object.defineProperty(target, o, {
                    value: data[o],
                    enumerable: false,
                    writable: false,
                    configurable: true
                });
            }
            return target;
        };
        /**
         * @param {!Object} element
         * @return {?}
         */
        var isElement = function (element) {
            return element && element.ownerDocument && element.ownerDocument.defaultView || scope;
        };
        var emptyRect = createRectInit(0, 0, 0, 0);
        /** @type {function(!Object): ?} */
        var skip_user_level = "undefined" !== typeof SVGGraphicsElement ? function (parent) {
            return parent instanceof isElement(parent).SVGGraphicsElement;
        } : function (el) {
            return el instanceof isElement(el).SVGElement && "function" === typeof el.getBBox;
        };
        var ResizeObservation = function () {
            /**
             * @param {string} target
             * @return {undefined}
             */
            function ResizeObservation(target) {
                /** @type {number} */
                this.broadcastWidth = 0;
                /** @type {number} */
                this.broadcastHeight = 0;
                this.contentRect_ = createRectInit(0, 0, 0, 0);
                /** @type {string} */
                this.target = target;
            }
            return ResizeObservation.prototype.isActive = function () {
                var rect = locate(this.target);
                return this.contentRect_ = rect, rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
            }, ResizeObservation.prototype.broadcastRect = function () {
                var rect = this.contentRect_;
                return this.broadcastWidth = rect.width, this.broadcastHeight = rect.height, rect;
            }, ResizeObservation;
        }();
        /**
         * @param {string} t
         * @param {!Object} e
         * @return {undefined}
         */
        var cavMouseDown = function (t, e) {
            var contentRect = function (elem) {
                var left = elem.x;
                var y = elem.y;
                var width = elem.width;
                var height = elem.height;
                var Constr = "undefined" !== typeof DOMRectReadOnly ? DOMRectReadOnly : Object;
                /** @type {!Object} */
                var previous = Object.create(Constr.prototype);
                return defineConfigurable(previous, {
                    x: left,
                    y: y,
                    width: width,
                    height: height,
                    top: y,
                    right: left + width,
                    bottom: height + y,
                    left: left
                }), previous;
            }(e);
            defineConfigurable(this, {
                target: t,
                contentRect: contentRect
            });
        };
        var TypeError = function () {
            /**
             * @param {!Function} callback
             * @param {string} controller
             * @param {?} callbackCtx
             * @return {undefined}
             */
            function ResizeObserverSPI(callback, controller, callbackCtx) {
                if (this.activeObservations_ = [], this.observations_ = new MapShim, "function" !== typeof callback) {
                    throw new TypeError("The callback provided as parameter 1 is not a function.");
                }
                /** @type {!Function} */
                this.callback_ = callback;
                /** @type {string} */
                this.controller_ = controller;
                this.callbackCtx_ = callbackCtx;
            }
            return ResizeObserverSPI.prototype.observe = function (target) {
                if (!arguments.length) {
                    throw new TypeError("1 argument required, but only 0 present.");
                }
                if ("undefined" !== typeof Element && Element instanceof Object) {
                    if (!(target instanceof isElement(target).Element)) {
                        throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (!observations.has(target)) {
                        observations.set(target, new ResizeObservation(target));
                        this.controller_.addObserver(this);
                        this.controller_.refresh();
                    }
                }
            }, ResizeObserverSPI.prototype.unobserve = function (target) {
                if (!arguments.length) {
                    throw new TypeError("1 argument required, but only 0 present.");
                }
                if ("undefined" !== typeof Element && Element instanceof Object) {
                    if (!(target instanceof isElement(target).Element)) {
                        throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (observations.has(target)) {
                        observations.delete(target);
                        if (!observations.size) {
                            this.controller_.removeObserver(this);
                        }
                    }
                }
            }, ResizeObserverSPI.prototype.disconnect = function () {
                this.clearActive();
                this.observations_.clear();
                this.controller_.removeObserver(this);
            }, ResizeObserverSPI.prototype.gatherActive = function () {
                var this$1 = this;
                this.clearActive();
                this.observations_.forEach(function (t) {
                    if (t.isActive()) {
                        this$1.activeObservations_.push(t);
                    }
                });
            }, ResizeObserverSPI.prototype.broadcastActive = function () {
                if (this.hasActive()) {
                    var ctx = this.callbackCtx_;
                    var changes = this.activeObservations_.map(function (observation) {
                        return new cavMouseDown(observation.target, observation.broadcastRect());
                    });
                    this.callback_.call(ctx, changes, ctx);
                    this.clearActive();
                }
            }, ResizeObserverSPI.prototype.clearActive = function () {
                this.activeObservations_.splice(0);
            }, ResizeObserverSPI.prototype.hasActive = function () {
                return this.activeObservations_.length > 0;
            }, ResizeObserverSPI;
        }();
        var def = "undefined" !== typeof WeakMap ? new WeakMap : new MapShim;
        /**
         * @param {?} msg
         * @return {undefined}
         */
        var interval = function ResizeObserver$1(msg) {
            if (!(this instanceof ResizeObserver$1)) {
                throw new TypeError("Cannot call a class as a function.");
            }
            if (!arguments.length) {
                throw new TypeError("1 argument required, but only 0 present.");
            }
            var body = RepositoryApi.getInstance();
            var error = new TypeError(msg, body, this);
            def.set(this, error);
        };
        ["observe", "unobserve", "disconnect"].forEach(function (i) {
            /**
             * @return {?}
             */
            interval.prototype[i] = function () {
                var t;
                return (t = def.get(this))[i].apply(t, arguments);
            };
        });
        var Set = "undefined" !== typeof scope.ResizeObserver ? scope.ResizeObserver : interval;
        /** @type {!Map} */
        var layers = new Map;
        var observer = new Set(function (wrappersTemplates) {
            wrappersTemplates.forEach(function (e) {
                var nodelist;
                var n = e.target;
                if (!(null === (nodelist = layers.get(n)) || void 0 === nodelist)) {
                    nodelist.forEach(function (e) {
                        return e(n);
                    });
                }
            });
        });
        var ControlledText = function (name) {
            /**
             * @return {?}
             */
            function n() {
                return log(this, n), f.apply(this, arguments);
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "render",
                value: function () {
                    return this.props.children;
                }
            }]), n;
        }(React.Component);
        var page = React.createContext(null);
        /**
         * @param {!Object} options
         * @return {?}
         */
        sync.Collection = function (options) {
            var n = options.children;
            var expect = options.onBatchResize;
            var state = React.useRef(0);
            var oContext = React.useRef([]);
            var log = React.useContext(page);
            var command_module_id = React.useCallback(function (e, authenticationInfo, count) {
                state.current += 1;
                var page = state.current;
                oContext.current.push({
                    size: e,
                    element: authenticationInfo,
                    data: count
                });
                Promise.resolve().then(function () {
                    if (page === state.current) {
                        if (!(null === expect || void 0 === expect)) {
                            expect(oContext.current);
                        }
                        /** @type {!Array} */
                        oContext.current = [];
                    }
                });
                if (!(null === log || void 0 === log)) {
                    log(e, authenticationInfo, count);
                }
            }, [expect, log]);
            return React.createElement(page.Provider, {
                value: command_module_id
            }, n);
        };
        var elem;
        /** @type {function(!Object): ?} */
        var FilterForm = sync;
        /** @type {string} */
        var second = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
        /** @type {!Array} */
        var properties = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing", "word-break"];
        var computedStyleCache = {};
        var InteractionMode;
        var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(9613);
        var appendChild = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);
        !function (InteractionMode) {
            /** @type {string} */
            InteractionMode[InteractionMode.NONE = 0] = "NONE";
            /** @type {string} */
            InteractionMode[InteractionMode.RESIZING = 1] = "RESIZING";
            /** @type {string} */
            InteractionMode[InteractionMode.RESIZED = 2] = "RESIZED";
        }(InteractionMode || (InteractionMode = {}));
        var binary = function (name) {
            /**
             * @param {?} value
             * @return {?}
             */
            function e(value) {
                var me;
                return log(this, e), (me = message.call(this, value)).nextFrameActionId = void 0, me.resizeFrameId = void 0, me.textArea = void 0, me.saveTextArea = function (text) {
                    /** @type {string} */
                    me.textArea = text;
                }, me.handleResize = function (e) {
                    var completion = me.state.resizeStatus;
                    var props = me.props;
                    var autoSize = props.autoSize;
                    var is = props.onResize;
                    if (completion === InteractionMode.NONE) {
                        if ("function" === typeof is) {
                            is(e);
                        }
                        if (autoSize) {
                            me.resizeOnNextFrame();
                        }
                    }
                }, me.resizeOnNextFrame = function () {
                    cancelAnimationFrame(me.nextFrameActionId);
                    /** @type {number} */
                    me.nextFrameActionId = requestAnimationFrame(me.resizeTextarea);
                }, me.resizeTextarea = function () {
                    var widget = me.props.autoSize;
                    if (widget && me.textArea) {
                        var type = widget.minRows;
                        var options = widget.maxRows;
                        var device = function (node) {
                            var treegrid = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                            var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                            var c = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                            if (!elem) {
                                (elem = document.createElement("textarea")).setAttribute("tab-index", "-1");
                                elem.setAttribute("aria-hidden", "true");
                                document.body.appendChild(elem);
                            }
                            if (node.getAttribute("wrap")) {
                                elem.setAttribute("wrap", node.getAttribute("wrap"));
                            } else {
                                elem.removeAttribute("wrap");
                            }
                            var state = calculateStyling(node, treegrid);
                            var offset = state.paddingSize;
                            var i = state.borderSize;
                            var undefined = state.boxSizing;
                            var id = state.sizingStyle;
                            elem.setAttribute("style", "".concat(id, ";").concat(second));
                            elem.value = node.value || node.placeholder || "";
                            var overflowY;
                            /** @type {number} */
                            var x = Number.MIN_SAFE_INTEGER;
                            /** @type {number} */
                            var val = Number.MAX_SAFE_INTEGER;
                            /** @type {number} */
                            var index = elem.scrollHeight;
                            if ("border-box" === undefined ? index = index + i : "content-box" === undefined && (index = index - offset), null !== l || null !== c) {
                                /** @type {string} */
                                elem.value = " ";
                                /** @type {number} */
                                var y = elem.scrollHeight - offset;
                                if (null !== l) {
                                    /** @type {number} */
                                    x = y * l;
                                    if ("border-box" === undefined) {
                                        x = x + offset + i;
                                    }
                                    /** @type {number} */
                                    index = Math.max(x, index);
                                }
                                if (null !== c) {
                                    /** @type {number} */
                                    val = y * c;
                                    if ("border-box" === undefined) {
                                        val = val + offset + i;
                                    }
                                    /** @type {string} */
                                    overflowY = index > val ? "" : "hidden";
                                    /** @type {number} */
                                    index = Math.min(val, index);
                                }
                            }
                            return {
                                height: index,
                                minHeight: x,
                                maxHeight: val,
                                overflowY: overflowY,
                                resize: "none"
                            };
                        }(me.textArea, false, type, options);
                        me.setState({
                            textareaStyles: device,
                            resizeStatus: InteractionMode.RESIZING
                        }, function () {
                            cancelAnimationFrame(me.resizeFrameId);
                            /** @type {number} */
                            me.resizeFrameId = requestAnimationFrame(function () {
                                me.setState({
                                    resizeStatus: InteractionMode.RESIZED
                                }, function () {
                                    /** @type {number} */
                                    me.resizeFrameId = requestAnimationFrame(function () {
                                        me.setState({
                                            resizeStatus: InteractionMode.NONE
                                        });
                                        me.fixFirefoxAutoScroll();
                                    });
                                });
                            });
                        });
                    }
                }, me.renderTextArea = function () {
                    var props = me.props;
                    var value = props.prefixCls;
                    var id = void 0 === value ? "rc-textarea" : value;
                    var message = props.autoSize;
                    var name = props.onResize;
                    var pname = props.className;
                    var disabled = props.disabled;
                    var state = me.state;
                    var headers = state.textareaStyles;
                    var mode = state.resizeStatus;
                    var attrs = apply(me.props, ["prefixCls", "onPressEnter", "autoSize", "defaultValue", "onResize"]);
                    var n = require()(id, pname, debug({}, "".concat(id, "-disabled"), disabled));
                    if ("value" in attrs) {
                        attrs.value = attrs.value || "";
                    }
                    var theirResource = assign(assign(assign({}, me.props.style), headers), mode === InteractionMode.RESIZING ? {
                        overflowX: "hidden",
                        overflowY: "hidden"
                    } : null);
                    return React.createElement(FilterForm, {
                        onResize: me.handleResize,
                        disabled: !(message || name)
                    }, React.createElement("textarea", _extends({}, attrs, {
                        className: n,
                        style: theirResource,
                        ref: me.saveTextArea
                    })));
                }, me.state = {
                    textareaStyles: {},
                    resizeStatus: InteractionMode.NONE
                }, me;
            }
            compile(e, name);
            var message = fn(e);
            return g(e, [{
                key: "componentDidUpdate",
                value: function (item) {
                    if (!(item.value === this.props.value && appendChild()(item.autoSize, this.props.autoSize))) {
                        this.resizeTextarea();
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function () {
                    cancelAnimationFrame(this.nextFrameActionId);
                    cancelAnimationFrame(this.resizeFrameId);
                }
            }, {
                key: "fixFirefoxAutoScroll",
                value: function () {
                    try {
                        if (document.activeElement === this.textArea) {
                            var startPos = this.textArea.selectionStart;
                            var endPos = this.textArea.selectionEnd;
                            this.textArea.setSelectionRange(startPos, endPos);
                        }
                    } catch (Ic) {
                    }
                }
            }, {
                key: "render",
                value: function () {
                    return this.renderTextArea();
                }
            }]), e;
        }(React.Component);
        var PivotRow = binary;
        var hasLastChild = function (name) {
            /**
             * @param {!Object} item
             * @return {?}
             */
            function render(item) {
                var _this;
                log(this, render);
                (_this = result.call(this, item)).resizableTextArea = void 0;
                /**
                 * @return {undefined}
                 */
                _this.focus = function () {
                    _this.resizableTextArea.textArea.focus();
                };
                /**
                 * @param {!Object} obj
                 * @return {undefined}
                 */
                _this.saveTextArea = function (obj) {
                    /** @type {!Object} */
                    _this.resizableTextArea = obj;
                };
                /**
                 * @param {?} e
                 * @return {undefined}
                 */
                _this.handleChange = function (e) {
                    var onChange = _this.props.onChange;
                    _this.setValue(e.target.value, function () {
                        _this.resizableTextArea.resizeTextarea();
                    });
                    if (onChange) {
                        onChange(e);
                    }
                };
                /**
                 * @param {!Event} e
                 * @return {undefined}
                 */
                _this.handleKeyDown = function (e) {
                    var _props = _this.props;
                    var open = _props.onPressEnter;
                    var onKeyDown = _props.onKeyDown;
                    if (13 === e.keyCode && open) {
                        open(e);
                    }
                    if (onKeyDown) {
                        onKeyDown(e);
                    }
                };
                var command_module_id = "undefined" === typeof item.value || null === item.value ? item.defaultValue : item.value;
                return _this.state = {
                    value: command_module_id
                }, _this;
            }
            compile(render, name);
            var result = fn(render);
            return g(render, [{
                key: "setValue",
                value: function (obj, data) {
                    if (!("value" in this.props)) {
                        this.setState({
                            value: obj
                        }, data);
                    }
                }
            }, {
                key: "blur",
                value: function () {
                    this.resizableTextArea.textArea.blur();
                }
            }, {
                key: "render",
                value: function () {
                    return React.createElement(PivotRow, _extends({}, this.props, {
                        value: this.state.value,
                        onKeyDown: this.handleKeyDown,
                        onChange: this.handleChange,
                        ref: this.saveTextArea
                    }));
                }
            }], [{
                key: "getDerivedStateFromProps",
                value: function (obj) {
                    return "value" in obj ? {
                        value: obj.value
                    } : null;
                }
            }]), render;
        }(React.Component);
        var e = hasLastChild;
        var Array;
        var xLegend = translate() ? React.useLayoutEffect : React.useEffect;
        var _shallowCopyKeys = xLegend;
        !function (VideoFrameType) {
            /** @type {string} */
            VideoFrameType[VideoFrameType.INNER = 0] = "INNER";
            /** @type {string} */
            VideoFrameType[VideoFrameType.PROP = 1] = "PROP";
        }(Array || (Array = {}));
        var component = React.createContext(false);
        /**
         * @param {!Element} parent
         * @return {?}
         */
        var keyword = function (parent) {
            var n = parent.children;
            var options = parent.disabled;
            var url = React.useContext(component);
            return React.createElement(component.Provider, {
                value: options || url
            }, n);
        };
        var readonly = component;
        var ShapeViewer_1 = React.createContext(void 0);
        /**
         * @param {!Object} line
         * @return {?}
         */
        var row = function (line) {
            var list = line.children;
            var value = line.size;
            return React.createElement(ShapeViewer_1.Consumer, null, function (defaultValue) {
                return React.createElement(ShapeViewer_1.Provider, {
                    value: value || defaultValue
                }, list);
            });
        };
        var foobar = ShapeViewer_1;
        /** @type {string} */
        var array = "RC_FORM_INTERNAL_HOOKS";
        /**
         * @return {undefined}
         */
        var getFieldValue = function () {
            assert(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
        };
        var path = React.createContext({
            getFieldValue: getFieldValue,
            getFieldsValue: getFieldValue,
            getFieldError: getFieldValue,
            getFieldWarning: getFieldValue,
            getFieldsError: getFieldValue,
            isFieldsTouched: getFieldValue,
            isFieldTouched: getFieldValue,
            isFieldValidating: getFieldValue,
            isFieldsValidating: getFieldValue,
            resetFields: getFieldValue,
            setFields: getFieldValue,
            setFieldValue: getFieldValue,
            setFieldsValue: getFieldValue,
            validateFields: getFieldValue,
            submit: getFieldValue,
            getInternalHooks: function () {
                return getFieldValue(), {
                    dispatch: getFieldValue,
                    initEntityValue: getFieldValue,
                    registerField: getFieldValue,
                    useSubscribe: getFieldValue,
                    setInitialValues: getFieldValue,
                    destroyForm: getFieldValue,
                    setCallbacks: getFieldValue,
                    registerWatch: getFieldValue,
                    getFields: getFieldValue,
                    setValidateMessages: getFieldValue,
                    setPreserve: getFieldValue,
                    getInitialValue: getFieldValue
                };
            }
        });
        /** @type {!RegExp} */
        var level = /%[sdj%]/g;
        var PluginError = function (log) {
            /**
             * @param {!Object} errors
             * @param {!Object} value
             * @return {?}
             */
            function test(errors, value) {
                var platformObj;
                return (platformObj = log.call(this, "Async Validation Error") || this).errors = errors, platformObj.fields = value, platformObj;
            }
            var child;
            var fn;
            return fn = log, (child = test).prototype = Object.create(fn.prototype), child.prototype.constructor = child, iter(child, fn), test;
        }(send(Error));
        var eregex;
        /**
         * @param {!Object} data
         * @param {!Function} obj
         * @param {!Array} source
         * @param {!Array} result
         * @param {!Object} type
         * @param {string} name
         * @return {undefined}
         */
        var validate = function (data, obj, source, result, type, name) {
            if (!(!data.required || source.hasOwnProperty(data.field) && !getType(obj, name || data.type))) {
                result.push(format(type.messages.required, data.fullField));
            }
        };
        /** @type {!RegExp} */
        var valueRegEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/;
        /** @type {!RegExp} */
        var tldRegex = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;
        var types = {
            integer: function (value) {
                return types.number(value) && parseInt(value, 10) === value;
            },
            float: function (value) {
                return types.number(value) && !types.integer(value);
            },
            array: function (value) {
                return Array.isArray(value);
            },
            regexp: function (value) {
                if (value instanceof RegExp) {
                    return true;
                }
                try {
                    return !!new RegExp(value);
                } catch (Ic) {
                    return false;
                }
            },
            date: function (obj) {
                return "function" === typeof obj.getTime && "function" === typeof obj.getMonth && "function" === typeof obj.getYear && !isNaN(obj.getTime());
            },
            number: function (obj) {
                return !isNaN(obj) && "number" === typeof obj;
            },
            object: function (value) {
                return "object" === typeof value && !types.array(value);
            },
            method: function (obj) {
                return "function" === typeof obj;
            },
            email: function (value) {
                return "string" === typeof value && value.length <= 320 && !!value.match(valueRegEx);
            },
            url: function (obj) {
                return "string" === typeof obj && obj.length <= 2048 && !!obj.match(function () {
                    if (eregex) {
                        return eregex;
                    }
                    /** @type {string} */
                    var e = "[a-fA-F\\d:]";
                    /**
                     * @param {!Object} req
                     * @return {?}
                     */
                    var get = function (req) {
                        return req && req.includeBoundaries ? "(?:(?<=\\s|^)(?=" + e + ")|(?<=" + e + ")(?=\\s|$))" : "";
                    };
                    /** @type {string} */
                    var _changes = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
                    /** @type {string} */
                    var r = "[a-fA-F\\d]{1,4}";
                    /** @type {string} */
                    var generated = ("\n(?:\n(?:" + r + ":){7}(?:" + r + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + r + ":){6}(?:" + _changes + "|:" + r + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + r + ":){5}(?::" + _changes + "|(?::" + r + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + r + ":){4}(?:(?::" + r + "){0,1}:" + _changes +
                        "|(?::" + r + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + r + ":){3}(?:(?::" + r + "){0,2}:" + _changes + "|(?::" + r + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + r + ":){2}(?:(?::" + r + "){0,3}:" + _changes + "|(?::" + r + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + r + ":){1}(?:(?::" + r + "){0,4}:" + _changes + "|(?::" + r + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" +
                        r + "){0,5}:" + _changes + "|(?::" + r + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
                    /** @type {!RegExp} */
                    var edited = new RegExp("(?:^" + _changes + "$)|(?:^" + generated + "$)");
                    /** @type {!RegExp} */
                    var _bulk_docs = new RegExp("^" + _changes + "$");
                    /** @type {!RegExp} */
                    var ___test_screenshots___ = new RegExp("^" + generated + "$");
                    /**
                     * @param {!Object} opts
                     * @return {?}
                     */
                    var matchPath = function (opts) {
                        return opts && opts.exact ? edited : new RegExp("(?:" + get(opts) + _changes + get(opts) + ")|(?:" + get(opts) + generated + get(opts) + ")", "g");
                    };
                    /**
                     * @param {!Object} opts
                     * @return {?}
                     */
                    matchPath.v4 = function (opts) {
                        return opts && opts.exact ? _bulk_docs : new RegExp("" + get(opts) + _changes + get(opts), "g");
                    };
                    /**
                     * @param {!Object} opts
                     * @return {?}
                     */
                    matchPath.v6 = function (opts) {
                        return opts && opts.exact ? ___test_screenshots___ : new RegExp("" + get(opts) + generated + get(opts), "g");
                    };
                    var FSSource = matchPath.v4().source;
                    var currentRegex = matchPath.v6().source;
                    return eregex = new RegExp("(?:^(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|" + FSSource + "|" + currentRegex + '|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?$)', "i");
                }());
            },
            hex: function (a) {
                return "string" === typeof a && !!a.match(tldRegex);
            }
        };
        var console = {
            required: validate,
            whitespace: function (options, data, s, c, node) {
                if (/^\s+$/.test(data) || "" === data) {
                    c.push(format(node.messages.whitespace, options.fullField));
                }
            },
            type: function (data, value, fn, key, v) {
                if (data.required && void 0 === value) {
                    validate(data, value, fn, key, v);
                } else {
                    var type = data.type;
                    if (["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"].indexOf(type) > -1) {
                        if (!types[type](value)) {
                            key.push(format(v.messages.types[type], data.fullField, data.type));
                        }
                    } else {
                        if (type && typeof value !== data.type) {
                            key.push(format(v.messages.types[type], data.fullField, data.type));
                        }
                    }
                }
            },
            range: function (options, el, to, out, element) {
                /** @type {boolean} */
                var isInfinity = "number" === typeof options.len;
                /** @type {boolean} */
                var _partlyAbove = "number" === typeof options.min;
                /** @type {boolean} */
                var _partlyBelow = "number" === typeof options.max;
                /** @type {!Object} */
                var value = el;
                /** @type {null} */
                var i = null;
                /** @type {boolean} */
                var n = "number" === typeof el;
                /** @type {boolean} */
                var isCucumber2 = "string" === typeof el;
                /** @type {boolean} */
                var duration = Array.isArray(el);
                if (n ? i = "number" : isCucumber2 ? i = "string" : duration && (i = "array"), !i) {
                    return false;
                }
                if (duration) {
                    value = el.length;
                }
                if (isCucumber2) {
                    value = el.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "_").length;
                }
                if (isInfinity) {
                    if (value !== options.len) {
                        out.push(format(element.messages[i].len, options.fullField, options.len));
                    }
                } else {
                    if (_partlyAbove && !_partlyBelow && value < options.min) {
                        out.push(format(element.messages[i].min, options.fullField, options.min));
                    } else {
                        if (_partlyBelow && !_partlyAbove && value > options.max) {
                            out.push(format(element.messages[i].max, options.fullField, options.max));
                        } else {
                            if (_partlyAbove && _partlyBelow && (value < options.min || value > options.max)) {
                                out.push(format(element.messages[i].range, options.fullField, options.min, options.max));
                            }
                        }
                    }
                }
            },
            enum: function (context, buffer, fn, ctx, schema) {
                context.enum = Array.isArray(context.enum) ? context.enum : [];
                if (-1 === context.enum.indexOf(buffer)) {
                    ctx.push(format(schema.messages.enum, context.fullField, context.enum.join(", ")));
                }
            },
            pattern: function (value, id, callback, options, config) {
                if (value.pattern) {
                    if (value.pattern instanceof RegExp) {
                        /** @type {number} */
                        value.pattern.lastIndex = 0;
                        if (!value.pattern.test(id)) {
                            options.push(format(config.messages.pattern.mismatch, value.fullField, id, value.pattern));
                        }
                    } else {
                        if ("string" === typeof value.pattern) {
                            if (!(new RegExp(value.pattern)).test(id)) {
                                options.push(format(config.messages.pattern.mismatch, value.fullField, id, value.pattern));
                            }
                        }
                    }
                }
            }
        };
        /**
         * @param {!Object} options
         * @param {?} value
         * @param {!Array} cb
         * @param {!Array} next
         * @param {!Object} name
         * @return {?}
         */
        var mock = function (options, value, cb, next, name) {
            var key = options.type;
            /** @type {!Array} */
            var args = [];
            if (options.required || !options.required && next.hasOwnProperty(options.field)) {
                if (getType(value, key) && !options.required) {
                    return cb();
                }
                console.required(options, value, next, args, name, key);
                if (!getType(value, key)) {
                    console.type(options, value, next, args, name);
                }
            }
            cb(args);
        };
        var data = {
            string: function (options, x, callback, val, name) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(x, "string") && !options.required) {
                        return callback();
                    }
                    console.required(options, x, val, b, name, "string");
                    if (!getType(x, "string")) {
                        console.type(options, x, val, b, name);
                        console.range(options, x, val, b, name);
                        console.pattern(options, x, val, b, name);
                        if (true === options.whitespace) {
                            console.whitespace(options, x, val, b, name);
                        }
                    }
                }
                callback(b);
            },
            method: function (options, value, callback, next, name) {
                /** @type {!Array} */
                var args = [];
                if (options.required || !options.required && next.hasOwnProperty(options.field)) {
                    if (getType(value) && !options.required) {
                        return callback();
                    }
                    console.required(options, value, next, args, name);
                    if (void 0 !== value) {
                        console.type(options, value, next, args, name);
                    }
                }
                callback(args);
            },
            number: function (options, name, callback, a, v) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && a.hasOwnProperty(options.field)) {
                    if ("" === name && (name = void 0), getType(name) && !options.required) {
                        return callback();
                    }
                    console.required(options, name, a, b, v);
                    if (void 0 !== name) {
                        console.type(options, name, a, b, v);
                        console.range(options, name, a, b, v);
                    }
                }
                callback(b);
            },
            boolean: function (options, type, x, val, name) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(type) && !options.required) {
                        return x();
                    }
                    console.required(options, type, val, b, name);
                    if (void 0 !== type) {
                        console.type(options, type, val, b, name);
                    }
                }
                x(b);
            },
            regexp: function (options, value, callback, val, name) {
                /** @type {!Array} */
                var args = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(value) && !options.required) {
                        return callback();
                    }
                    console.required(options, value, val, args, name);
                    if (!getType(value)) {
                        console.type(options, value, val, args, name);
                    }
                }
                callback(args);
            },
            integer: function (options, str, type, val, object) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(str) && !options.required) {
                        return type();
                    }
                    console.required(options, str, val, b, object);
                    if (void 0 !== str) {
                        console.type(options, str, val, b, object);
                        console.range(options, str, val, b, object);
                    }
                }
                type(b);
            },
            float: function (options, str, type, val, name) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(str) && !options.required) {
                        return type();
                    }
                    console.required(options, str, val, b, name);
                    if (void 0 !== str) {
                        console.type(options, str, val, b, name);
                        console.range(options, str, val, b, name);
                    }
                }
                type(b);
            },
            array: function (options, value, fn, val, name) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if ((void 0 === value || null === value) && !options.required) {
                        return fn();
                    }
                    console.required(options, value, val, b, name, "array");
                    if (void 0 !== value && null !== value) {
                        console.type(options, value, val, b, name);
                        console.range(options, value, val, b, name);
                    }
                }
                fn(b);
            },
            object: function (options, value, type, next, name) {
                /** @type {!Array} */
                var args = [];
                if (options.required || !options.required && next.hasOwnProperty(options.field)) {
                    if (getType(value) && !options.required) {
                        return type();
                    }
                    console.required(options, value, next, args, name);
                    if (void 0 !== value) {
                        console.type(options, value, next, args, name);
                    }
                }
                type(args);
            },
            enum: function (value, input, callback, data, v) {
                /** @type {!Array} */
                var a = [];
                if (value.required || !value.required && data.hasOwnProperty(value.field)) {
                    if (getType(input) && !value.required) {
                        return callback();
                    }
                    console.required(value, input, data, a, v);
                    if (void 0 !== input) {
                        console.enum(value, input, data, a, v);
                    }
                }
                callback(a);
            },
            pattern: function (options, x, callback, name, value) {
                /** @type {!Array} */
                var a = [];
                if (options.required || !options.required && name.hasOwnProperty(options.field)) {
                    if (getType(x, "string") && !options.required) {
                        return callback();
                    }
                    console.required(options, x, name, a, value);
                    if (!getType(x, "string")) {
                        console.pattern(options, x, name, a, value);
                    }
                }
                callback(a);
            },
            date: function (options, value, callback, val, name) {
                /** @type {!Array} */
                var b = [];
                if (options.required || !options.required && val.hasOwnProperty(options.field)) {
                    if (getType(value, "date") && !options.required) {
                        return callback();
                    }
                    var v;
                    if (console.required(options, value, val, b, name), !getType(value, "date")) {
                        /** @type {!Date} */
                        v = value instanceof Date ? value : new Date(value);
                        console.type(options, v, val, b, name);
                        if (v) {
                            console.range(options, v.getTime(), val, b, name);
                        }
                    }
                }
                callback(b);
            },
            url: mock,
            hex: mock,
            email: mock,
            required: function (value, node, callback, next, name) {
                /** @type {!Array} */
                var a = [];
                /** @type {string} */
                var type = Array.isArray(node) ? "array" : typeof node;
                console.required(value, node, next, a, name, type);
                callback(a);
            },
            any: function (value, node, next, val, obj) {
                /** @type {!Array} */
                var v = [];
                if (value.required || !value.required && val.hasOwnProperty(value.field)) {
                    if (getType(node) && !value.required) {
                        return next();
                    }
                    console.required(value, node, val, v, obj);
                }
                next(v);
            }
        };
        var currT = now();
        var json = function () {
            /**
             * @param {undefined} name
             * @return {undefined}
             */
            function Logger(name) {
                /** @type {null} */
                this.rules = null;
                this._messages = currT;
                this.define(name);
            }
            var token = Logger.prototype;
            return token.define = function (val) {
                var testNode = this;
                if (!val) {
                    throw new Error("Cannot configure a schema with no rules");
                }
                if ("object" !== typeof val || Array.isArray(val)) {
                    throw new Error("Rules must be an object");
                }
                this.rules = {};
                Object.keys(val).forEach(function (k) {
                    var v = val[k];
                    testNode.rules[k] = Array.isArray(v) ? v : [v];
                });
            }, token.messages = function (type) {
                return type && (this._messages = expect(now(), type)), this._messages;
            }, token.validate = function (name, msg, done) {
                var result = this;
                if (void 0 === msg) {
                    msg = {};
                }
                if (void 0 === done) {
                    /**
                     * @return {undefined}
                     */
                    done = function () {
                    };
                }
                var options = name;
                /** @type {!Object} */
                var data = msg;
                /** @type {!Object} */
                var resolve = done;
                if ("function" === typeof data && (resolve = data, data = {}), !this.rules || 0 === Object.keys(this.rules).length) {
                    return resolve && resolve(null, options), Promise.resolve(options);
                }
                if (data.messages) {
                    var messages = this.messages();
                    if (messages === currT) {
                        messages = now();
                    }
                    expect(messages, data.messages);
                    data.messages = messages;
                } else {
                    data.messages = this.messages();
                }
                var next = {};
                (data.keys || Object.keys(this.rules)).forEach(function (key) {
                    var cbtable = result.rules[key];
                    var val = options[key];
                    cbtable.forEach(function (context) {
                        /** @type {!Object} */
                        var obj = context;
                        if ("function" === typeof obj.transform) {
                            if (options === name) {
                                options = extend({}, options);
                            }
                            val = options[key] = obj.transform(val);
                        }
                        (obj = "function" === typeof obj ? {
                            validator: obj
                        } : extend({}, obj)).validator = result.getValidationMethod(obj);
                        if (obj.validator) {
                            /** @type {string} */
                            obj.field = key;
                            obj.fullField = obj.fullField || key;
                            obj.type = result.getType(obj);
                            next[key] = next[key] || [];
                            next[key].push({
                                rule: obj,
                                value: val,
                                source: options,
                                field: key
                            });
                        }
                    });
                });
                var $scope = {};
                return off(next, data, function (options, move) {
                    /**
                     * @param {string} url
                     * @param {?} handlers
                     * @return {?}
                     */
                    function handle(url, handlers) {
                        return extend({}, handlers, {
                            fullField: self.fullField + "." + url,
                            fullFields: self.fullFields ? [].concat(self.fullFields, [url]) : [url]
                        });
                    }
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    function init(value) {
                        if (void 0 === value) {
                            /** @type {!Array} */
                            value = [];
                        }
                        var file = Array.isArray(value) ? value : [value];
                        if (!data.suppressWarning && file.length) {
                            Logger.warning("async-validator:", file);
                        }
                        if (file.length && void 0 !== self.message) {
                            /** @type {!Array<?>} */
                            file = [].concat(self.message);
                        }
                        var context = file.map(inject(self, options));
                        if (data.first && context.length) {
                            return $scope[self.field] = 1, move(context);
                        }
                        if (result) {
                            if (self.required && !options.value) {
                                return void 0 !== self.message ? context = [].concat(self.message).map(inject(self, options)) : data.error && (context = [data.error(self, format(data.messages.required, self.field))]), move(context);
                            }
                            var result = {};
                            if (self.defaultField) {
                                Object.keys(options.value).map(function (string) {
                                    result[string] = self.defaultField;
                                });
                            }
                            result = extend({}, result, options.rule.fields);
                            var pretty = {};
                            Object.keys(result).forEach(function (i) {
                                var value = result[i];
                                var val = Array.isArray(value) ? value : [value];
                                pretty[i] = val.map(handle.bind(null, i));
                            });
                            var me = new Logger(pretty);
                            me.messages(data.messages);
                            if (options.rule.options) {
                                options.rule.options.messages = data.messages;
                                options.rule.options.error = data.error;
                            }
                            me.validate(options.value, options.rule.options || data, function (data) {
                                /** @type {!Array} */
                                var a = [];
                                if (context && context.length) {
                                    a.push.apply(a, context);
                                }
                                if (data && data.length) {
                                    a.push.apply(a, data);
                                }
                                move(a.length ? a : null);
                            });
                        } else {
                            move(context);
                        }
                    }
                    var res;
                    var self = options.rule;
                    /** @type {boolean} */
                    var result = ("object" === self.type || "array" === self.type) && ("object" === typeof self.fields || "object" === typeof self.defaultField);
                    if (result = result && (self.required || !self.required && options.value), self.field = options.field, self.asyncValidator) {
                        res = self.asyncValidator(self, options.value, init, options.source, data);
                    } else {
                        if (self.validator) {
                            try {
                                res = self.validator(self, options.value, init, options.source, data);
                            } catch (e) {
                                if (!(null == console.error)) {
                                    console.error(e);
                                }
                                if (!data.suppressValidatorError) {
                                    setTimeout(function () {
                                        throw e;
                                    }, 0);
                                }
                                init(e.message);
                            }
                            if (true === res) {
                                init();
                            } else {
                                if (false === res) {
                                    init("function" === typeof self.message ? self.message(self.fullField || self.field) : self.message || (self.fullField || self.field) + " fails");
                                } else {
                                    if (res instanceof Array) {
                                        init(res);
                                    } else {
                                        if (res instanceof Error) {
                                            init(res.message);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (res && res.then) {
                        res.then(function () {
                            return init();
                        }, function (initValues) {
                            return init(initValues);
                        });
                    }
                }, function (p_dom_object_id) {
                    !function (s) {
                        /**
                         * @param {undefined} o
                         * @return {undefined}
                         */
                        function traverse(o) {
                            var a;
                            if (Array.isArray(o)) {
                                t = (a = t).concat.apply(a, o);
                            } else {
                                t.push(o);
                            }
                        }
                        /** @type {!Array} */
                        var t = [];
                        var root = {};
                        /** @type {number} */
                        var i = 0;
                        for (; i < s.length; i++) {
                            traverse(s[i]);
                        }
                        if (t.length) {
                            root = ok(t);
                            resolve(t, root);
                        } else {
                            resolve(null, options);
                        }
                    }(p_dom_object_id);
                }, options);
            }, token.getType = function (options) {
                if (void 0 === options.type && options.pattern instanceof RegExp && (options.type = "pattern"), "function" !== typeof options.validator && options.type && !data.hasOwnProperty(options.type)) {
                    throw new Error(format("Unknown rule type %s", options.type));
                }
                return options.type || "string";
            }, token.getValidationMethod = function (type) {
                if ("function" === typeof type.validator) {
                    return type.validator;
                }
                /** @type {!Array<string>} */
                var t = Object.keys(type);
                /** @type {number} */
                var n = t.indexOf("message");
                return -1 !== n && t.splice(n, 1), 1 === t.length && "required" === t[0] ? data.required : data[this.getType(type)] || void 0;
            }, Logger;
        }();
        /**
         * @param {?} login
         * @param {?} callback
         * @return {undefined}
         */
        json.register = function (login, callback) {
            if ("function" !== typeof callback) {
                throw new Error("Cannot register a validator by type, validator is not a function");
            }
            /** @type {!Function} */
            data[login] = callback;
        };
        /**
         * @return {undefined}
         */
        json.warning = function () {
        };
        json.messages = currT;
        json.validators = data;
        /** @type {string} */
        var shim = "'${name}' is not a valid ${type}";
        var schema = {
            default: "Validation error on field '${name}'",
            required: "'${name}' is required",
            enum: "'${name}' must be one of [${enum}]",
            whitespace: "'${name}' cannot be empty",
            date: {
                format: "'${name}' is invalid for format date",
                parse: "'${name}' could not be parsed as date",
                invalid: "'${name}' is invalid date"
            },
            types: {
                string: shim,
                method: shim,
                array: shim,
                object: shim,
                number: shim,
                date: shim,
                boolean: shim,
                integer: shim,
                float: shim,
                regexp: shim,
                email: shim,
                url: shim,
                hex: shim
            },
            string: {
                len: "'${name}' must be exactly ${len} characters",
                min: "'${name}' must be at least ${min} characters",
                max: "'${name}' cannot be longer than ${max} characters",
                range: "'${name}' must be between ${min} and ${max} characters"
            },
            number: {
                len: "'${name}' must equal ${len}",
                min: "'${name}' cannot be less than ${min}",
                max: "'${name}' cannot be greater than ${max}",
                range: "'${name}' must be between ${min} and ${max}"
            },
            array: {
                len: "'${name}' must be exactly ${len} in length",
                min: "'${name}' cannot be less than ${min} in length",
                max: "'${name}' cannot be greater than ${max} in length",
                range: "'${name}' must be between ${min} and ${max} in length"
            },
            pattern: {
                mismatch: "'${name}' does not match pattern ${pattern}"
            }
        };
        /** @type {function(!Object): ?} */
        var toArray = find;
        var Buffer = json;
        /** @type {string} */
        var image = "CODE_LOGIC_ERROR";
        /** @type {!Array} */
        var param = ["name"];
        /** @type {!Array} */
        var body = [];
        var Route = function (name) {
            /**
             * @param {?} context
             * @return {?}
             */
            function render(context) {
                var self;
                if (log(this, render), (self = result.call(this, context)).state = {
                    resetCount: 0
                }, self.cancelRegisterFunc = null, self.mounted = false, self.touched = false, self.dirty = false, self.validatePromise = null, self.prevValidating = void 0, self.errors = body, self.warnings = body, self.cancelRegister = function () {
                    var options = self.props;
                    var preserve = options.preserve;
                    var n = options.isListField;
                    var from = options.name;
                    if (self.cancelRegisterFunc) {
                        self.cancelRegisterFunc(n, preserve, val(from));
                    }
                    /** @type {null} */
                    self.cancelRegisterFunc = null;
                }, self.getNamePath = function () {
                    var ctx = self.props;
                    var node = ctx.name;
                    var value = ctx.fieldContext.prefixName;
                    return void 0 !== node ? [].concat(resolve(void 0 === value ? [] : value), resolve(node)) : [];
                }, self.getRules = function () {
                    var context = self.props;
                    var origin = context.rules;
                    var record = void 0 === origin ? [] : origin;
                    var scope = context.fieldContext;
                    return record.map(function (fn) {
                        return "function" === typeof fn ? fn(scope) : fn;
                    });
                }, self.refresh = function () {
                    if (self.mounted) {
                        self.setState(function (settings) {
                            return {
                                resetCount: settings.resetCount + 1
                            };
                        });
                    }
                }, self.triggerMetaEvent = function (empty) {
                    var next = self.props.onMetaChange;
                    if (!(null === next || void 0 === next)) {
                        next(assign(assign({}, self.getMeta()), {}, {
                            destroy: empty
                        }));
                    }
                }, self.onStoreChange = function (name, store, config) {
                    var options = self.props;
                    var a = options.shouldUpdate;
                    var prefix = options.dependencies;
                    var s = void 0 === prefix ? [] : prefix;
                    var readOnlyFn = options.onReset;
                    var i = config.store;
                    var end = self.getNamePath();
                    var optionName = self.getValue(name);
                    var context = self.getValue(i);
                    var update = store && exec(store, end);
                    switch ("valueUpdate" === config.type && "external" === config.source && optionName !== context && (self.touched = true, self.dirty = true, self.validatePromise = null, self.errors = body, self.warnings = body, self.triggerMetaEvent()), config.type) {
                        case "reset":
                            if (!store || update) {
                                return self.touched = false, self.dirty = false, self.validatePromise = null, self.errors = body, self.warnings = body, self.triggerMetaEvent(), null === readOnlyFn || void 0 === readOnlyFn || readOnlyFn(), void self.refresh();
                            }
                            break;
                        case "remove":
                            if (a) {
                                return void self.reRender();
                            }
                            break;
                        case "setField":
                            if (update) {
                                var opts = config.data;
                                return "touched" in opts && (self.touched = opts.touched), "validating" in opts && !("originRCField" in opts) && (self.validatePromise = opts.validating ? Promise.resolve([]) : null), "errors" in opts && (self.errors = opts.errors || body), "warnings" in opts && (self.warnings = opts.warnings || body), self.dirty = true, self.triggerMetaEvent(), void self.reRender();
                            }
                            if (a && !end.length && text(a, name, i, optionName, context, config)) {
                                return void self.reRender();
                            }
                            break;
                        case "dependenciesUpdate":
                            if (s.map(val).some(function (fn) {
                                return exec(config.relatedFields, fn);
                            })) {
                                return void self.reRender();
                            }
                            break;
                        default:
                            if (update || (!s.length || end.length || a) && text(a, name, i, optionName, context, config)) {
                                return void self.reRender();
                            }
                    }
                    if (true === a) {
                        self.reRender();
                    }
                }, self.validateRules = function (callback) {
                    var module = self.getNamePath();
                    var flags = self.getValue();
                    /** @type {!Promise<?>} */
                    var AtLeastOnce = Promise.resolve().then(function () {
                        if (!self.mounted) {
                            return [];
                        }
                        var cp = self.props;
                        var map = cp.validateFirst;
                        var bottom = void 0 !== map && map;
                        var x = cp.messageVariables;
                        var date = (callback || {}).triggerName;
                        var options = self.getRules();
                        if (date) {
                            options = options.filter(function (controller) {
                                var value = controller.validateTrigger;
                                return !value || encode(value).includes(date);
                            });
                        }
                        var result = install(module, flags, options, callback, bottom, x);
                        return result.catch(function (canCreateDiscussions) {
                            return canCreateDiscussions;
                        }).then(function () {
                            var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : body;
                            if (self.validatePromise === AtLeastOnce) {
                                var then;
                                /** @type {null} */
                                self.validatePromise = null;
                                /** @type {!Array} */
                                var errors = [];
                                /** @type {!Array} */
                                var warnings = [];
                                if (!(null === (then = value.forEach) || void 0 === then)) {
                                    then.call(value, function (_ref) {
                                        var t = _ref.rule.warningOnly;
                                        var failed = _ref.errors;
                                        var result = void 0 === failed ? body : failed;
                                        if (t) {
                                            warnings.push.apply(warnings, resolve(result));
                                        } else {
                                            errors.push.apply(errors, resolve(result));
                                        }
                                    });
                                }
                                /** @type {!Array} */
                                self.errors = errors;
                                /** @type {!Array} */
                                self.warnings = warnings;
                                self.triggerMetaEvent();
                                self.reRender();
                            }
                        }), result;
                    });
                    return self.validatePromise = AtLeastOnce, self.dirty = true, self.errors = body, self.warnings = body, self.triggerMetaEvent(), self.reRender(), AtLeastOnce;
                }, self.isFieldValidating = function () {
                    return !!self.validatePromise;
                }, self.isFieldTouched = function () {
                    return self.touched;
                }, self.isFieldDirty = function () {
                    return !(!self.dirty && void 0 === self.props.initialValue) || void 0 !== (0, self.props.fieldContext.getInternalHooks(array).getInitialValue)(self.getNamePath());
                }, self.getErrors = function () {
                    return self.errors;
                }, self.getWarnings = function () {
                    return self.warnings;
                }, self.isListField = function () {
                    return self.props.isListField;
                }, self.isList = function () {
                    return self.props.isList;
                }, self.isPreserve = function () {
                    return self.props.preserve;
                }, self.getMeta = function () {
                    return self.prevValidating = self.isFieldValidating(), {
                        touched: self.isFieldTouched(),
                        validating: self.prevValidating,
                        errors: self.errors,
                        warnings: self.warnings,
                        name: self.getNamePath()
                    };
                }, self.getOnlyChild = function (x) {
                    if ("function" === typeof x) {
                        var e = self.getMeta();
                        return assign(assign({}, self.getOnlyChild(x(self.getControlled(), e, self.props.fieldContext))), {}, {
                            isFunction: true
                        });
                    }
                    var res = filter(x);
                    return 1 === res.length && React.isValidElement(res[0]) ? {
                        child: res[0],
                        isFunction: false
                    } : {
                        child: res,
                        isFunction: false
                    };
                }, self.getValue = function (items) {
                    var $ = self.props.fieldContext.getFieldsValue;
                    var scope = self.getNamePath();
                    return html(items || $(true), scope);
                }, self.getControlled = function () {
                    var context = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    var e = self.props;
                    var name = e.trigger;
                    var data = e.validateTrigger;
                    var field = e.getValueFromEvent;
                    var f = e.normalize;
                    var u = e.valuePropName;
                    var loadedApp = e.getValueProps;
                    var form = e.fieldContext;
                    var outcomeResults = void 0 !== data ? data : form.validateTrigger;
                    var d = self.getNamePath();
                    var method = form.getInternalHooks;
                    var getNumberOfSlides = form.getFieldsValue;
                    var promise = method(array);
                    var dispatch = promise.dispatch;
                    var def = self.getValue();
                    var omit = loadedApp || function (stat) {
                        return debug({}, u, stat);
                    };
                    var fn = context[name];
                    var minimizeOptions = assign(assign({}, context), omit(def));
                    /**
                     * @return {undefined}
                     */
                    minimizeOptions[name] = function () {
                        var result;
                        /** @type {boolean} */
                        self.touched = true;
                        /** @type {boolean} */
                        self.dirty = true;
                        self.triggerMetaEvent();
                        /** @type {number} */
                        var i = arguments.length;
                        /** @type {!Array} */
                        var n = new Array(i);
                        /** @type {number} */
                        var k = 0;
                        for (; k < i; k++) {
                            n[k] = arguments[k];
                        }
                        result = field ? field.apply(void 0, n) : predicate.apply(void 0, [u].concat(n));
                        if (f) {
                            result = f(result, def, getNumberOfSlides(true));
                        }
                        dispatch({
                            type: "updateValue",
                            namePath: d,
                            value: result
                        });
                        if (fn) {
                            fn.apply(void 0, n);
                        }
                    };
                    var value = encode(outcomeResults || []);
                    return value.forEach(function (name) {
                        var cssFn = minimizeOptions[name];
                        /**
                         * @return {undefined}
                         */
                        minimizeOptions[name] = function () {
                            if (cssFn) {
                                cssFn.apply(void 0, arguments);
                            }
                            var rules = self.props.rules;
                            if (rules && rules.length) {
                                dispatch({
                                    type: "validateField",
                                    namePath: d,
                                    triggerName: name
                                });
                            }
                        };
                    }), minimizeOptions;
                }, context.fieldContext) {
                    (0, (0, context.fieldContext.getInternalHooks)(array).initEntityValue)(trigger(self));
                }
                return self;
            }
            compile(render, name);
            var result = fn(render);
            return g(render, [{
                key: "componentDidMount",
                value: function () {
                    var nextProps = this.props;
                    var shouldUpdate = nextProps.shouldUpdate;
                    var controlledPosition = nextProps.fieldContext;
                    if (this.mounted = true, controlledPosition) {
                        var RHSong = (0, controlledPosition.getInternalHooks)(array).registerField;
                        this.cancelRegisterFunc = RHSong(this);
                    }
                    if (true === shouldUpdate) {
                        this.reRender();
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function () {
                    this.cancelRegister();
                    this.triggerMetaEvent(true);
                    /** @type {boolean} */
                    this.mounted = false;
                }
            }, {
                key: "reRender",
                value: function () {
                    if (this.mounted) {
                        this.forceUpdate();
                    }
                }
            }, {
                key: "render",
                value: function () {
                    var id;
                    var masterpass = this.state.resetCount;
                    var level = this.props.children;
                    var e = this.getOnlyChild(level);
                    var node = e.child;
                    return e.isFunction ? id = node : React.isValidElement(node) ? id = React.cloneElement(node, this.getControlled(node.props)) : (assert(!node, "`children` of Field is not validate ReactElement."), id = node), React.createElement(React.Fragment, {
                        key: masterpass
                    }, id);
                }
            }]), render;
        }(React.Component);
        Route.contextType = path;
        Route.defaultProps = {
            trigger: "onChange",
            valuePropName: "value"
        };
        /**
         * @param {!Object} data
         * @return {?}
         */
        var wrapper = function (data) {
            var b = data.name;
            var options = get(data, param);
            var extendedClass = React.useContext(path);
            var list = void 0 !== b ? val(b) : void 0;
            /** @type {string} */
            var customShorthand = "keep";
            return options.isListField || (customShorthand = "_".concat((list || []).join("_"))), React.createElement(Route, _extends({
                key: customShorthand,
                name: list
            }, options, {
                fieldContext: extendedClass
            }));
        };
        var part = React.createContext(null);
        /**
         * @param {!Object} options
         * @return {?}
         */
        var main = function (options) {
            var text = options.name;
            var value = options.initialValue;
            var cb = options.children;
            var rules = options.rules;
            var setTrigger = options.validateTrigger;
            var context = React.useContext(path);
            var item = React.useRef({
                keys: [],
                id: 0
            }).current;
            var content = React.useMemo(function () {
                var e = val(context.prefixName) || [];
                return [].concat(resolve(e), resolve(val(text)));
            }, [context.prefixName, text]);
            var command_module_id = React.useMemo(function () {
                return assign(assign({}, context), {}, {
                    prefixName: content
                });
            }, [context, content]);
            var oldGenre = React.useMemo(function () {
                return {
                    getKey: function (f) {
                        var i = content.length;
                        var j = f[i];
                        return [item.keys[j], f.slice(i + 1)];
                    }
                };
            }, [content]);
            if ("function" !== typeof cb) {
                return assert(false, "Form.List only accepts function as children."), null;
            }
            return React.createElement(part.Provider, {
                value: oldGenre
            }, React.createElement(path.Provider, {
                value: command_module_id
            }, React.createElement(wrapper, {
                name: [],
                shouldUpdate: function (type, el, opts) {
                    return "internal" !== opts.source && type !== el;
                },
                rules: rules,
                validateTrigger: setTrigger,
                initialValue: value,
                isList: true
            }, function (e, v) {
                var i = e.value;
                var pos = void 0 === i ? [] : i;
                var setTimeout = e.onChange;
                var String = context.getFieldValue;
                /**
                 * @return {?}
                 */
                var keys = function () {
                    return String(content || []) || [];
                };
                var result = {
                    add: function (value, i) {
                        var key = keys();
                        if (i >= 0 && i <= key.length) {
                            /** @type {!Array<?>} */
                            item.keys = [].concat(resolve(item.keys.slice(0, i)), [item.id], resolve(item.keys.slice(i)));
                            setTimeout([].concat(resolve(key.slice(0, i)), [value], resolve(key.slice(i))));
                        } else {
                            /** @type {!Array<?>} */
                            item.keys = [].concat(resolve(item.keys), [item.id]);
                            setTimeout([].concat(resolve(key), [value]));
                        }
                        item.id += 1;
                    },
                    remove: function (value) {
                        var SYS_VARS = keys();
                        /** @type {!Set} */
                        var n = new Set(Array.isArray(value) ? value : [value]);
                        if (!(n.size <= 0)) {
                            item.keys = item.keys.filter(function (canCreateDiscussions, t) {
                                return !n.has(t);
                            });
                            setTimeout(SYS_VARS.filter(function (canCreateDiscussions, t) {
                                return !n.has(t);
                            }));
                        }
                    },
                    move: function (index, key) {
                        if (index !== key) {
                            var opts = keys();
                            if (!(index < 0 || index >= opts.length || key < 0 || key >= opts.length)) {
                                item.keys = transform(item.keys, index, key);
                                setTimeout(transform(opts, index, key));
                            }
                        }
                    }
                };
                var p = pos || [];
                return Array.isArray(p) || (p = []), cb(p.map(function (canCreateDiscussions, key) {
                    var n = item.keys[key];
                    return void 0 === n && (item.keys[key] = item.id, n = item.keys[key], item.id += 1), {
                        name: key,
                        key: n,
                        isListField: true
                    };
                }), result, v);
            })));
        };
        /** @type {string} */
        var ENSURE_ID_SEP = "__@field_split__";
        var Tr = function () {
            /**
             * @return {undefined}
             */
            function n() {
                log(this, n);
                /** @type {!Map} */
                this.kvs = new Map;
            }
            return g(n, [{
                key: "set",
                value: function (data, obj) {
                    this.kvs.set(fill(data), obj);
                }
            }, {
                key: "get",
                value: function (data) {
                    return this.kvs.get(fill(data));
                }
            }, {
                key: "update",
                value: function (key, value) {
                    var val = value(this.get(key));
                    if (val) {
                        this.set(key, val);
                    } else {
                        this.delete(key);
                    }
                }
            }, {
                key: "delete",
                value: function (name) {
                    this.kvs.delete(fill(name));
                }
            }, {
                key: "map",
                value: function (fn) {
                    return resolve(this.kvs.entries()).map(function (Default) {
                        var group = call(Default, 2);
                        var id = group[0];
                        var item = group[1];
                        var ensureId = id.split(ENSURE_ID_SEP);
                        return fn({
                            key: ensureId.map(function (_testModuleName) {
                                var result = call(_testModuleName.match(/^([^:]*):(.*)$/), 3);
                                var number = result[1];
                                var value = result[2];
                                return "number" === number ? Number(value) : value;
                            }),
                            value: item
                        });
                    });
                }
            }, {
                key: "toJSON",
                value: function () {
                    var mapping = {};
                    return this.map(function (result) {
                        var p = result.key;
                        var error = result.value;
                        return mapping[p.join(".")] = error, null;
                    }), mapping;
                }
            }]), n;
        }();
        var Obj56 = Tr;
        /** @type {!Array} */
        var headers = ["name", "errors"];
        var Deferred = g(function render(archivedHubData) {
            var self = this;
            log(this, render);
            /** @type {boolean} */
            this.formHooked = false;
            this.forceRootUpdate = void 0;
            /** @type {boolean} */
            this.subscribable = true;
            this.store = {};
            /** @type {!Array} */
            this.fieldEntities = [];
            this.initialValues = {};
            this.callbacks = {};
            /** @type {null} */
            this.validateMessages = null;
            /** @type {null} */
            this.preserve = null;
            /** @type {null} */
            this.lastValidatePromise = null;
            /**
             * @return {?}
             */
            this.getForm = function () {
                return {
                    getFieldValue: self.getFieldValue,
                    getFieldsValue: self.getFieldsValue,
                    getFieldError: self.getFieldError,
                    getFieldWarning: self.getFieldWarning,
                    getFieldsError: self.getFieldsError,
                    isFieldsTouched: self.isFieldsTouched,
                    isFieldTouched: self.isFieldTouched,
                    isFieldValidating: self.isFieldValidating,
                    isFieldsValidating: self.isFieldsValidating,
                    resetFields: self.resetFields,
                    setFields: self.setFields,
                    setFieldValue: self.setFieldValue,
                    setFieldsValue: self.setFieldsValue,
                    validateFields: self.validateFields,
                    submit: self.submit,
                    _init: true,
                    getInternalHooks: self.getInternalHooks
                };
            };
            /**
             * @param {string} type
             * @return {?}
             */
            this.getInternalHooks = function (type) {
                return type === array ? (self.formHooked = true, {
                    dispatch: self.dispatch,
                    initEntityValue: self.initEntityValue,
                    registerField: self.registerField,
                    useSubscribe: self.useSubscribe,
                    setInitialValues: self.setInitialValues,
                    destroyForm: self.destroyForm,
                    setCallbacks: self.setCallbacks,
                    setValidateMessages: self.setValidateMessages,
                    getFields: self.getFields,
                    setPreserve: self.setPreserve,
                    getInitialValue: self.getInitialValue,
                    registerWatch: self.registerWatch
                }) : (assert(false, "`getInternalHooks` is internal usage. Should not call directly."), null);
            };
            /**
             * @param {?} name
             * @return {undefined}
             */
            this.useSubscribe = function (name) {
                self.subscribable = name;
            };
            /** @type {null} */
            this.prevWithoutPreserves = null;
            /**
             * @param {!Object} id
             * @param {boolean} initialValues
             * @return {undefined}
             */
            this.setInitialValues = function (id, initialValues) {
                if (self.initialValues = id || {}, initialValues) {
                    var clues;
                    var result = getValue({}, id, self.store);
                    if (!(null === (clues = self.prevWithoutPreserves) || void 0 === clues)) {
                        clues.map(function (_ref) {
                            var state = _ref.key;
                            result = func(result, state, html(id, state));
                        });
                    }
                    /** @type {null} */
                    self.prevWithoutPreserves = null;
                    self.updateStore(result);
                }
            };
            /**
             * @return {undefined}
             */
            this.destroyForm = function () {
                var f = new Obj56;
                self.getFieldEntities(true).forEach(function (that) {
                    if (!self.isMergedPreserve(that.isPreserve())) {
                        f.set(that.getNamePath(), true);
                    }
                });
                self.prevWithoutPreserves = f;
            };
            /**
             * @param {?} value
             * @return {?}
             */
            this.getInitialValue = function (value) {
                var result = html(self.initialValues, value);
                return value.length ? toArray(result) : result;
            };
            /**
             * @param {!Object} options
             * @return {undefined}
             */
            this.setCallbacks = function (options) {
                /** @type {!Object} */
                self.callbacks = options;
            };
            /**
             * @param {!Object} name
             * @return {undefined}
             */
            this.setValidateMessages = function (name) {
                /** @type {!Object} */
                self.validateMessages = name;
            };
            /**
             * @param {string} name
             * @return {undefined}
             */
            this.setPreserve = function (name) {
                /** @type {string} */
                self.preserve = name;
            };
            /** @type {!Array} */
            this.watchList = [];
            /**
             * @param {?} name
             * @return {?}
             */
            this.registerWatch = function (name) {
                return self.watchList.push(name), function () {
                    self.watchList = self.watchList.filter(function (sortColumnIdentifier) {
                        return sortColumnIdentifier !== name;
                    });
                };
            };
            /**
             * @return {undefined}
             */
            this.notifyWatch = function () {
                var debugee = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                if (self.watchList.length) {
                    var urConfigJson = self.getFieldsValue();
                    self.watchList.forEach(function (cb) {
                        cb(urConfigJson, debugee);
                    });
                }
            };
            /** @type {null} */
            this.timeoutId = null;
            /**
             * @return {undefined}
             */
            this.warningUnhooked = function () {
                0;
            };
            /**
             * @param {string} store
             * @return {undefined}
             */
            this.updateStore = function (store) {
                /** @type {string} */
                self.store = store;
            };
            /**
             * @return {?}
             */
            this.getFieldEntities = function () {
                var appearsBrowserified = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return appearsBrowserified ? self.fieldEntities.filter(function (canCreateDiscussions) {
                    return canCreateDiscussions.getNamePath().length;
                }) : self.fieldEntities;
            };
            /**
             * @return {?}
             */
            this.getFieldsMap = function () {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                var f = new Obj56;
                return self.getFieldEntities(e).forEach(function (authValue) {
                    var n = authValue.getNamePath();
                    f.set(n, authValue);
                }), f;
            };
            /**
             * @param {?} result
             * @return {?}
             */
            this.getFieldEntitiesForNamePathList = function (result) {
                if (!result) {
                    return self.getFieldEntities(true);
                }
                var propOut = self.getFieldsMap(true);
                return result.map(function (elem) {
                    var v = val(elem);
                    return propOut.get(v) || {
                        INVALIDATE_NAME_PATH: val(elem)
                    };
                });
            };
            /**
             * @param {?} e
             * @param {boolean} field
             * @return {?}
             */
            this.getFieldsValue = function (e, field) {
                if (self.warningUnhooked(), true === e && !field) {
                    return self.store;
                }
                var pipelets = self.getFieldEntitiesForNamePathList(Array.isArray(e) ? e : null);
                /** @type {!Array} */
                var o = [];
                return pipelets.forEach(function (target) {
                    var _dispose;
                    var a = "INVALIDATE_NAME_PATH" in target ? target.INVALIDATE_NAME_PATH : target.getNamePath();
                    if (e || !(null === (_dispose = target.isListField) || void 0 === _dispose ? void 0 : _dispose.call(target))) {
                        if (field) {
                            var value = "getMeta" in target ? target.getMeta() : null;
                            if (field(value)) {
                                o.push(a);
                            }
                        } else {
                            o.push(a);
                        }
                    }
                }), change(self.store, o.map(val));
            };
            /**
             * @param {?} name
             * @return {?}
             */
            this.getFieldValue = function (name) {
                self.warningUnhooked();
                var Module = val(name);
                return html(self.store, Module);
            };
            /**
             * @param {?} v
             * @return {?}
             */
            this.getFieldsError = function (v) {
                return self.warningUnhooked(), self.getFieldEntitiesForNamePathList(v).map(function (d, p) {
                    return d && !("INVALIDATE_NAME_PATH" in d) ? {
                        name: d.getNamePath(),
                        errors: d.getErrors(),
                        warnings: d.getWarnings()
                    } : {
                        name: val(v[p]),
                        errors: [],
                        warnings: []
                    };
                });
            };
            /**
             * @param {?} arg
             * @return {?}
             */
            this.getFieldError = function (arg) {
                self.warningUnhooked();
                var info = val(arg);
                return self.getFieldsError([info])[0].errors;
            };
            /**
             * @param {?} arg
             * @return {?}
             */
            this.getFieldWarning = function (arg) {
                self.warningUnhooked();
                var info = val(arg);
                return self.getFieldsError([info])[0].warnings;
            };
            /**
             * @return {?}
             */
            this.isFieldsTouched = function () {
                self.warningUnhooked();
                /** @type {number} */
                var length = arguments.length;
                /** @type {!Array} */
                var values = new Array(length);
                /** @type {number} */
                var i = 0;
                for (; i < length; i++) {
                    values[i] = arguments[i];
                }
                var bools;
                var type = values[0];
                var node = values[1];
                /** @type {boolean} */
                var func = false;
                if (0 === values.length) {
                    /** @type {null} */
                    bools = null;
                } else {
                    if (1 === values.length) {
                        if (Array.isArray(type)) {
                            bools = type.map(val);
                            /** @type {boolean} */
                            func = false;
                        } else {
                            /** @type {null} */
                            bools = null;
                            func = type;
                        }
                    } else {
                        bools = type.map(val);
                        func = node;
                    }
                }
                var keys = self.getFieldEntities(true);
                /**
                 * @param {?} gameLumps
                 * @return {?}
                 */
                var value = function (gameLumps) {
                    return gameLumps.isFieldTouched();
                };
                if (!bools) {
                    return func ? keys.every(value) : keys.some(value);
                }
                var t = new Obj56;
                bools.forEach(function (e) {
                    t.set(e, []);
                });
                keys.forEach(function (tmp) {
                    var client = tmp.getNamePath();
                    bools.forEach(function (n) {
                        if (n.every(function (expectedVerifiedValue, fieldToVerify) {
                            return client[fieldToVerify] === expectedVerifiedValue;
                        })) {
                            t.update(n, function (value) {
                                return [].concat(resolve(value), [tmp]);
                            });
                        }
                    });
                });
                /**
                 * @param {!Array} a
                 * @return {?}
                 */
                var obj = function (a) {
                    return a.some(value);
                };
                var _ = t.map(function (select_ele) {
                    return select_ele.value;
                });
                return func ? _.every(obj) : _.some(obj);
            };
            /**
             * @param {?} name
             * @return {?}
             */
            this.isFieldTouched = function (name) {
                return self.warningUnhooked(), self.isFieldsTouched([name]);
            };
            /**
             * @param {?} fn
             * @return {?}
             */
            this.isFieldsValidating = function (fn) {
                self.warningUnhooked();
                var transferArr = self.getFieldEntities();
                if (!fn) {
                    return transferArr.some(function (canCreateDiscussions) {
                        return canCreateDiscussions.isFieldValidating();
                    });
                }
                var valueBuffer = fn.map(val);
                return transferArr.some(function (canCreateDiscussions) {
                    var getOSTypeCallback = canCreateDiscussions.getNamePath();
                    return exec(valueBuffer, getOSTypeCallback) && canCreateDiscussions.isFieldValidating();
                });
            };
            /**
             * @param {?} name
             * @return {?}
             */
            this.isFieldValidating = function (name) {
                return self.warningUnhooked(), self.isFieldsValidating([name]);
            };
            /**
             * @return {undefined}
             */
            this.resetWithFieldInitialValue = function () {
                var world = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                var f = new Obj56;
                var _ = self.getFieldEntities(true);
                _.forEach(function (res) {
                    var initialValue = res.props.initialValue;
                    var method = res.getNamePath();
                    if (void 0 !== initialValue) {
                        var o = f.get(method) || new Set;
                        o.add({
                            entity: res,
                            value: initialValue
                        });
                        f.set(method, o);
                    }
                });
                var b;
                /**
                 * @param {!Object} r
                 * @return {undefined}
                 */
                var parse = function (r) {
                    r.forEach(function (res) {
                        if (void 0 !== res.props.initialValue) {
                            var target = res.getNamePath();
                            if (void 0 !== self.getInitialValue(target)) {
                                assert(false, "Form already set 'initialValues' with path '".concat(target.join("."), "'. Field can not overwrite it."));
                            } else {
                                var a = f.get(target);
                                if (a && a.size > 1) {
                                    assert(false, "Multiple Field with path '".concat(target.join("."), "' set 'initialValue'. Can not decide which one to pick."));
                                } else {
                                    if (a) {
                                        var ngEl = self.getFieldValue(target);
                                        if (!(world.skipExist && void 0 !== ngEl)) {
                                            self.updateStore(func(self.store, target, resolve(a)[0].value));
                                        }
                                    }
                                }
                            }
                        }
                    });
                };
                if (world.entities) {
                    b = world.entities;
                } else {
                    if (world.namePathList) {
                        /** @type {!Array} */
                        b = [];
                        world.namePathList.forEach(function (e) {
                            var left;
                            var r = f.get(e);
                            if (r) {
                                (left = b).push.apply(left, resolve(resolve(r).map(function (spaceRoute) {
                                    return spaceRoute.entity;
                                })));
                            }
                        });
                    } else {
                        b = _;
                    }
                }
                parse(b);
            };
            /**
             * @param {?} item
             * @return {?}
             */
            this.resetFields = function (item) {
                self.warningUnhooked();
                var window = self.store;
                if (!item) {
                    return self.updateStore(getValue({}, self.initialValues)), self.resetWithFieldInitialValue(), self.notifyObservers(window, null, {
                        type: "reset"
                    }), void self.notifyWatch();
                }
                var type = item.map(val);
                type.forEach(function (target) {
                    var p = self.getInitialValue(target);
                    self.updateStore(func(self.store, target, p));
                });
                self.resetWithFieldInitialValue({
                    namePathList: type
                });
                self.notifyObservers(window, type, {
                    type: "reset"
                });
                self.notifyWatch(type);
            };
            /**
             * @param {?} value
             * @return {undefined}
             */
            this.setFields = function (value) {
                self.warningUnhooked();
                var window = self.store;
                /** @type {!Array} */
                var r = [];
                value.forEach(function (data) {
                    var elem = data.name;
                    var result = (data.errors, get(data, headers));
                    var value = val(elem);
                    r.push(value);
                    if ("value" in result) {
                        self.updateStore(func(self.store, value, result.value));
                    }
                    self.notifyObservers(window, [value], {
                        type: "setField",
                        data: data
                    });
                });
                self.notifyWatch(r);
            };
            /**
             * @return {?}
             */
            this.getFields = function () {
                return self.getFieldEntities(true).map(function (prop) {
                    var value = prop.getNamePath();
                    var newItem = assign(assign({}, prop.getMeta()), {}, {
                        name: value,
                        value: self.getFieldValue(value)
                    });
                    return Object.defineProperty(newItem, "originRCField", {
                        value: true
                    }), newItem;
                });
            };
            /**
             * @param {?} item
             * @return {undefined}
             */
            this.initEntityValue = function (item) {
                var value = item.props.initialValue;
                if (void 0 !== value) {
                    var data = item.getNamePath();
                    if (void 0 === html(self.store, data)) {
                        self.updateStore(func(self.store, data, value));
                    }
                }
            };
            /**
             * @param {number} data
             * @return {?}
             */
            this.isMergedPreserve = function (data) {
                var node = void 0 !== data ? data : self.preserve;
                return null === node || void 0 === node || node;
            };
            /**
             * @param {?} type
             * @return {?}
             */
            this.registerField = function (type) {
                self.fieldEntities.push(type);
                var value = type.getNamePath();
                if (self.notifyWatch([value]), void 0 !== type.props.initialValue) {
                    var window = self.store;
                    self.resetWithFieldInitialValue({
                        entities: [type],
                        skipExist: true
                    });
                    self.notifyObservers(window, [type.getNamePath()], {
                        type: "valueUpdate",
                        source: "internal"
                    });
                }
                return function (exception, scSocket) {
                    var expRecords = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                    if (self.fieldEntities = self.fieldEntities.filter(function (p) {
                        return p !== type;
                    }), !self.isMergedPreserve(scSocket) && (!exception || expRecords.length > 1)) {
                        var undefined = exception ? void 0 : self.getInitialValue(value);
                        if (value.length && self.getFieldValue(value) !== undefined && self.fieldEntities.every(function (canCreateDiscussions) {
                            return !ready(canCreateDiscussions.getNamePath(), value);
                        })) {
                            var data = self.store;
                            self.updateStore(func(data, value, undefined, true));
                            self.notifyObservers(data, [value], {
                                type: "remove"
                            });
                            self.triggerDependenciesUpdate(data, value);
                        }
                    }
                    self.notifyWatch([value]);
                };
            };
            /**
             * @param {?} input
             * @return {undefined}
             */
            this.dispatch = function (input) {
                switch (input.type) {
                    case "updateValue":
                        var newValue = input.namePath;
                        var value = input.value;
                        self.updateValue(newValue, value);
                        break;
                    case "validateField":
                        var instance = input.namePath;
                        var triggerName = input.triggerName;
                        self.validateFields([instance], {
                            triggerName: triggerName
                        });
                }
            };
            /**
             * @param {?} obj
             * @param {?} key
             * @param {?} context
             * @return {undefined}
             */
            this.notifyObservers = function (obj, key, context) {
                if (self.subscribable) {
                    var expectedBpmnFile = assign(assign({}, context), {}, {
                        store: self.getFieldsValue(true)
                    });
                    self.getFieldEntities().forEach(function (C) {
                        (0, C.onStoreChange)(obj, key, expectedBpmnFile);
                    });
                } else {
                    self.forceRootUpdate();
                }
            };
            /**
             * @param {?} data
             * @param {!Object} key
             * @return {?}
             */
            this.triggerDependenciesUpdate = function (data, key) {
                var e = self.getDependencyChildrenFields(key);
                return e.length && self.validateFields(e), self.notifyObservers(data, e, {
                    type: "dependenciesUpdate",
                    relatedFields: [key].concat(resolve(e))
                }), e;
            };
            /**
             * @param {?} text
             * @param {!Array} data
             * @return {undefined}
             */
            this.updateValue = function (text, data) {
                var index = val(text);
                var m = self.store;
                self.updateStore(func(self.store, index, data));
                self.notifyObservers(m, [index], {
                    type: "valueUpdate",
                    source: "internal"
                });
                self.notifyWatch([index]);
                var a = self.triggerDependenciesUpdate(m, index);
                var dispatch = self.callbacks.onValuesChange;
                if (dispatch) {
                    dispatch(change(self.store, [index]), self.getFieldsValue());
                }
                self.triggerOnFieldsChange([index].concat(resolve(a)));
            };
            /**
             * @param {?} obj
             * @return {undefined}
             */
            this.setFieldsValue = function (obj) {
                self.warningUnhooked();
                var window = self.store;
                if (obj) {
                    var v = getValue(self.store, obj);
                    self.updateStore(v);
                }
                self.notifyObservers(window, null, {
                    type: "valueUpdate",
                    source: "external"
                });
                self.notifyWatch();
            };
            /**
             * @param {string} value
             * @param {string} name
             * @return {undefined}
             */
            this.setFieldValue = function (value, name) {
                self.setFields([{
                    name: value,
                    value: name
                }]);
            };
            /**
             * @param {!Object} object
             * @return {?}
             */
            this.getDependencyChildrenFields = function (object) {
                /** @type {!Set} */
                var triggerLookup = new Set;
                /** @type {!Array} */
                var result = [];
                var t = new Obj56;
                self.getFieldEntities().forEach(function (data) {
                    (data.props.dependencies || []).forEach(function (elem) {
                        var v = val(elem);
                        t.update(v, function () {
                            var sources = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Set;
                            return sources.add(data), sources;
                        });
                    });
                });
                return function add(key) {
                    (t.get(key) || new Set).forEach(function (name) {
                        if (!triggerLookup.has(name)) {
                            triggerLookup.add(name);
                            var sprite = name.getNamePath();
                            if (name.isFieldDirty() && sprite.length) {
                                result.push(sprite);
                                add(sprite);
                            }
                        }
                    });
                }(object), result;
            };
            /**
             * @param {!Object} str
             * @param {!Array} ar
             * @return {undefined}
             */
            this.triggerOnFieldsChange = function (str, ar) {
                var bindOnReadyStateChange = self.callbacks.onFieldsChange;
                if (bindOnReadyStateChange) {
                    var o = self.getFields();
                    if (ar) {
                        var t = new Obj56;
                        ar.forEach(function (track) {
                            var type = track.name;
                            var item = track.errors;
                            t.set(type, item);
                        });
                        o.forEach(function (e) {
                            e.errors = t.get(e.name) || e.errors;
                        });
                    }
                    bindOnReadyStateChange(o.filter(function (conv) {
                        var list = conv.name;
                        return exec(str, list);
                    }), o);
                }
            };
            /**
             * @param {?} parent
             * @param {number} method
             * @return {?}
             */
            this.validateFields = function (parent, method) {
                self.warningUnhooked();
                /** @type {boolean} */
                var type = !!parent;
                var value = type ? parent.map(val) : [];
                /** @type {!Array} */
                var plugins = [];
                self.getFieldEntities(true).forEach(function (s) {
                    if (type || value.push(s.getNamePath()), (null === method || void 0 === method ? void 0 : method.recursive) && type) {
                        var u = s.getNamePath();
                        if (u.every(function (undefined, url) {
                            return parent[url] === undefined || void 0 === parent[url];
                        })) {
                            value.push(u);
                        }
                    }
                    if (s.props.rules && s.props.rules.length) {
                        var val = s.getNamePath();
                        if (!type || exec(value, val)) {
                            var loadPropPromise = s.validateRules(assign({
                                validateMessages: assign(assign({}, schema), self.validateMessages)
                            }, method));
                            plugins.push(loadPropPromise.then(function () {
                                return {
                                    name: val,
                                    errors: [],
                                    warnings: []
                                };
                            }).catch(function (set) {
                                var second;
                                /** @type {!Array} */
                                var data = [];
                                /** @type {!Array} */
                                var warnings = [];
                                return null === (second = set.forEach) || void 0 === second || second.call(set, function (parser) {
                                    var t = parser.rule.warningOnly;
                                    var result = parser.errors;
                                    if (t) {
                                        warnings.push.apply(warnings, resolve(result));
                                    } else {
                                        data.push.apply(data, resolve(result));
                                    }
                                }), data.length ? Promise.reject({
                                    name: val,
                                    errors: data,
                                    warnings: warnings
                                }) : {
                                        name: val,
                                        errors: data,
                                        warnings: warnings
                                    };
                            }));
                        }
                    }
                });
                var ready = function (array) {
                    /** @type {boolean} */
                    var _b6 = false;
                    /** @type {number} */
                    var i = array.length;
                    /** @type {!Array} */
                    var val = [];
                    return array.length ? new Promise(function (obtainGETData, negater) {
                        array.forEach(function (a, k) {
                            a.catch(function (fn) {
                                return _b6 = true, fn;
                            }).then(function (newValue) {
                                /** @type {number} */
                                i = i - 1;
                                val[k] = newValue;
                                if (!(i > 0)) {
                                    if (_b6) {
                                        negater(val);
                                    }
                                    obtainGETData(val);
                                }
                            });
                        });
                    }) : Promise.resolve([]);
                }(plugins);
                self.lastValidatePromise = ready;
                ready.catch(function (res) {
                    return res;
                }).then(function (result) {
                    var data = result.map(function (engineDiscovery) {
                        return engineDiscovery.name;
                    });
                    self.notifyObservers(self.store, data, {
                        type: "validateFinish"
                    });
                    self.triggerOnFieldsChange(data, result);
                });
                var inhibited = ready.then(function () {
                    return self.lastValidatePromise === ready ? Promise.resolve(self.getFieldsValue(value)) : Promise.reject([]);
                }).catch(function (swimlanes) {
                    var t = swimlanes.filter(function (e) {
                        return e && e.errors.length;
                    });
                    return Promise.reject({
                        values: self.getFieldsValue(value),
                        errorFields: t,
                        outOfDate: self.lastValidatePromise !== ready
                    });
                });
                return inhibited.catch(function (res) {
                    return res;
                }), inhibited;
            };
            /**
             * @return {undefined}
             */
            this.submit = function () {
                self.warningUnhooked();
                self.validateFields().then(function (token) {
                    var done = self.callbacks.onFinish;
                    if (done) {
                        try {
                            done(token);
                        } catch (r) {
                            console.error(r);
                        }
                    }
                }).catch(function (settings) {
                    var validatePhoneNumbers = self.callbacks.onFinishFailed;
                    if (validatePhoneNumbers) {
                        validatePhoneNumbers(settings);
                    }
                });
            };
            /** @type {number} */
            this.forceRootUpdate = archivedHubData;
        });
        /**
         * @param {string} data
         * @return {?}
         */
        var cancel = function (data) {
            var subList = React.useRef();
            var pfxId = call(React.useState({}), 2)[1];
            if (!subList.current) {
                if (data) {
                    /** @type {string} */
                    subList.current = data;
                } else {
                    var formMetadata = new Deferred(function () {
                        pfxId({});
                    });
                    subList.current = formMetadata.getForm();
                }
            }
            return [subList.current];
        };
        var props = React.createContext({
            triggerFormChange: function () {
            },
            triggerFormFinish: function () {
            },
            registerForm: function () {
            },
            unregisterForm: function () {
            }
        });
        /**
         * @param {!Object} fn
         * @return {?}
         */
        var promise = function (fn) {
            var target = fn.validateMessages;
            var tag = fn.onFormChange;
            var mixin = fn.onFormFinish;
            var data = fn.children;
            var context = React.useContext(props);
            var _this = React.useRef({});
            return React.createElement(props.Provider, {
                value: assign(assign({}, context), {}, {
                    validateMessages: assign(assign({}, context.validateMessages), target),
                    triggerFormChange: function (title, fn) {
                        if (tag) {
                            tag(title, {
                                changedFields: fn,
                                forms: _this.current
                            });
                        }
                        context.triggerFormChange(title, fn);
                    },
                    triggerFormFinish: function (src, response) {
                        if (mixin) {
                            mixin(src, {
                                values: response,
                                forms: _this.current
                            });
                        }
                        context.triggerFormFinish(src, response);
                    },
                    registerForm: function (state, data) {
                        if (state) {
                            _this.current = assign(assign({}, _this.current), {}, debug({}, state, data));
                        }
                        context.registerForm(state, data);
                    },
                    unregisterForm: function (state) {
                        var data = assign({}, _this.current);
                        delete data[state];
                        _this.current = data;
                        context.unregisterForm(state);
                    }
                })
            }, data);
        };
        var cur = props;
        /** @type {!Array} */
        var keyPath = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
        /**
         * @param {!Object} options
         * @param {!Function} component
         * @return {?}
         */
        var callback = function (options, component) {
            var name = options.name;
            var input = options.initialValues;
            var payload = options.fields;
            var id = options.form;
            var x = options.preserve;
            var a = options.children;
            var parent = options.component;
            var type = void 0 === parent ? "form" : parent;
            var source = options.validateMessages;
            var key = options.validateTrigger;
            var newElKey = void 0 === key ? "onChange" : key;
            var d3version = options.onValuesChange;
            var method = options.onFieldsChange;
            var done = options.onFinish;
            var nameVersions = options.onFinishFailed;
            var result = get(options, keyPath);
            var _this = React.useContext(cur);
            var data = call(cancel(id), 1)[0];
            var c = data.getInternalHooks(array);
            var to = c.useSubscribe;
            var toFixed = c.setInitialValues;
            var res = c.setCallbacks;
            var resolve = c.setValidateMessages;
            var onStep = c.setPreserve;
            var ctx = c.destroyForm;
            React.useImperativeHandle(component, function () {
                return data;
            });
            React.useEffect(function () {
                return _this.registerForm(name, data), function () {
                    _this.unregisterForm(name);
                };
            }, [_this, data, name]);
            resolve(assign(assign({}, _this.validateMessages), source));
            res({
                onValuesChange: d3version,
                onFieldsChange: function (callback) {
                    if (_this.triggerFormChange(name, callback), method) {
                        /** @type {number} */
                        var length = arguments.length;
                        /** @type {!Array} */
                        var args = new Array(length > 1 ? length - 1 : 0);
                        /** @type {number} */
                        var i = 1;
                        for (; i < length; i++) {
                            args[i - 1] = arguments[i];
                        }
                        method.apply(void 0, [callback].concat(args));
                    }
                },
                onFinish: function (data) {
                    _this.triggerFormFinish(name, data);
                    if (done) {
                        done(data);
                    }
                },
                onFinishFailed: nameVersions
            });
            onStep(x);
            var count;
            var aIterator = React.useRef(null);
            toFixed(input, !aIterator.current);
            if (!aIterator.current) {
                /** @type {boolean} */
                aIterator.current = true;
            }
            React.useEffect(function () {
                return ctx;
            }, []);
            /** @type {boolean} */
            var doExtend = "function" === typeof a;
            if (doExtend) {
                count = a(data.getFieldsValue(true), data);
            } else {
                count = a;
            }
            to(!doExtend);
            var conf = React.useRef();
            React.useEffect(function () {
                if (!function (a, b) {
                    if (a === b) {
                        return true;
                    }
                    if (!a && b || a && !b) {
                        return false;
                    }
                    if (!a || !b || "object" !== stringify(a) || "object" !== stringify(b)) {
                        return false;
                    }
                    /** @type {!Array<string>} */
                    var dir = Object.keys(a);
                    /** @type {!Array<string>} */
                    var nread = Object.keys(b);
                    return resolve(new Set([].concat(dir, nread))).every(function (key) {
                        var o = a[key];
                        var v = b[key];
                        return "function" === typeof o && "function" === typeof v || o === v;
                    });
                }(conf.current || [], payload || [])) {
                    data.setFields(payload || []);
                }
                conf.current = payload;
            }, [payload, data]);
            var command_module_id = React.useMemo(function () {
                return assign(assign({}, data), {}, {
                    validateTrigger: newElKey
                });
            }, [data, newElKey]);
            var value = React.createElement(path.Provider, {
                value: command_module_id
            }, count);
            return false === type ? value : React.createElement(type, _extends({}, result, {
                onSubmit: function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    data.submit();
                },
                onReset: function (e) {
                    var t;
                    e.preventDefault();
                    data.resetFields();
                    if (!(null === (t = result.onReset) || void 0 === t)) {
                        t.call(result, e);
                    }
                }
            }), value);
        };
        /**
         * @return {?}
         */
        var success = function () {
            var elem = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
            var value = arguments.length > 1 ? arguments[1] : void 0;
            var level = (0, React.useState)();
            var label = call(level, 2);
            var inner = label[0];
            var chewNode = label[1];
            var svg = (0, React.useMemo)(function () {
                return stringifyDOM(inner);
            }, [inner]);
            var item = (0, React.useRef)(svg);
            item.current = svg;
            var p = (0, React.useContext)(path);
            var form = value || p;
            var filename = form && form._init;
            var v = val(elem);
            var el = (0, React.useRef)(v);
            return el.current = v, (0, React.useEffect)(function () {
                if (filename) {
                    var h = form.getFieldsValue;
                    var subtype = (0, (0, form.getInternalHooks)(array).registerWatch)(function (iframe) {
                        var div = html(iframe, el.current);
                        var index = stringifyDOM(div);
                        if (item.current !== index) {
                            item.current = index;
                            chewNode(div);
                        }
                    });
                    var subPartInfo = html(h(), el.current);
                    return chewNode(subPartInfo), subtype;
                }
            }, []), inner;
        };
        var options = React.forwardRef(callback);
        /** @type {function(!Object): ?} */
        options.FormProvider = promise;
        /** @type {function(!Object): ?} */
        options.Field = wrapper;
        /** @type {function(!Object): ?} */
        options.List = main;
        /** @type {function(string): ?} */
        options.useForm = cancel;
        /** @type {function(): ?} */
        options.useWatch = success;
        var TodosLogin = options;
        var child = React.createContext({
            labelAlign: "right",
            vertical: false,
            itemRef: function () {
            }
        });
        var redux = React.createContext(null);
        var Menu = React.createContext({
            prefixCls: ""
        });
        var channel = React.createContext({});
        /**
         * @param {!Object} options
         * @return {?}
         */
        var space = function (options) {
            var n = options.children;
            var type = options.status;
            var override = options.override;
            var path = (0, React.useContext)(channel);
            var command_module_id = (0, React.useMemo)(function () {
                var field = _extends({}, path);
                return override && delete field.isFormItemInput, type && (delete field.status, delete field.hasFeedback, delete field.feedbackIcon), field;
            }, [type, override, path]);
            return React.createElement(channel.Provider, {
                value: command_module_id
            }, n);
        };
        /**
         * @return {?}
         */
        var equal = function () {
            /** @type {number} */
            var count = arguments.length;
            /** @type {!Array} */
            var ret = new Array(count);
            /** @type {number} */
            var i = 0;
            for (; i < count; i++) {
                ret[i] = arguments[i];
            }
            return ret;
        };
        equal("warning", "error", "");
        /**
         * @param {boolean} data
         * @param {number} status
         * @return {?}
         */
        var denormalize = function (data, status) {
            return status || data;
        };
        var defaultConfig = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                    }
                }]
            },
            name: "close-circle",
            theme: "filled"
        };
        /**
         * @param {?} obj
         * @param {string} instance
         * @return {?}
         */
        var proto = function (obj, instance) {
            return React.createElement(VictoryLine, assign(assign({}, obj), {}, {
                ref: instance,
                icon: defaultConfig
            }));
        };
        /** @type {string} */
        proto.displayName = "CloseCircleFilled";
        var v = React.forwardRef(proto);
        var isString = React.isValidElement;
        var matches = equal("text", "input");
        var DEFAULT_RESIZE_OPTS = function (name) {
            /**
             * @return {?}
             */
            function n() {
                return log(this, n), f.apply(this, arguments);
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "renderClearIcon",
                value: function (key) {
                    var pornResult;
                    var props = this.props;
                    var title = props.value;
                    var disabled = props.disabled;
                    var checked = props.readOnly;
                    var onPlusClick = props.handleReset;
                    var str = props.suffix;
                    var add_title_to_td = !disabled && !checked && title;
                    /** @type {string} */
                    var id = "".concat(key, "-clear-icon");
                    return React.createElement(v, {
                        onClick: onPlusClick,
                        onMouseDown: function (event) {
                            return event.preventDefault();
                        },
                        className: require()((pornResult = {}, debug(pornResult, "".concat(id, "-hidden"), !add_title_to_td), debug(pornResult, "".concat(id, "-has-suffix"), !!str), pornResult), id),
                        role: "button"
                    });
                }
            }, {
                key: "renderTextAreaWithClearIcon",
                value: function (name, item, data) {
                    var err;
                    var _props = this.props;
                    var selectLayersValue = _props.value;
                    var dataEndIndex = _props.allowClear;
                    var size = _props.className;
                    var style = _props.style;
                    var direction = _props.direction;
                    var bordered = _props.bordered;
                    var hidden = _props.hidden;
                    var userStatus = _props.status;
                    var code = data.status;
                    var value = data.hasFeedback;
                    if (!dataEndIndex) {
                        return $(item, {
                            value: selectLayersValue
                        });
                    }
                    var iFormInput;
                    var langClass = require()("".concat(name, "-affix-wrapper"), "".concat(name, "-affix-wrapper-textarea-with-clear-btn"), handle("".concat(name, "-affix-wrapper"), denormalize(code, userStatus), value), (debug(err = {}, "".concat(name, "-affix-wrapper-rtl"), "rtl" === direction), debug(err, "".concat(name, "-affix-wrapper-borderless"), !bordered), debug(err, "".concat(size), !((iFormInput = this.props).addonBefore || iFormInput.addonAfter) && size), err));
                    return React.createElement("span", {
                        className: langClass,
                        style: style,
                        hidden: hidden
                    }, $(item, {
                        style: null,
                        value: selectLayersValue
                    }), this.renderClearIcon(name));
                }
            }, {
                key: "render",
                value: function () {
                    var _ref2 = this;
                    return React.createElement(channel.Consumer, null, function (row) {
                        var data = _ref2.props;
                        var data_url = data.prefixCls;
                        var inputType = data.inputType;
                        var completions = data.element;
                        if (inputType === matches[0]) {
                            return _ref2.renderTextAreaWithClearIcon(data_url, completions, row);
                        }
                    });
                }
            }]), n;
        }(React.Component);
        var FilterFormConcrete = DEFAULT_RESIZE_OPTS;
        /**
         * @param {!Object} options
         * @return {?}
         */
        var process = function (options) {
            var input = options.inputElement;
            var name = options.prefixCls;
            var icon = options.prefix;
            var body = options.suffix;
            var line = options.addonBefore;
            var help = options.addonAfter;
            var state = options.className;
            var textStyle = options.style;
            var event = options.affixWrapperClassName;
            var all = options.groupClassName;
            var data = options.wrapperClassName;
            var h = options.disabled;
            var m = options.readOnly;
            var index = options.focused;
            var readOnlyFn = options.triggerFocus;
            var error = options.allowClear;
            var w = options.value;
            var onPlusClick = options.handleReset;
            var hidden = options.hidden;
            var o = (0, React.useRef)(null);
            var label = (0, React.cloneElement)(input, {
                value: w,
                hidden: hidden
            });
            if (processFile(options)) {
                var err;
                /** @type {string} */
                var key = "".concat(name, "-affix-wrapper");
                var val = require()(key, (debug(err = {}, "".concat(key, "-disabled"), h), debug(err, "".concat(key, "-focused"), index), debug(err, "".concat(key, "-readonly"), m), debug(err, "".concat(key, "-input-with-clear-btn"), body && error && w), err), !renderInputGroup(options) && state, event);
                var filterByLabel = (body || error) && React.createElement("span", {
                    className: "".concat(name, "-suffix")
                }, function () {
                    var pornResult;
                    if (!error) {
                        return null;
                    }
                    var ctrlW = !h && !m && w;
                    /** @type {string} */
                    var key = "".concat(name, "-clear-icon");
                    var indicators = "object" === stringify(error) && (null === error || void 0 === error ? void 0 : error.clearIcon) ? error.clearIcon : "\u2716";
                    return React.createElement("span", {
                        onClick: onPlusClick,
                        onMouseDown: function (event) {
                            return event.preventDefault();
                        },
                        className: require()(key, (pornResult = {}, debug(pornResult, "".concat(key, "-hidden"), !ctrlW), debug(pornResult, "".concat(key, "-has-suffix"), !!body), pornResult)),
                        role: "button",
                        tabIndex: -1
                    }, indicators);
                }(), body);
                label = React.createElement("span", {
                    className: val,
                    style: textStyle,
                    hidden: !renderInputGroup(options) && hidden,
                    onMouseDown: function (event) {
                        var value;
                        if (null === (value = o.current) || void 0 === value ? void 0 : value.contains(event.target)) {
                            if (!(null === readOnlyFn || void 0 === readOnlyFn)) {
                                readOnlyFn();
                            }
                        }
                    },
                    ref: o
                }, icon && React.createElement("span", {
                    className: "".concat(name, "-prefix")
                }, icon), (0, React.cloneElement)(input, {
                    style: null,
                    value: w,
                    hidden: null
                }), filterByLabel);
            }
            if (renderInputGroup(options)) {
                /** @type {string} */
                var key = "".concat(name, "-group");
                /** @type {string} */
                var container = "".concat(key, "-addon");
                var item = require()("".concat(name, "-wrapper"), key, data);
                var result = require()("".concat(name, "-group-wrapper"), state, all);
                return React.createElement("span", {
                    className: result,
                    style: textStyle,
                    hidden: hidden
                }, React.createElement("span", {
                    className: item
                }, line && React.createElement("span", {
                    className: container
                }, line), (0, React.cloneElement)(label, {
                    style: null,
                    hidden: null
                }), help && React.createElement("span", {
                    className: container
                }, help)));
            }
            return label;
        };
        /** @type {!Array} */
        var EVENTS = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "type", "inputClassName"];
        var _none_ = (0, React.forwardRef)(function (options, n) {
            var autoComplete = options.autoComplete;
            var fn = options.onChange;
            var g = options.onFocus;
            var expect = options.onBlur;
            var keyMatchesCommand = options.onPressEnter;
            var orig_onKeyDown = options.onKeyDown;
            var step = options.prefixCls;
            var id = void 0 === step ? "rc-input" : step;
            var disabled = options.disabled;
            var movement = options.htmlSize;
            var classes = options.className;
            var value = options.maxLength;
            var index = options.suffix;
            var type = options.showCount;
            var key = options.type;
            var msgType = void 0 === key ? "text" : key;
            var verbose = options.inputClassName;
            var headers = get(options, EVENTS);
            var result = call(done(options.defaultValue, {
                value: options.value
            }), 2);
            var val = result[0];
            var $ = result[1];
            var group = call((0, React.useState)(false), 2);
            var last = group[0];
            var a = group[1];
            var data = (0, React.useRef)(null);
            /**
             * @param {!Object} func
             * @return {undefined}
             */
            var start = function (func) {
                if (data.current) {
                    (function (elem, obj) {
                        if (elem) {
                            elem.focus(obj);
                            var type = (obj || {}).cursor;
                            if (type) {
                                var pos = elem.value.length;
                                switch (type) {
                                    case "start":
                                        elem.setSelectionRange(0, 0);
                                        break;
                                    case "end":
                                        elem.setSelectionRange(pos, pos);
                                        break;
                                    default:
                                        elem.setSelectionRange(0, pos);
                                }
                            }
                        }
                    })(data.current, func);
                }
            };
            (0, React.useImperativeHandle)(n, function () {
                return {
                    focus: start,
                    blur: function () {
                        var current;
                        if (!(null === (current = data.current) || void 0 === current)) {
                            current.blur();
                        }
                    },
                    setSelectionRange: function (pos, start, end) {
                        var buffer;
                        if (!(null === (buffer = data.current) || void 0 === buffer)) {
                            buffer.setSelectionRange(pos, start, end);
                        }
                    },
                    select: function () {
                        var account;
                        if (!(null === (account = data.current) || void 0 === account)) {
                            account.select();
                        }
                    },
                    input: data.current
                };
            });
            (0, React.useEffect)(function () {
                a(function (canCreateDiscussions) {
                    return (!canCreateDiscussions || !disabled) && canCreateDiscussions;
                });
            }, [disabled]);
            /**
             * @param {?} value
             * @return {undefined}
             */
            var listener = function (value) {
                if (void 0 === options.value) {
                    $(value.target.value);
                }
                if (data.current) {
                    serialize(data.current, value, fn);
                }
            };
            /**
             * @param {!Event} e
             * @return {undefined}
             */
            var onKeyDown = function (e) {
                if (keyMatchesCommand && "Enter" === e.key) {
                    keyMatchesCommand(e);
                }
                if (!(null === orig_onKeyDown || void 0 === orig_onKeyDown)) {
                    orig_onKeyDown(e);
                }
            };
            /**
             * @param {?} t
             * @return {undefined}
             */
            var k = function (t) {
                a(true);
                if (!(null === g || void 0 === g)) {
                    g(t);
                }
            };
            /**
             * @param {?} e
             * @return {undefined}
             */
            var testPan = function (e) {
                a(false);
                if (!(null === expect || void 0 === expect)) {
                    expect(e);
                }
            };
            return React.createElement(process, assign(assign({}, headers), {}, {
                prefixCls: id,
                className: classes,
                inputElement: function () {
                    var oldOptions = apply(options, ["prefixCls", "onPressEnter", "addonBefore", "addonAfter", "prefix", "suffix", "allowClear", "defaultValue", "showCount", "affixWrapperClassName", "groupClassName", "inputClassName", "wrapperClassName", "htmlSize"]);
                    return React.createElement("input", assign(assign({
                        autoComplete: autoComplete
                    }, oldOptions), {}, {
                        onChange: listener,
                        onFocus: k,
                        onBlur: testPan,
                        onKeyDown: onKeyDown,
                        className: require()(id, debug({}, "".concat(id, "-disabled"), disabled), verbose, !renderInputGroup(options) && !processFile(options) && classes),
                        ref: data,
                        size: movement,
                        type: msgType
                    }));
                }(),
                handleReset: function (options) {
                    $("");
                    start();
                    if (data.current) {
                        serialize(data.current, options, fn);
                    }
                },
                value: copyObjectToDepth(val),
                focused: last,
                triggerFocus: start,
                suffix: function () {
                    /** @type {boolean} */
                    var DEBUG = Number(value) > 0;
                    if (index || type) {
                        var x = resolve(copyObjectToDepth(val)).length;
                        var indicators = "object" === stringify(type) ? type.formatter({
                            count: x,
                            maxLength: value
                        }) : "".concat(x).concat(DEBUG ? " / ".concat(value) : "");
                        return React.createElement(React.Fragment, null, !!type && React.createElement("span", {
                            className: require()("".concat(id, "-show-count-suffix"), debug({}, "".concat(id, "-show-count-has-suffix"), !!index))
                        }, indicators), index);
                    }
                    return null;
                }(),
                disabled: disabled
            }));
        });
        var FormattedMessage = _none_;
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var isObject = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var yo = (0, React.forwardRef)(function (options, obj) {
            var result;
            var illegalResult;
            var pornResult;
            var event = options.prefixCls;
            var engines = options.bordered;
            var enginePaths = void 0 === engines || engines;
            var type = options.status;
            var value = options.size;
            var disabled = options.disabled;
            var alert = options.onBlur;
            var action = options.onFocus;
            var end = options.suffix;
            var error = options.allowClear;
            var next = options.addonAfter;
            var previous = options.addonBefore;
            var inherited = isObject(options, ["prefixCls", "bordered", "status", "size", "disabled", "onBlur", "onFocus", "suffix", "allowClear", "addonAfter", "addonBefore"]);
            var element = React.useContext(object);
            var contains = element.getPrefixCls;
            var normal = element.direction;
            var name = element.input;
            var e = contains("input", event);
            var path = (0, React.useRef)(null);
            var _ = React.useContext(foobar);
            var max = value || _;
            var readOnly = React.useContext(readonly);
            var isDisabled = disabled || readOnly;
            var data = (0, React.useContext)(channel);
            var item = data.status;
            var start = data.hasFeedback;
            var s = data.feedbackIcon;
            var key = denormalize(item, type);
            var range = function (options) {
                return !!(options.prefix || options.suffix || options.allowClear);
            }(options) || !!start;
            var state = (0, React.useRef)(range);
            (0, React.useEffect)(function () {
                if (range) {
                    state.current;
                }
                state.current = range;
            }, [range]);
            var correction = (0, React.useRef)([]);
            /**
             * @return {undefined}
             */
            var render = function () {
                correction.current.push(window.setTimeout(function () {
                    var _ref;
                    var node;
                    var ref;
                    var options;
                    if ((null === (_ref = path.current) || void 0 === _ref ? void 0 : _ref.input) && "password" === (null === (node = path.current) || void 0 === node ? void 0 : node.input.getAttribute("type")) && (null === (ref = path.current) || void 0 === ref ? void 0 : ref.input.hasAttribute("value"))) {
                        if (!(null === (options = path.current) || void 0 === options)) {
                            options.input.removeAttribute("value");
                        }
                    }
                }));
            };
            (0, React.useEffect)(function () {
                return render(), function () {
                    return correction.current.forEach(function (oTime) {
                        return window.clearTimeout(oTime);
                    });
                };
            }, []);
            var levelMsg;
            var suffix = (start || end) && React.createElement(React.Fragment, null, end, start && s);
            return "object" === stringify(error) && (null === error || void 0 === error ? void 0 : error.clearIcon) ? levelMsg = error : error && (levelMsg = {
                clearIcon: React.createElement(v, null)
            }), React.createElement(FormattedMessage, _extends({
                ref: execute(obj, path),
                prefixCls: e,
                autoComplete: null === name || void 0 === name ? void 0 : name.autoComplete
            }, inherited, {
                disabled: isDisabled || void 0,
                onBlur: function (e) {
                    render();
                    if (!(null === alert || void 0 === alert)) {
                        alert(e);
                    }
                },
                onFocus: function (target) {
                    render();
                    if (!(null === action || void 0 === action)) {
                        action(target);
                    }
                },
                suffix: suffix,
                allowClear: levelMsg,
                addonAfter: next && React.createElement(space, {
                    override: true,
                    status: true
                }, next),
                addonBefore: previous && React.createElement(space, {
                    override: true,
                    status: true
                }, previous),
                inputClassName: require()((result = {}, debug(result, "".concat(e, "-sm"), "small" === max), debug(result, "".concat(e, "-lg"), "large" === max), debug(result, "".concat(e, "-rtl"), "rtl" === normal), debug(result, "".concat(e, "-borderless"), !enginePaths), result), !range && handle(e, key)),
                affixWrapperClassName: require()((illegalResult = {}, debug(illegalResult, "".concat(e, "-affix-wrapper-sm"), "small" === max), debug(illegalResult, "".concat(e, "-affix-wrapper-lg"), "large" === max), debug(illegalResult, "".concat(e, "-affix-wrapper-rtl"), "rtl" === normal), debug(illegalResult, "".concat(e, "-affix-wrapper-borderless"), !enginePaths), illegalResult), handle("".concat(e, "-affix-wrapper"), key, start)),
                wrapperClassName: require()(debug({}, "".concat(e, "-group-rtl"), "rtl" === normal)),
                groupClassName: require()((pornResult = {}, debug(pornResult, "".concat(e, "-group-wrapper-sm"), "small" === max), debug(pornResult, "".concat(e, "-group-wrapper-lg"), "large" === max), debug(pornResult, "".concat(e, "-group-wrapper-rtl"), "rtl" === normal), pornResult), handle("".concat(e, "-group-wrapper"), key, start))
            }));
        });
        var HorizontalScroller = yo;
        /**
         * @param {!Object} value
         * @param {!Array} result
         * @return {?}
         */
        var proxy = function (value, result) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && result.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (result.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var staticColumnDefs = React.forwardRef(function (options, derTrigger) {
            var pornResult;
            var end = options.prefixCls;
            var engines = options.bordered;
            var enginePaths = void 0 === engines || engines;
            var showCount = options.showCount;
            var err = void 0 !== showCount && showCount;
            var value = options.maxLength;
            var res = options.className;
            var textStyle = options.style;
            var shadowSize = options.size;
            var disabled = options.disabled;
            var d = options.onCompositionStart;
            var trigger = options.onCompositionEnd;
            var fn = options.onChange;
            var type = options.status;
            var args = proxy(options, ["prefixCls", "bordered", "showCount", "maxLength", "className", "style", "size", "disabled", "onCompositionStart", "onCompositionEnd", "onChange", "status"]);
            var def = React.useContext(object);
            var get = def.getPrefixCls;
            var currentDirection = def.direction;
            var _ = React.useContext(foobar);
            var readOnly = React.useContext(readonly);
            var isDisabled = disabled || readOnly;
            var data = React.useContext(channel);
            var item = data.status;
            var label = data.hasFeedback;
            var confWidth = data.isFormItemInput;
            var indicators = data.feedbackIcon;
            var key = denormalize(item, type);
            var obj = React.useRef(null);
            var fieldValueRef = React.useRef(null);
            var blue = call(React.useState(false), 2);
            var blueX = blue[0];
            var logDebug = blue[1];
            var connection = React.useRef();
            var that = React.useRef(0);
            var result = call(done(args.defaultValue, {
                value: args.value
            }), 2);
            var index = result[0];
            var handleDbError = result[1];
            var hidden = args.hidden;
            /**
             * @param {string} res
             * @param {!Array} t
             * @return {undefined}
             */
            var update = function (res, t) {
                if (void 0 === args.value) {
                    handleDbError(res);
                    if (!(null === t || void 0 === t)) {
                        t();
                    }
                }
            };
            /** @type {boolean} */
            var DEBUG = Number(value) > 0;
            var name = get("input", end);
            React.useImperativeHandle(derTrigger, function () {
                var old;
                return {
                    resizableTextArea: null === (old = obj.current) || void 0 === old ? void 0 : old.resizableTextArea,
                    focus: function (o) {
                        var old;
                        var me;
                        !function (elem, obj) {
                            if (elem) {
                                elem.focus(obj);
                                var type = (obj || {}).cursor;
                                if (type) {
                                    var pos = elem.value.length;
                                    switch (type) {
                                        case "start":
                                            elem.setSelectionRange(0, 0);
                                            break;
                                        case "end":
                                            elem.setSelectionRange(pos, pos);
                                            break;
                                        default:
                                            elem.setSelectionRange(0, pos);
                                    }
                                }
                            }
                        }(null === (me = null === (old = obj.current) || void 0 === old ? void 0 : old.resizableTextArea) || void 0 === me ? void 0 : me.textArea, o);
                    },
                    blur: function () {
                        var node;
                        return null === (node = obj.current) || void 0 === node ? void 0 : node.blur();
                    }
                };
            });
            var this_area = React.createElement(e, _extends({}, apply(args, ["allowClear"]), {
                disabled: isDisabled,
                className: require()((pornResult = {}, debug(pornResult, "".concat(name, "-borderless"), !enginePaths), debug(pornResult, res, res && !err), debug(pornResult, "".concat(name, "-sm"), "small" === _ || "small" === shadowSize), debug(pornResult, "".concat(name, "-lg"), "large" === _ || "large" === shadowSize), pornResult), handle(name, key)),
                style: err ? void 0 : textStyle,
                prefixCls: name,
                onCompositionStart: function (e) {
                    logDebug(true);
                    connection.current = index;
                    that.current = e.currentTarget.selectionStart;
                    if (!(null === d || void 0 === d)) {
                        d(e);
                    }
                },
                onChange: function (e) {
                    var res = e.target.value;
                    if (!blueX && DEBUG) {
                        res = setTimeout(e.target.selectionStart >= value + 1 || e.target.selectionStart === res.length || !e.target.selectionStart, index, res, value);
                    }
                    update(res);
                    cb(e.currentTarget, e, fn, res);
                },
                onCompositionEnd: function (e) {
                    var token;
                    logDebug(false);
                    var position = e.currentTarget.value;
                    if (DEBUG) {
                        position = setTimeout(that.current >= value + 1 || that.current === (null === (token = connection.current) || void 0 === token ? void 0 : token.length), connection.current, position, value);
                    }
                    if (position !== index) {
                        update(position);
                        cb(e.currentTarget, e, fn, position);
                    }
                    if (!(null === trigger || void 0 === trigger)) {
                        trigger(e);
                    }
                },
                ref: obj
            }));
            var state = function (obj) {
                return "undefined" === typeof obj || null === obj ? "" : String(obj);
            }(index);
            if (!(blueX || !DEBUG || null !== args.value && void 0 !== args.value)) {
                state = handler(state, value);
            }
            var i = React.createElement(FilterFormConcrete, _extends({
                disabled: isDisabled
            }, args, {
                prefixCls: name,
                direction: currentDirection,
                inputType: "text",
                value: state,
                element: this_area,
                handleReset: function (evt) {
                    var _ref;
                    var old;
                    var me;
                    update("");
                    if (!(null === (_ref = obj.current) || void 0 === _ref)) {
                        _ref.focus();
                    }
                    cb(null === (me = null === (old = obj.current) || void 0 === old ? void 0 : old.resizableTextArea) || void 0 === me ? void 0 : me.textArea, evt, fn);
                },
                ref: fieldValueRef,
                bordered: enginePaths,
                status: type,
                style: err ? void 0 : textStyle
            }));
            if (err || label) {
                var pornResult;
                var x = resolve(state).length;
                /** @type {string} */
                var t = "";
                return t = "object" === stringify(err) ? err.formatter({
                    count: x,
                    maxLength: value
                }) : "".concat(x).concat(DEBUG ? " / ".concat(value) : ""), React.createElement("div", {
                    hidden: hidden,
                    className: require()("".concat(name, "-textarea"), (pornResult = {}, debug(pornResult, "".concat(name, "-textarea-rtl"), "rtl" === currentDirection), debug(pornResult, "".concat(name, "-textarea-show-count"), err), debug(pornResult, "".concat(name, "-textarea-in-form-item"), confWidth), pornResult), handle("".concat(name, "-textarea"), key, label), res),
                    style: textStyle,
                    "data-count": t
                }, i, label && React.createElement("span", {
                    className: "".concat(name, "-textarea-suffix")
                }, indicators));
            }
            return i;
        });
        var columnDefs = staticColumnDefs;
        var processedItem = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                    }
                }]
            },
            name: "close",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} label
         * @return {?}
         */
        var display = function (context, label) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: label,
                icon: processedItem
            }));
        };
        /** @type {string} */
        display.displayName = "CloseOutlined";
        var span = React.forwardRef(display);
        var conf = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z"
                    }
                }]
            },
            name: "ellipsis",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} label
         * @return {?}
         */
        var record = function (context, label) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: label,
                icon: conf
            }));
        };
        /** @type {string} */
        record.displayName = "EllipsisOutlined";
        var member = React.forwardRef(record);
        var entry = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "defs",
                    attrs: {},
                    children: [{
                        tag: "style",
                        attrs: {}
                    }]
                }, {
                    tag: "path",
                    attrs: {
                        d: "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                    }
                }]
            },
            name: "plus",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} bar
         * @return {?}
         */
        var events = function (context, bar) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: bar,
                icon: entry
            }));
        };
        /** @type {string} */
        events.displayName = "PlusOutlined";
        var tr = React.forwardRef(events);
        /**
         * @return {?}
         */
        var detectBrowser = function () {
            if ("undefined" === typeof navigator || "undefined" === typeof window) {
                return false;
            }
            var s = navigator.userAgent || navigator.vendor || window.opera;
            return !(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(s) && !/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null ===
                s || void 0 === s ? void 0 : s.substr(0, 4)));
        };
        /**
         * @param {!Function} run
         * @return {?}
         */
        var step = function (run) {
            return +setTimeout(run, 16);
        };
        /**
         * @param {?} e
         * @return {?}
         */
        var close = function (e) {
            return clearTimeout(e);
        };
        if ("undefined" !== typeof window && "requestAnimationFrame" in window) {
            /**
             * @param {!Function} render
             * @return {?}
             */
            step = function (render) {
                return window.requestAnimationFrame(render);
            };
            /**
             * @param {?} id
             * @return {?}
             */
            close = function (id) {
                return window.cancelAnimationFrame(id);
            };
        }
        /** @type {number} */
        var cont = 0;
        /** @type {!Map} */
        var frame = new Map;
        /**
         * @param {?} index
         * @return {?}
         */
        $timeout.cancel = function (index) {
            var e = frame.get(index);
            return y(e), close(e);
        };
        var keyCode = {
            MAC_ENTER: 3,
            BACKSPACE: 8,
            TAB: 9,
            NUM_CENTER: 12,
            ENTER: 13,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            PAUSE: 19,
            CAPS_LOCK: 20,
            ESC: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            PRINT_SCREEN: 44,
            INSERT: 45,
            DELETE: 46,
            ZERO: 48,
            ONE: 49,
            TWO: 50,
            THREE: 51,
            FOUR: 52,
            FIVE: 53,
            SIX: 54,
            SEVEN: 55,
            EIGHT: 56,
            NINE: 57,
            QUESTION_MARK: 63,
            A: 65,
            B: 66,
            C: 67,
            D: 68,
            E: 69,
            F: 70,
            G: 71,
            H: 72,
            I: 73,
            J: 74,
            K: 75,
            L: 76,
            M: 77,
            N: 78,
            O: 79,
            P: 80,
            Q: 81,
            R: 82,
            S: 83,
            T: 84,
            U: 85,
            V: 86,
            W: 87,
            X: 88,
            Y: 89,
            Z: 90,
            META: 91,
            WIN_KEY_RIGHT: 92,
            CONTEXT_MENU: 93,
            NUM_ZERO: 96,
            NUM_ONE: 97,
            NUM_TWO: 98,
            NUM_THREE: 99,
            NUM_FOUR: 100,
            NUM_FIVE: 101,
            NUM_SIX: 102,
            NUM_SEVEN: 103,
            NUM_EIGHT: 104,
            NUM_NINE: 105,
            NUM_MULTIPLY: 106,
            NUM_PLUS: 107,
            NUM_MINUS: 109,
            NUM_PERIOD: 110,
            NUM_DIVISION: 111,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            NUMLOCK: 144,
            SEMICOLON: 186,
            DASH: 189,
            EQUALS: 187,
            COMMA: 188,
            PERIOD: 190,
            SLASH: 191,
            APOSTROPHE: 192,
            SINGLE_QUOTE: 222,
            OPEN_SQUARE_BRACKET: 219,
            BACKSLASH: 220,
            CLOSE_SQUARE_BRACKET: 221,
            WIN_KEY: 224,
            MAC_FF_META: 224,
            WIN_IME: 229,
            isTextModifyingKeyEvent: function (e) {
                var key = e.keyCode;
                if (e.altKey && !e.ctrlKey || e.metaKey || key >= keyCode.F1 && key <= keyCode.F12) {
                    return false;
                }
                switch (key) {
                    case keyCode.ALT:
                    case keyCode.CAPS_LOCK:
                    case keyCode.CONTEXT_MENU:
                    case keyCode.CTRL:
                    case keyCode.DOWN:
                    case keyCode.END:
                    case keyCode.ESC:
                    case keyCode.HOME:
                    case keyCode.INSERT:
                    case keyCode.LEFT:
                    case keyCode.MAC_FF_META:
                    case keyCode.META:
                    case keyCode.NUMLOCK:
                    case keyCode.NUM_CENTER:
                    case keyCode.PAGE_DOWN:
                    case keyCode.PAGE_UP:
                    case keyCode.PAUSE:
                    case keyCode.PRINT_SCREEN:
                    case keyCode.RIGHT:
                    case keyCode.SHIFT:
                    case keyCode.UP:
                    case keyCode.WIN_KEY:
                    case keyCode.WIN_KEY_RIGHT:
                        return false;
                    default:
                        return true;
                }
            },
            isCharacterKey: function (k) {
                if (k >= keyCode.ZERO && k <= keyCode.NINE) {
                    return true;
                }
                if (k >= keyCode.NUM_ZERO && k <= keyCode.NUM_MULTIPLY) {
                    return true;
                }
                if (k >= keyCode.A && k <= keyCode.Z) {
                    return true;
                }
                if (-1 !== window.navigator.userAgent.indexOf("WebKit") && 0 === k) {
                    return true;
                }
                switch (k) {
                    case keyCode.SPACE:
                    case keyCode.QUESTION_MARK:
                    case keyCode.NUM_PLUS:
                    case keyCode.NUM_MINUS:
                    case keyCode.NUM_PERIOD:
                    case keyCode.NUM_DIVISION:
                    case keyCode.SEMICOLON:
                    case keyCode.DASH:
                    case keyCode.EQUALS:
                    case keyCode.COMMA:
                    case keyCode.PERIOD:
                    case keyCode.SLASH:
                    case keyCode.APOSTROPHE:
                    case keyCode.SINGLE_QUOTE:
                    case keyCode.OPEN_SQUARE_BRACKET:
                    case keyCode.BACKSLASH:
                    case keyCode.CLOSE_SQUARE_BRACKET:
                        return true;
                    default:
                        return false;
                }
            }
        };
        var key = keyCode;
        var SettingsGridSectionBulkActionsFieldset = React.forwardRef(bind);
        var location = {
            width: 0,
            height: 0,
            left: 0,
            top: 0
        };
        var bb = {
            width: 0,
            height: 0,
            left: 0,
            top: 0,
            right: 0
        };
        /** @type {!Array} */
        var DATA_PREVIEW = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
        var active = void 0;
        var DraggableCore = React.forwardRef(renderItem);
        /** @type {string} */
        DraggableCore.displayName = "Item";
        var IndexRoute = DraggableCore;
        /** @type {!Array} */
        var args = ["component"];
        /** @type {!Array} */
        var url = ["className"];
        /** @type {!Array} */
        var leader = ["className"];
        /**
         * @param {!Object} options
         * @param {string} error
         * @return {?}
         */
        var a = function (options, error) {
            var view = React.useContext(opts);
            if (!view) {
                var parent = options.component;
                var el = void 0 === parent ? "div" : parent;
                var result = get(options, args);
                return React.createElement(el, _extends({}, result, {
                    ref: error
                }));
            }
            var key = view.className;
            var result = get(view, url);
            var classes = options.className;
            var data = get(options, leader);
            return React.createElement(opts.Provider, {
                value: null
            }, React.createElement(IndexRoute, _extends({
                ref: error,
                className: require()(key, classes)
            }, result, data)));
        };
        var _ref_a = React.forwardRef(a);
        /** @type {string} */
        _ref_a.displayName = "RawItem";
        var itemType = _ref_a;
        /** @type {!Array} */
        var reserved = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
        var opts = React.createContext(null);
        /** @type {string} */
        var count = "responsive";
        /** @type {string} */
        var middle = "invalidate";
        var label = React.forwardRef(check);
        /** @type {string} */
        label.displayName = "Overflow";
        label.Item = itemType;
        /** @type {string} */
        label.RESPONSIVE = count;
        /** @type {string} */
        label.INVALIDATE = middle;
        var View = label;
        /** @type {!Array} */
        var direction = ["children", "locked"];
        var componentName = React.createContext(null);
        /** @type {!Array} */
        var x = ["item"];
        /** @type {!Array} */
        var executionContext = [];
        var children = React.createContext(null);
        var scripts = React.createContext(executionContext);
        var renderer = React.createContext(null);
        var obj = React.createContext(null);
        var spec = React.createContext({});
        /** @type {!Array} */
        var items = ["title", "attribute", "elementRef"];
        /** @type {!Array} */
        var attributes = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"];
        /** @type {!Array} */
        var words = ["active"];
        var GridFilter = function (name) {
            /**
             * @return {?}
             */
            function n() {
                return log(this, n), f.apply(this, arguments);
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "render",
                value: function () {
                    var p = this.props;
                    var title = p.title;
                    var item = p.attribute;
                    var child = p.elementRef;
                    var spy = apply(get(p, items), ["eventKey"]);
                    return assert(!item, "`attribute` of Menu.Item is deprecated. Please pass attribute directly."), React.createElement(View.Item, _extends({}, item, {
                        title: "string" === typeof title ? title : void 0
                    }, spy, {
                        ref: child
                    }));
                }
            }]), n;
        }(React.Component);
        /**
         * @param {!Object} _ref
         * @return {?}
         */
        var _loop = function (_ref) {
            var e;
            var style = _ref.style;
            var className = _ref.className;
            var key = _ref.eventKey;
            var original = (_ref.warnKey, _ref.disabled);
            var cusCache = _ref.itemIcon;
            var n = _ref.children;
            var widget = _ref.role;
            var args = _ref.onMouseEnter;
            var onMouseLeave = _ref.onMouseLeave;
            var onClick = _ref.onClick;
            var onKeyDown = _ref.onKeyDown;
            var onFocus = _ref.onFocus;
            var attrs = get(_ref, attributes);
            var data = trim(key);
            var options = React.useContext(componentName);
            var _name = options.prefixCls;
            var generateBoundHandler = options.onItemClick;
            var lineColor = options.disabled;
            var limit = options.overflowDisabled;
            var engines = options.itemIcon;
            var PROHIBITED_ATTRS = options.selectedKeys;
            var action = options.onActive;
            var search = React.useContext(spec)._internalRenderMenuItem;
            /** @type {string} */
            var id = "".concat(_name, "-item");
            var result = React.useRef();
            var j = React.useRef();
            var size = lineColor || original;
            var event = dispatch(key);
            /**
             * @param {!Object} e
             * @return {?}
             */
            var callback = function (e) {
                return {
                    key: key,
                    keyPath: resolve(event).reverse(),
                    item: result.current,
                    domEvent: e
                };
            };
            var enginePaths = cusCache || engines;
            var params = destroy(key, size, args, onMouseLeave);
            var i = params.active;
            var state = get(params, words);
            var value = PROHIBITED_ATTRS.includes(key);
            var dsl = setPosition(event.length);
            var spy = {};
            if ("option" === _ref.role) {
                spy["aria-selected"] = value;
            }
            var t = React.createElement(GridFilter, _extends({
                ref: result,
                elementRef: j,
                role: null === widget ? "none" : widget || "menuitem",
                tabIndex: original ? null : -1,
                "data-menu-id": limit && data ? null : data
            }, attrs, state, spy, {
                component: "li",
                "aria-disabled": original,
                style: assign(assign({}, dsl), style),
                className: require()(id, (e = {}, debug(e, "".concat(id, "-active"), i), debug(e, "".concat(id, "-selected"), value), debug(e, "".concat(id, "-disabled"), size), e), className),
                onClick: function (e) {
                    if (!size) {
                        var id = callback(e);
                        if (!(null === onClick || void 0 === onClick)) {
                            onClick(updateArticleComments(id));
                        }
                        generateBoundHandler(id);
                    }
                },
                onKeyDown: function (e) {
                    if (null === onKeyDown || void 0 === onKeyDown || onKeyDown(e), e.which === key.ENTER) {
                        var id = callback(e);
                        if (!(null === onClick || void 0 === onClick)) {
                            onClick(updateArticleComments(id));
                        }
                        generateBoundHandler(id);
                    }
                },
                onFocus: function (element) {
                    action(key);
                    if (!(null === onFocus || void 0 === onFocus)) {
                        onFocus(element);
                    }
                }
            }), n, React.createElement(Component, {
                props: assign(assign({}, _ref), {}, {
                    isSelected: value
                }),
                icon: enginePaths
            }));
            return search && (t = search(t, _ref, {
                selected: value
            })), t;
        };
        /**
         * @param {!Object} props
         * @return {?}
         */
        var Item = function (props) {
            var key = props.eventKey;
            var _this = _possibleConstructorReturn();
            var listeners = dispatch(key);
            return React.useEffect(function () {
                if (_this) {
                    return _this.registerPath(key, listeners), function () {
                        _this.unregisterPath(key, listeners);
                    };
                }
            }, [listeners]), _this ? null : React.createElement(_loop, props);
        };
        /** @type {!Array} */
        var fields = ["label", "children", "key", "type"];
        /** @type {!Array} */
        var names = ["className", "children"];
        /**
         * @param {!Object} dom
         * @param {string} layer
         * @return {?}
         */
        var Layer = function (dom, layer) {
            var tableViewClassName = dom.className;
            var rows = dom.children;
            var result = get(dom, names);
            var that = React.useContext(componentName);
            var opt = that.prefixCls;
            var type = that.mode;
            var isRtl = that.rtl;
            return React.createElement("ul", _extends({
                className: require()(opt, isRtl && "".concat(opt, "-rtl"), "".concat(opt, "-sub"), "".concat(opt, "-").concat("inline" === type ? "inline" : "vertical"), tableViewClassName)
            }, result, {
                "data-menu-list": true,
                ref: layer
            }), rows);
        };
        var layer = React.forwardRef(Layer);
        /** @type {string} */
        layer.displayName = "SubMenuList";
        var CalendarHeader = layer;
        var core_user_remove_user_device = (0, React.forwardRef)(function (t, n) {
            var r = t.didUpdate;
            var p = t.getContainer;
            var a = t.children;
            var template = (0, React.useRef)();
            var b = (0, React.useRef)();
            (0, React.useImperativeHandle)(n, function () {
                return {};
            });
            var timestampGenerator = (0, React.useRef)(false);
            return !timestampGenerator.current && translate() && (b.current = p(), template.current = b.current.parentNode, timestampGenerator.current = true), (0, React.useEffect)(function () {
                if (!(null === r || void 0 === r)) {
                    r(t);
                }
            }), (0, React.useEffect)(function () {
                return null === b.current.parentNode && null !== template.current && template.current.appendChild(b.current), function () {
                    var _ref;
                    var p;
                    if (!(null === (_ref = b.current) || void 0 === _ref || null === (p = _ref.parentNode) || void 0 === p)) {
                        p.removeChild(b.current);
                    }
                };
            }, []), b.current ? d.createPortal(a, b.current) : null;
        });
        var wsFunction = core_user_remove_user_device;
        var rawActivityEntry = function (isSlidingUp, canCreateDiscussions) {
            var EVENT_NAME_MAP = {
                animationend: prefixedEvent("Animation", "AnimationEnd"),
                transitionend: prefixedEvent("Transition", "TransitionEnd")
            };
            return isSlidingUp && ("AnimationEvent" in canCreateDiscussions || delete EVENT_NAME_MAP.animationend.animation, "TransitionEvent" in canCreateDiscussions || delete EVENT_NAME_MAP.transitionend.transition), EVENT_NAME_MAP;
        }(translate(), "undefined" !== typeof window ? window : {});
        var current = {};
        if (translate()) {
            /** @type {!Element} */
            var div = document.createElement("div");
            /** @type {!CSSStyleDeclaration} */
            current = div.style;
        }
        var kwargs = {};
        var animEnd = createCallbackWithStatements("animationend");
        var transitionEnd = createCallbackWithStatements("transitionend");
        /** @type {boolean} */
        var legitError = !(!animEnd || !transitionEnd);
        var globalEventOff = animEnd || "animationend";
        var event = transitionEnd || "transitionend";
        /** @type {string} */
        var undefined = "none";
        /** @type {string} */
        var latex = "appear";
        /** @type {string} */
        var upload = "enter";
        /** @type {string} */
        var system = "leave";
        /** @type {string} */
        var id = "none";
        /** @type {string} */
        var selector = "prepare";
        /** @type {string} */
        var i = "start";
        /** @type {string} */
        var className = "active";
        /** @type {string} */
        var th = "end";
        var spawn = translate() ? React.useLayoutEffect : React.useEffect;
        /** @type {!Array} */
        var params = [selector, i, className, th];
        /**
         * @param {?} type
         * @param {!Function} fn
         * @return {?}
         */
        var activate = function (type, fn) {
            var res = call(attr(id), 2);
            var name = res[0];
            var html = res[1];
            var i = function () {
                /**
                 * @return {undefined}
                 */
                function callback() {
                    $timeout.cancel(scope.current);
                }
                var scope = React.useRef(null);
                return React.useEffect(function () {
                    return function () {
                        callback();
                    };
                }, []), [function resolve(shape) {
                    var o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                    callback();
                    var index = $timeout(function () {
                        if (o <= 1) {
                            shape({
                                isCanceled: function () {
                                    return index !== scope.current;
                                }
                            });
                        } else {
                            resolve(shape, o - 1);
                        }
                    });
                    scope.current = index;
                }, callback];
            }();
            var group = call(i, 2);
            var next = group[0];
            var low = group[1];
            return spawn(function () {
                if (name !== id && name !== th) {
                    /** @type {number} */
                    var s = params.indexOf(name);
                    var parent = params[s + 1];
                    var matches = fn(name);
                    if (false === matches) {
                        html(parent, true);
                    } else {
                        next(function (all) {
                            /**
                             * @return {undefined}
                             */
                            function connected() {
                                if (!all.isCanceled()) {
                                    html(parent, true);
                                }
                            }
                            if (true === matches) {
                                connected();
                            } else {
                                Promise.resolve(matches).then(connected);
                            }
                        });
                    }
                }
            }, [type, name]), React.useEffect(function () {
                return function () {
                    low();
                };
            }, []), [function () {
                html(selector, true);
            }, name];
        };
        var testView1 = function (name) {
            /**
             * @return {?}
             */
            function n() {
                return log(this, n), f.apply(this, arguments);
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "render",
                value: function () {
                    return this.props.children;
                }
            }]), n;
        }(React.Component);
        var GridRowContainer = testView1;
        var Ii = function (err) {
            /**
             * @param {!Object} options
             * @return {?}
             */
            function precompile(options) {
                return !(!options.motionName || !useErr);
            }
            /** @type {boolean} */
            var useErr = err;
            if ("object" === stringify(err)) {
                useErr = err.transitionSupport;
            }
            var LocalStorageComponent = React.forwardRef(function (options, val) {
                var fallback = options.visible;
                var data = void 0 === fallback || fallback;
                var engines = options.removeOnLeave;
                var errorDuringDataProjection = void 0 === engines || engines;
                var filter = options.forceRender;
                var expect = options.children;
                var path = options.motionName;
                var tableClass = options.leavedClassName;
                var schema = options.eventProps;
                var fn = precompile(options);
                var params = (0, React.useRef)();
                var editor = (0, React.useRef)();
                var group = call(link(fn, data, function () {
                    try {
                        return params.current instanceof HTMLElement ? params.current : u(editor.current);
                    } catch (Ic) {
                        return null;
                    }
                }, options), 4);
                var key = group[0];
                var type = group[1];
                var item = group[2];
                var node = group[3];
                var point = React.useRef(node);
                if (node) {
                    /** @type {boolean} */
                    point.current = true;
                }
                var value;
                var result = React.useCallback(function (newSize) {
                    /** @type {string} */
                    params.current = newSize;
                    onComplete(val, newSize);
                }, [val]);
                var headers = assign(assign({}, schema), {}, {
                    visible: data
                });
                if (expect) {
                    if (key !== undefined && precompile(options)) {
                        var e;
                        var i;
                        if (type === selector) {
                            /** @type {string} */
                            i = "prepare";
                        } else {
                            if (isDefined(type)) {
                                /** @type {string} */
                                i = "active";
                            } else {
                                if (type === i) {
                                    /** @type {string} */
                                    i = "start";
                                }
                            }
                        }
                        value = expect(assign(assign({}, headers), {}, {
                            className: require()(replacer(path, key), (e = {}, debug(e, replacer(path, "".concat(key, "-").concat(i)), i), debug(e, path, "string" === typeof path), e)),
                            style: item
                        }), result);
                    } else {
                        value = node ? expect(assign({}, headers), result) : !errorDuringDataProjection && point.current ? expect(assign(assign({}, headers), {}, {
                            className: tableClass
                        }), result) : filter ? expect(assign(assign({}, headers), {}, {
                            style: {
                                display: "none"
                            }
                        }), result) : null;
                    }
                } else {
                    /** @type {null} */
                    value = null;
                }
                if (React.isValidElement(value) && isFunction(value)) {
                    if (!value.ref) {
                        value = React.cloneElement(value, {
                            ref: result
                        });
                    }
                }
                return React.createElement(GridRowContainer, {
                    ref: editor
                }, value);
            });
            return LocalStorageComponent.displayName = "CSSMotion", LocalStorageComponent;
        }(legitError);
        /** @type {string} */
        var mode = "add";
        /** @type {string} */
        var string = "keep";
        /** @type {string} */
        var status = "remove";
        /** @type {string} */
        var COMPLETE = "removed";
        /** @type {!Array} */
        var cursor = ["component", "children", "onVisibleChanged", "onAllRemoved"];
        /** @type {!Array} */
        var line = ["status"];
        /** @type {!Array} */
        var newFields = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
        var AddTodo = function (err) {
            var TabTemplate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ii;
            var Route = function (name) {
                /**
                 * @return {?}
                 */
                function n() {
                    var self;
                    log(this, n);
                    /** @type {number} */
                    var k = arguments.length;
                    /** @type {!Array} */
                    var e = new Array(k);
                    /** @type {number} */
                    var i = 0;
                    for (; i < k; i++) {
                        e[i] = arguments[i];
                    }
                    return (self = x.call.apply(x, [this].concat(e))).state = {
                        keyEntities: []
                    }, self.removeKey = function (id) {
                        var eCfgEl = self.state.keyEntities.map(function (fetch) {
                            return fetch.key !== id ? fetch : assign(assign({}, fetch), {}, {
                                status: COMPLETE
                            });
                        });
                        return self.setState({
                            keyEntities: eCfgEl
                        }), eCfgEl.filter(function (xhr) {
                            return xhr.status !== COMPLETE;
                        }).length;
                    }, self;
                }
                compile(n, name);
                var x = fn(n);
                return g(n, [{
                    key: "render",
                    value: function () {
                        var self = this;
                        var wordsByLines = this.state.keyEntities;
                        var props = this.props;
                        var time = props.component;
                        var i = props.children;
                        var next = props.onVisibleChanged;
                        var isPristine = props.onAllRemoved;
                        var state = get(props, cursor);
                        var TabTemplate = time || React.Fragment;
                        var item = {};
                        return newFields.forEach(function (key) {
                            item[key] = state[key];
                            delete state[key];
                        }), delete state.keys, React.createElement(TabTemplate, state, wordsByLines.map(function (file) {
                            var type = file.status;
                            var field = get(file, line);
                            /** @type {boolean} */
                            var selected = type === mode || type === string;
                            return React.createElement(TabTemplate, _extends({}, item, {
                                key: field.key,
                                visible: selected,
                                eventProps: field,
                                onVisibleChanged: function (callback) {
                                    if (!(null === next || void 0 === next || next(callback, {
                                        key: field.key
                                    }), callback)) {
                                        if (0 === self.removeKey(field.key) && isPristine) {
                                            isPristine();
                                        }
                                    }
                                }
                            }), i);
                        }));
                    }
                }], [{
                    key: "getDerivedStateFromProps",
                    value: function (obj, value) {
                        var body = obj.keys;
                        var count = value.keyEntities;
                        var $list = querySelector(body);
                        return {
                            keyEntities: tick(count, $list).filter(function (res) {
                                var self = count.find(function (dto) {
                                    var id = dto.key;
                                    return res.key === id;
                                });
                                return !self || self.status !== COMPLETE || res.status !== status;
                            })
                        };
                    }
                }]), n;
            }(React.Component);
            return Route.defaultProps = {
                component: "div"
            }, Route;
        }(legitError);
        var PatchItem = Ii;
        var vars;
        /**
         * @param {!Element} el
         * @return {?}
         */
        var isElementVisible = function (el) {
            if (!el) {
                return false;
            }
            if (el.offsetParent) {
                return true;
            }
            if (el.getBBox) {
                var _childCoords = el.getBBox();
                if (_childCoords.width || _childCoords.height) {
                    return true;
                }
            }
            if (el.getBoundingClientRect) {
                var _childCoords = el.getBoundingClientRect();
                if (_childCoords.width || _childCoords.height) {
                    return true;
                }
            }
            return false;
        };
        var vendors = {
            Webkit: "-webkit-",
            Moz: "-moz-",
            ms: "-ms-",
            O: "-o-"
        };
        var css;
        /** @type {!RegExp} */
        var REkey = /matrix\((.*)\)/;
        /** @type {!RegExp} */
        var coffeeExt = /matrix3d\((.*)\)/;
        /** @type {!RegExp} */
        var inlineAttributeCommentRegex = new RegExp("^(".concat(/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source, ")(?!px)[a-z%]+$"), "i");
        /** @type {!RegExp} */
        var testRxp = /^(top|right|bottom|left)$/;
        if ("undefined" !== typeof window) {
            /** @type {!Function} */
            css = window.getComputedStyle ? function (elem, name, current) {
                /** @type {!Object} */
                var computed = current;
                /** @type {string} */
                var th_field = "";
                var doc = getDocument(elem);
                return (computed = computed || doc.defaultView.getComputedStyle(elem, null)) && (th_field = computed.getPropertyValue(name) || computed[name]), th_field;
            } : function (element, name) {
                var val = element.currentStyle && element.currentStyle[name];
                if (inlineAttributeCommentRegex.test(val) && !testRxp.test(name)) {
                    var s = element.style;
                    var l = s.left;
                    var rStyle = element.runtimeStyle.left;
                    element.runtimeStyle.left = element.currentStyle.left;
                    s.left = "fontSize" === name ? "1em" : val || 0;
                    /** @type {string} */
                    val = s.pixelLeft + "px";
                    s.left = l;
                    element.runtimeStyle.left = rStyle;
                }
                return "" === val ? "auto" : val;
            };
        }
        /** @type {!Array} */
        var class_names = ["margin", "border", "padding"];
        var arr = {
            getParent: function (object) {
                /** @type {!Element} */
                var parent = object;
                do {
                    parent = 11 === parent.nodeType && parent.host ? parent.host : parent.parentNode;
                } while (parent && 1 !== parent.nodeType && 9 !== parent.nodeType);
                return parent;
            }
        };
        keySet(["Width", "Height"], function (i) {
            /**
             * @param {!Window} docHolder
             * @return {?}
             */
            arr["doc".concat(i)] = function (docHolder) {
                var doc = docHolder.document;
                return Math.max(doc.documentElement["scroll".concat(i)], doc.body["scroll".concat(i)], arr["viewport".concat(i)](doc));
            };
            /**
             * @param {!Window} docHolder
             * @return {?}
             */
            arr["viewport".concat(i)] = function (docHolder) {
                /** @type {string} */
                var type = "client".concat(i);
                var doc = docHolder.document;
                var body = doc.body;
                var d = doc.documentElement[type];
                return "CSS1Compat" === doc.compatMode && d || body && body[type] || d;
            };
        });
        var tmp = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        };
        keySet(["width", "height"], function (id) {
            var style = id.charAt(0).toUpperCase() + id.slice(1);
            /**
             * @param {?} timeout_id
             * @param {boolean} n
             * @return {?}
             */
            arr["outer".concat(style)] = function (timeout_id, n) {
                return timeout_id && clearTimeout(timeout_id, id, n ? 0 : 1);
            };
            /** @type {!Array} */
            var win = "width" === id ? ["Left", "Right"] : ["Top", "Bottom"];
            /**
             * @param {string} elem
             * @param {string} hilo
             * @return {?}
             */
            arr[id] = function (elem, hilo) {
                /** @type {string} */
                var value = hilo;
                return void 0 !== value ? elem ? (getWidthOrHeight(elem) && (value = value + getComputedStyle(elem, ["padding", "border"], win)), setStyle(elem, id, value)) : void 0 : elem && clearTimeout(elem, id, -1);
            };
        });
        var me = {
            getWindow: function (obj) {
                if (obj && obj.document && obj.setTimeout) {
                    return obj;
                }
                var document = obj.ownerDocument || obj;
                return document.defaultView || document.parentWindow;
            },
            getDocument: getDocument,
            offset: function (element, count, data) {
                if ("undefined" === typeof count) {
                    return offset(element);
                }
                !function (parent, value, backgroundColor) {
                    if (backgroundColor.ignoreShake) {
                        var position = offset(parent);
                        var o = position.left.toFixed(0);
                        var s = position.top.toFixed(0);
                        var obj1 = value.left.toFixed(0);
                        var sel = value.top.toFixed(0);
                        if (o === obj1 && s === sel) {
                            return;
                        }
                    }
                    if (backgroundColor.useCssRight || backgroundColor.useCssBottom) {
                        getStyle(parent, value, backgroundColor);
                    } else {
                        if (backgroundColor.useCssTransform && scale() in document.body.style) {
                            resize(parent, value);
                        } else {
                            getStyle(parent, value, backgroundColor);
                        }
                    }
                }(element, count, data || {});
            },
            isWindow: isWindow,
            each: keySet,
            css: setStyle,
            clone: function (result) {
                var index;
                var json = {};
                for (index in result) {
                    if (result.hasOwnProperty(index)) {
                        json[index] = result[index];
                    }
                }
                if (result.overflow) {
                    for (index in result) {
                        if (result.hasOwnProperty(index)) {
                            json.overflow[index] = result.overflow[index];
                        }
                    }
                }
                return json;
            },
            mix: _,
            getWindowScrollLeft: function (loc) {
                return toNumber(loc);
            },
            getWindowScrollTop: function (val) {
                return num(val);
            },
            merge: function () {
                var mixin = {};
                /** @type {number} */
                var index = 0;
                for (; index < arguments.length; index++) {
                    me.mix(mixin, index < 0 || arguments.length <= index ? void 0 : arguments[index]);
                }
                return mixin;
            },
            viewportWidth: 0,
            viewportHeight: 0
        };
        _(me, arr);
        var getParent = me.getParent;
        var str = me.getParent;
        /** @type {function(!Element): ?} */
        bindEvents.__getOffsetParent = getOffsetParent;
        /** @type {function(!Element, string): ?} */
        bindEvents.__getVisibleRectForElement = move;
        var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__ = __webpack_require__(8111);
        var countNewLineCharacters = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__);
        /**
         * @param {!Object} node
         * @param {!Function} n
         * @return {?}
         */
        var update = function (node, n) {
            var children = node.children;
            var isDisabled = node.disabled;
            var data = node.target;
            var align = node.align;
            var locStrokeShadowOffsetY = node.onAlign;
            var layerOrientation = node.monitorWindowResize;
            var key = node.monitorBufferTime;
            var elName = void 0 === key ? 0 : key;
            var state = React.useRef({});
            var path = React.useRef();
            var value = React.Children.only(children);
            var config = React.useRef({});
            config.current.disabled = isDisabled;
            config.current.target = data;
            config.current.align = align;
            config.current.onAlign = locStrokeShadowOffsetY;
            var filterParser = function (setTimeout, name) {
                /**
                 * @return {undefined}
                 */
                function remove() {
                    window.clearTimeout(that.current);
                }
                var _this2 = React.useRef(false);
                var that = React.useRef(null);
                return [function add(emitter) {
                    if (remove(), _this2.current && true !== emitter) {
                        that.current = window.setTimeout(function () {
                            /** @type {boolean} */
                            _this2.current = false;
                            add();
                        }, name);
                    } else {
                        if (false === setTimeout()) {
                            return;
                        }
                        /** @type {boolean} */
                        _this2.current = true;
                        that.current = window.setTimeout(function () {
                            /** @type {boolean} */
                            _this2.current = false;
                        }, name);
                    }
                }, function () {
                    /** @type {boolean} */
                    _this2.current = false;
                    remove();
                }];
            }(function () {
                var data = config.current;
                var err = data.disabled;
                var e = data.target;
                var value = data.align;
                var prop = data.onAlign;
                if (!err && e) {
                    var val;
                    var p = path.current;
                    var el = findOrCreate(e);
                    var data = formatError(e);
                    state.current.element = el;
                    state.current.point = data;
                    state.current.align = value;
                    var active_element = document.activeElement;
                    return el && isElementVisible(el) ? val = bindEvents(p, el, value) : data && (val = function (el, event, obj) {
                        var curX;
                        var yInt;
                        var doc = me.getDocument(el);
                        var value = doc.defaultView || doc.parentWindow;
                        var x = me.getWindowScrollLeft(value);
                        var y = me.getWindowScrollTop(value);
                        var radius = me.viewportWidth(value);
                        var h = me.viewportHeight(value);
                        var rect = {
                            left: curX = "pageX" in event ? event.pageX : x + event.clientX,
                            top: yInt = "pageY" in event ? event.pageY : y + event.clientY,
                            width: 0,
                            height: 0
                        };
                        /** @type {boolean} */
                        var frameBuffer = curX >= 0 && curX <= x + radius && yInt >= 0 && yInt <= y + h;
                        /** @type {!Array} */
                        var keys = [obj.points[0], "cc"];
                        return draw(el, rect, mix(mix({}, obj), {}, {
                            points: keys
                        }), frameBuffer);
                    }(p, data, value)), function (element, value) {
                        if (element !== document.activeElement && contains(value, element) && "function" === typeof element.focus) {
                            element.focus();
                        }
                    }(active_element, p), prop && val && prop(p, val), true;
                }
                return false;
            }, elName);
            var result = call(filterParser, 2);
            var callback = result[0];
            var countNewLineCharacters = result[1];
            var F = React.useRef({
                cancel: function () {
                }
            });
            var self = React.useRef({
                cancel: function () {
                }
            });
            React.useEffect(function () {
                var touch;
                var event;
                var el = findOrCreate(data);
                var message = formatError(data);
                if (path.current !== self.current.element) {
                    self.current.cancel();
                    self.current.element = path.current;
                    self.current.cancel = on(path.current, callback);
                }
                if (!(state.current.element === el && ((touch = state.current.point) === (event = message) || touch && event && ("pageX" in event && "pageY" in event ? touch.pageX === event.pageX && touch.pageY === event.pageY : "clientX" in event && "clientY" in event && touch.clientX === event.clientX && touch.clientY === event.clientY)) && countNewLineCharacters()(state.current.align, align))) {
                    callback();
                    if (F.current.element !== el) {
                        F.current.cancel();
                        F.current.element = el;
                        F.current.cancel = on(el, callback);
                    }
                }
            });
            React.useEffect(function () {
                if (isDisabled) {
                    countNewLineCharacters();
                } else {
                    callback();
                }
            }, [isDisabled]);
            var that = React.useRef(null);
            return React.useEffect(function () {
                if (layerOrientation) {
                    if (!that.current) {
                        that.current = addEvent(window, "resize", callback);
                    }
                } else {
                    if (that.current) {
                        that.current.remove();
                        /** @type {null} */
                        that.current = null;
                    }
                }
            }, [layerOrientation]), React.useEffect(function () {
                return function () {
                    F.current.cancel();
                    self.current.cancel();
                    if (that.current) {
                        that.current.remove();
                    }
                    countNewLineCharacters();
                };
            }, []), React.useImperativeHandle(n, function () {
                return {
                    forceAlign: function () {
                        return callback(true);
                    }
                };
            }), React.isValidElement(value) && (value = React.cloneElement(value, {
                ref: execute(value.ref, path)
            })), value;
        };
        var Align = React.forwardRef(update);
        /** @type {string} */
        Align.displayName = "Align";
        var CreateUserSettingFieldset = Align;
        /** @type {!Array} */
        var left = ["measure", "alignPre", "align", null, "motion"];
        var searchResultPerson = React.forwardRef(function (me, c) {
            /**
             * @return {undefined}
             */
            function createNewMeasurement() {
                var _ref;
                if (!(null === (_ref = _this.current) || void 0 === _ref)) {
                    _ref.forceAlign();
                }
            }
            /**
             * @param {string} mirror
             * @param {!Object} el
             * @return {undefined}
             */
            function init(mirror, el) {
                var end = onEvt(el);
                if (start !== end) {
                    item(end);
                }
                itersortfunc(function (canCreateDiscussions) {
                    return canCreateDiscussions + 1;
                });
                if ("align" === undefined) {
                    if (!(null === offset || void 0 === offset)) {
                        offset(mirror, el);
                    }
                }
            }
            /**
             * @return {?}
             */
            function resolveFiber() {
                return new Promise(function (match) {
                    options.current = match;
                });
            }
            var selected = me.visible;
            var key = me.prefixCls;
            var keys = me.className;
            var seriesStyle = me.style;
            var children = me.children;
            var zIndex = me.zIndex;
            var min = me.stretch;
            var toolsElement = me.destroyPopupOnHide;
            var forceRender = me.forceRender;
            var a = me.align;
            var target = me.point;
            var event = me.getRootDomNode;
            var onEvt = me.getClassNameFromAlign;
            var offset = me.onAlign;
            var onMouseEnter = me.onMouseEnter;
            var onMouseLeave = me.onMouseLeave;
            var onMouseDown = me.onMouseDown;
            var onTouchStart = me.onTouchStart;
            var onClick = me.onClick;
            var _this = (0, React.useRef)();
            var editor = (0, React.useRef)();
            var group = call((0, React.useState)(), 2);
            var start = group[0];
            var item = group[1];
            var x = function (m) {
                var group = call(React.useState({
                    width: 0,
                    height: 0
                }), 2);
                var style = group[0];
                var next = group[1];
                return [React.useMemo(function () {
                    var style = {};
                    if (m) {
                        var width = style.width;
                        var height = style.height;
                        if (-1 !== m.indexOf("height") && height) {
                            style.height = height;
                        } else {
                            if (-1 !== m.indexOf("minHeight") && height) {
                                style.minHeight = height;
                            }
                        }
                        if (-1 !== m.indexOf("width") && width) {
                            style.width = width;
                        } else {
                            if (-1 !== m.indexOf("minWidth") && width) {
                                style.minWidth = width;
                            }
                        }
                    }
                    return style;
                }, [m, style]), function (qrContainer) {
                    next({
                        width: qrContainer.offsetWidth,
                        height: qrContainer.offsetHeight
                    });
                }];
            }(min);
            var black = call(x, 2);
            var dsl = black[0];
            var putter = black[1];
            var test = function (sDates, saveNotifs) {
                /**
                 * @param {string} cb
                 * @return {undefined}
                 */
                function setTimeout(cb) {
                    start(cb, true);
                }
                /**
                 * @return {undefined}
                 */
                function unsetPolling() {
                    $timeout.cancel(timer.current);
                }
                var group = call(attr(null), 2);
                var key = group[0];
                var start = group[1];
                var timer = (0, React.useRef)();
                return (0, React.useEffect)(function () {
                    setTimeout("measure");
                }, [sDates]), (0, React.useEffect)(function () {
                    if ("measure" === key) {
                        saveNotifs();
                    }
                    if (key) {
                        timer.current = $timeout(slice(test().mark(function request() {
                            var k;
                            var t;
                            return test().wrap(function (context$5$0) {
                                for (; ;) {
                                    switch (context$5$0.prev = context$5$0.next) {
                                        case 0:
                                            /** @type {number} */
                                            k = left.indexOf(key);
                                            if ((t = left[k + 1]) && -1 !== k) {
                                                setTimeout(t);
                                            }
                                        case 3:
                                        case "end":
                                            return context$5$0.stop();
                                    }
                                }
                            }, request);
                        })));
                    }
                }, [key]), (0, React.useEffect)(function () {
                    return function () {
                        unsetPolling();
                    };
                }, []), [key, function (s) {
                    unsetPolling();
                    timer.current = $timeout(function () {
                        setTimeout(function (canCreateDiscussions) {
                            switch (key) {
                                case "align":
                                    return "motion";
                                case "motion":
                                    return "stable";
                            }
                            return canCreateDiscussions;
                        });
                        if (!(null === s || void 0 === s)) {
                            s();
                        }
                    });
                }];
            }(selected, function () {
                if (min) {
                    putter(event());
                }
            });
            var xml = call(test, 2);
            var undefined = xml[0];
            var root = xml[1];
            var window = call((0, React.useState)(0), 2);
            var s = window[0];
            var itersortfunc = window[1];
            var options = (0, React.useRef)();
            _shallowCopyKeys(function () {
                if ("alignPre" === undefined) {
                    itersortfunc(0);
                }
            }, [undefined]);
            _shallowCopyKeys(function () {
                if ("align" === undefined) {
                    if (s < 2) {
                        createNewMeasurement();
                    } else {
                        root(function () {
                            var value;
                            if (!(null === (value = options.current) || void 0 === value)) {
                                value.call(options);
                            }
                        });
                    }
                }
            }, [s]);
            var result = assign({}, construct(me));
            ["onAppearEnd", "onEnterEnd", "onLeaveEnd"].forEach(function (x0) {
                var t = result[x0];
                /**
                 * @param {?} e
                 * @param {?} val_error
                 * @return {?}
                 */
                result[x0] = function (e, val_error) {
                    return root(), null === t || void 0 === t ? void 0 : t(e, val_error);
                };
            });
            React.useEffect(function () {
                if (!(result.motionName || "motion" !== undefined)) {
                    root();
                }
            }, [result.motionName, undefined]);
            React.useImperativeHandle(c, function () {
                return {
                    forceAlign: createNewMeasurement,
                    getElement: function () {
                        return editor.current;
                    }
                };
            });
            var style = assign(assign({}, dsl), {}, {
                zIndex: zIndex,
                opacity: "motion" !== undefined && "stable" !== undefined && selected ? 0 : void 0,
                pointerEvents: selected || "stable" === undefined ? void 0 : "none"
            }, seriesStyle);
            /** @type {boolean} */
            var isDeleteDisabled = true;
            if (!(!(null === a || void 0 === a ? void 0 : a.points) || "align" !== undefined && "stable" !== undefined)) {
                /** @type {boolean} */
                isDeleteDisabled = false;
            }
            var content = children;
            return React.Children.count(children) > 1 && (content = React.createElement("div", {
                className: "".concat(key, "-content")
            }, children)), React.createElement(PatchItem, _extends({
                visible: selected,
                ref: editor,
                leavedClassName: "".concat(key, "-hidden")
            }, result, {
                onAppearPrepare: resolveFiber,
                onEnterPrepare: resolveFiber,
                removeOnLeave: toolsElement,
                forceRender: forceRender
            }), function (dom, oldRef) {
                var name = dom.className;
                var dsl = dom.style;
                var item = require()(key, keys, start, name);
                return React.createElement(CreateUserSettingFieldset, {
                    target: target || event,
                    key: "popup",
                    ref: _this,
                    monitorWindowResize: true,
                    disabled: isDeleteDisabled,
                    align: a,
                    onAlign: init
                }, React.createElement("div", {
                    ref: oldRef,
                    className: item,
                    onMouseEnter: onMouseEnter,
                    onMouseLeave: onMouseLeave,
                    onMouseDownCapture: onMouseDown,
                    onTouchStartCapture: onTouchStart,
                    onClick: onClick,
                    style: assign(assign({}, dsl), style)
                }, content));
            });
        });
        /** @type {string} */
        searchResultPerson.displayName = "PopupInner";
        var SettingsGridSection = searchResultPerson;
        var asset = React.forwardRef(function (options, derTrigger) {
            var key = options.prefixCls;
            var visible = options.visible;
            var z = options.zIndex;
            var item = options.children;
            var output = options.mobile;
            var template = (output = void 0 === output ? {} : output).popupClassName;
            var m = output.popupStyle;
            var mod = output.popupMotion;
            var surfaceContext = void 0 === mod ? {} : mod;
            var prefix = output.popupRender;
            var onClick = options.onClick;
            var editor = React.useRef();
            React.useImperativeHandle(derTrigger, function () {
                return {
                    forceAlign: function () {
                    },
                    getElement: function () {
                        return editor.current;
                    }
                };
            });
            var value = assign({
                zIndex: z
            }, m);
            var name = item;
            return React.Children.count(item) > 1 && (name = React.createElement("div", {
                className: "".concat(key, "-content")
            }, item)), prefix && (name = prefix(name)), React.createElement(PatchItem, _extends({
                visible: visible,
                ref: editor,
                removeOnLeave: true
            }, surfaceContext), function (self, oldRef) {
                var b = self.className;
                var globalOptions = self.style;
                var i = require()(key, template, b);
                return React.createElement("div", {
                    ref: oldRef,
                    className: i,
                    onClick: onClick,
                    style: assign(assign({}, globalOptions), value)
                }, name);
            });
        });
        /** @type {string} */
        asset.displayName = "MobilePopupInner";
        var base = asset;
        /** @type {!Array} */
        var username = ["visible", "mobile"];
        var module = React.forwardRef(function (params, oldRef) {
            var data = params.visible;
            var mobile = params.mobile;
            var headers = get(params, username);
            var form = call((0, React.useState)(data), 2);
            var value = form[0];
            var items = form[1];
            var result = call((0, React.useState)(false), 2);
            var d = result[0];
            var thisProp = result[1];
            var props = assign(assign({}, headers), {}, {
                visible: value
            });
            (0, React.useEffect)(function () {
                items(data);
                if (data && mobile) {
                    thisProp(detectBrowser());
                }
            }, [data, mobile]);
            var scm_branches = d ? React.createElement(base, _extends({}, props, {
                mobile: mobile,
                ref: oldRef
            })) : React.createElement(SettingsGridSection, _extends({}, props, {
                ref: oldRef
            }));
            return React.createElement("div", null, React.createElement(Image, props), scm_branches);
        });
        /** @type {string} */
        module.displayName = "Popup";
        var parent = module;
        var ActionPlayer_1 = React.createContext(null);
        /** @type {!Array} */
        var methods = ["onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur", "onContextMenu"];
        var PivotButton = function (template) {
            var ts = function (name) {
                /**
                 * @param {!Object} scope
                 * @return {?}
                 */
                function render(scope) {
                    var self;
                    var a;
                    return log(this, render), (self = str.call(this, scope)).popupRef = React.createRef(), self.triggerRef = React.createRef(), self.portalContainer = void 0, self.attachId = void 0, self.clickOutsideHandler = void 0, self.touchOutsideHandler = void 0, self.contextMenuOutsideHandler1 = void 0, self.contextMenuOutsideHandler2 = void 0, self.mouseDownTimeout = void 0, self.focusTime = void 0, self.preClickTime = void 0, self.preTouchTime = void 0, self.delayTimer = void 0, self.hasPopupMouseDown =
                        void 0, self.onMouseEnter = function (duration) {
                            var firstRun = self.props.mouseEnterDelay;
                            self.fireEvents("onMouseEnter", duration);
                            self.delaySetPopupVisible(true, firstRun, firstRun ? null : duration);
                        }, self.onMouseMove = function (element) {
                            self.fireEvents("onMouseMove", element);
                            self.setPoint(element);
                        }, self.onMouseLeave = function (args) {
                            self.fireEvents("onMouseLeave", args);
                            self.delaySetPopupVisible(false, self.props.mouseLeaveDelay);
                        }, self.onPopupMouseEnter = function () {
                            self.clearDelayTimer();
                        }, self.onPopupMouseLeave = function (result) {
                            var current;
                            if (!(result.relatedTarget && !result.relatedTarget.setTimeout && contains(null === (current = self.popupRef.current) || void 0 === current ? void 0 : current.getElement(), result.relatedTarget))) {
                                self.delaySetPopupVisible(false, self.props.mouseLeaveDelay);
                            }
                        }, self.onFocus = function (target) {
                            self.fireEvents("onFocus", target);
                            self.clearDelayTimer();
                            if (self.isFocusToShow()) {
                                /** @type {number} */
                                self.focusTime = Date.now();
                                self.delaySetPopupVisible(true, self.props.focusDelay);
                            }
                        }, self.onMouseDown = function (event) {
                            self.fireEvents("onMouseDown", event);
                            /** @type {number} */
                            self.preClickTime = Date.now();
                        }, self.onTouchStart = function (e) {
                            self.fireEvents("onTouchStart", e);
                            /** @type {number} */
                            self.preTouchTime = Date.now();
                        }, self.onBlur = function (e) {
                            self.fireEvents("onBlur", e);
                            self.clearDelayTimer();
                            if (self.isBlurToHide()) {
                                self.delaySetPopupVisible(false, self.props.blurDelay);
                            }
                        }, self.onContextMenu = function (event) {
                            event.preventDefault();
                            self.fireEvents("onContextMenu", event);
                            self.setPopupVisible(true, event);
                        }, self.onContextMenuClose = function () {
                            if (self.isContextMenuToShow()) {
                                self.close();
                            }
                        }, self.onClick = function (e) {
                            if (self.fireEvents("onClick", e), self.focusTime) {
                                var left;
                                if (self.preClickTime && self.preTouchTime ? left = Math.min(self.preClickTime, self.preTouchTime) : self.preClickTime ? left = self.preClickTime : self.preTouchTime && (left = self.preTouchTime), Math.abs(left - self.focusTime) < 20) {
                                    return;
                                }
                                /** @type {number} */
                                self.focusTime = 0;
                            }
                            /** @type {number} */
                            self.preClickTime = 0;
                            /** @type {number} */
                            self.preTouchTime = 0;
                            if (self.isClickToShow() && (self.isClickToHide() || self.isBlurToHide()) && e && e.preventDefault) {
                                e.preventDefault();
                            }
                            /** @type {boolean} */
                            var r = !self.state.popupVisible;
                            if (self.isClickToHide() && !r || r && self.isClickToShow()) {
                                self.setPopupVisible(!self.state.popupVisible, e);
                            }
                        }, self.onPopupMouseDown = function () {
                            var ctx;
                            if (self.hasPopupMouseDown = true, clearTimeout(self.mouseDownTimeout), self.mouseDownTimeout = window.setTimeout(function () {
                                /** @type {boolean} */
                                self.hasPopupMouseDown = false;
                            }, 0), self.context) {
                                (ctx = self.context).onPopupMouseDown.apply(ctx, arguments);
                            }
                        }, self.onDocumentClick = function (event) {
                            if (!self.props.mask || self.props.maskClosable) {
                                var t = event.target;
                                var fromStates = self.getRootDomNode();
                                var propsBlacklist = self.getPopupDomNode();
                                if (!(contains(fromStates, t) && !self.isContextMenuOnly() || contains(propsBlacklist, t) || self.hasPopupMouseDown)) {
                                    self.close();
                                }
                            }
                        }, self.getRootDomNode = function () {
                            var checkCharactersBoundary = self.props.getTriggerDOMNode;
                            if (checkCharactersBoundary) {
                                return checkCharactersBoundary(self.triggerRef.current);
                            }
                            try {
                                var ed = u(self.triggerRef.current);
                                if (ed) {
                                    return ed;
                                }
                            } catch (r) {
                            }
                            return d.findDOMNode(trigger(self));
                        }, self.getPopupClassNameFromAlign = function (key) {
                            /** @type {!Array} */
                            var result = [];
                            var options = self.props;
                            var placement = options.popupPlacement;
                            var style = options.builtinPlacements;
                            var i = options.prefixCls;
                            var value = options.alignPoint;
                            var format = options.getPopupClassNameFromAlign;
                            return placement && style && result.push(function (data, x, inItem, bottom) {
                                var p = inItem.points;
                                /** @type {!Array<string>} */
                                var itemIds = Object.keys(data);
                                /** @type {number} */
                                var i = 0;
                                for (; i < itemIds.length; i = i + 1) {
                                    /** @type {string} */
                                    var id = itemIds[i];
                                    if (getFillStyle(data[id].points, p, bottom)) {
                                        return "".concat(x, "-placement-").concat(id);
                                    }
                                }
                                return "";
                            }(style, i, key, value)), format && result.push(format(key)), result.join(" ");
                        }, self.getComponent = function () {
                            var options = self.props;
                            var readOnlyFn = options.prefixCls;
                            var pagesToDisplay = options.destroyPopupOnHide;
                            var tableClass = options.popupClassName;
                            var gen_code_options = options.onPopupAlign;
                            var motion$1 = options.popupMotion;
                            var blue = options.popupAnimation;
                            var transitionName = options.popupTransitionName;
                            var s = options.popupStyle;
                            var mask = options.mask;
                            var easeVal = options.maskAnimation;
                            var d3version = options.maskTransitionName;
                            var nameVersions = options.maskMotion;
                            var z = options.zIndex;
                            var value = options.popup;
                            var stretch = options.stretch;
                            var PNGProcessor = options.alignPoint;
                            var mobile = options.mobile;
                            var forceRender = options.forceRender;
                            var onPlusClick = options.onPopupClick;
                            var state = self.state;
                            var visibility = state.popupVisible;
                            var pt = state.point;
                            var showLevels = self.getPopupAlign();
                            var props = {};
                            return self.isMouseEnterToShow() && (props.onMouseEnter = self.onPopupMouseEnter), self.isMouseLeaveToHide() && (props.onMouseLeave = self.onPopupMouseLeave), props.onMouseDown = self.onPopupMouseDown, props.onTouchStart = self.onPopupMouseDown, React.createElement(parent, _extends({
                                prefixCls: readOnlyFn,
                                destroyPopupOnHide: pagesToDisplay,
                                visible: visibility,
                                point: PNGProcessor && pt,
                                className: tableClass,
                                align: showLevels,
                                onAlign: gen_code_options,
                                animation: blue,
                                getClassNameFromAlign: self.getPopupClassNameFromAlign
                            }, props, {
                                stretch: stretch,
                                getRootDomNode: self.getRootDomNode,
                                style: s,
                                mask: mask,
                                zIndex: z,
                                transitionName: transitionName,
                                maskAnimation: easeVal,
                                maskTransitionName: d3version,
                                maskMotion: nameVersions,
                                ref: self.popupRef,
                                motion: motion$1,
                                mobile: mobile,
                                forceRender: forceRender,
                                onClick: onPlusClick
                            }), "function" === typeof value ? value() : value);
                        }, self.attachParent = function (tree) {
                            $timeout.cancel(self.attachId);
                            var b;
                            var element = self.props;
                            var o = element.getPopupContainer;
                            var getDocument = element.getDocument;
                            var a = self.getRootDomNode();
                            if (o) {
                                if (a || 0 === o.length) {
                                    b = o(a);
                                }
                            } else {
                                b = getDocument(self.getRootDomNode()).body;
                            }
                            if (b) {
                                b.appendChild(tree);
                            } else {
                                self.attachId = $timeout(function () {
                                    self.attachParent(tree);
                                });
                            }
                        }, self.getContainer = function () {
                            if (!self.portalContainer) {
                                var e = (0, self.props.getDocument)(self.getRootDomNode()).createElement("div");
                                /** @type {string} */
                                e.style.position = "absolute";
                                /** @type {string} */
                                e.style.top = "0";
                                /** @type {string} */
                                e.style.left = "0";
                                /** @type {string} */
                                e.style.width = "100%";
                                self.portalContainer = e;
                            }
                            return self.attachParent(self.portalContainer), self.portalContainer;
                        }, self.setPoint = function (event) {
                            if (self.props.alignPoint && event) {
                                self.setState({
                                    point: {
                                        pageX: event.pageX,
                                        pageY: event.pageY
                                    }
                                });
                            }
                        }, self.handlePortalUpdate = function () {
                            if (self.state.prevPopupVisible !== self.state.popupVisible) {
                                self.props.afterPopupVisibleChange(self.state.popupVisible);
                            }
                        }, self.triggerContextValue = {
                            onPopupMouseDown: self.onPopupMouseDown
                        }, a = "popupVisible" in scope ? !!scope.popupVisible : !!scope.defaultPopupVisible, self.state = {
                            prevPopupVisible: a,
                            popupVisible: a
                        }, methods.forEach(function (e) {
                            /**
                             * @param {?} args
                             * @return {undefined}
                             */
                            self["fire".concat(e)] = function (args) {
                                self.fireEvents(e, args);
                            };
                        }), self;
                }
                compile(render, name);
                var str = fn(render);
                return g(render, [{
                    key: "componentDidMount",
                    value: function () {
                        this.componentDidUpdate();
                    }
                }, {
                    key: "componentDidUpdate",
                    value: function () {
                        var form;
                        var _props = this.props;
                        if (this.state.popupVisible) {
                            return this.clickOutsideHandler || !this.isClickToHide() && !this.isContextMenuToShow() || (form = _props.getDocument(this.getRootDomNode()), this.clickOutsideHandler = addEvent(form, "mousedown", this.onDocumentClick)), this.touchOutsideHandler || (form = form || _props.getDocument(this.getRootDomNode()), this.touchOutsideHandler = addEvent(form, "touchstart", this.onDocumentClick)), !this.contextMenuOutsideHandler1 && this.isContextMenuToShow() && (form = form || _props.getDocument(this.getRootDomNode()),
                                this.contextMenuOutsideHandler1 = addEvent(form, "scroll", this.onContextMenuClose)), void (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow() && (this.contextMenuOutsideHandler2 = addEvent(window, "blur", this.onContextMenuClose)));
                        }
                        this.clearOutsideHandler();
                    }
                }, {
                    key: "componentWillUnmount",
                    value: function () {
                        this.clearDelayTimer();
                        this.clearOutsideHandler();
                        clearTimeout(this.mouseDownTimeout);
                        $timeout.cancel(this.attachId);
                    }
                }, {
                    key: "getPopupDomNode",
                    value: function () {
                        var current;
                        return (null === (current = this.popupRef.current) || void 0 === current ? void 0 : current.getElement()) || null;
                    }
                }, {
                    key: "getPopupAlign",
                    value: function () {
                        var me = this.props;
                        var valuePath = me.popupPlacement;
                        var key = me.popupAlign;
                        var selection = me.builtinPlacements;
                        return valuePath && selection ? function (res, path, obj) {
                            return assign(assign({}, res[path] || {}), obj);
                        }(selection, valuePath, key) : key;
                    }
                }, {
                    key: "setPopupVisible",
                    value: function (value, name) {
                        var type = this.props.alignPoint;
                        var filterValue = this.state.popupVisible;
                        this.clearDelayTimer();
                        if (filterValue !== value) {
                            if (!("popupVisible" in this.props)) {
                                this.setState({
                                    popupVisible: value,
                                    prevPopupVisible: filterValue
                                });
                            }
                            this.props.onPopupVisibleChange(value);
                        }
                        if (type && name && value) {
                            this.setPoint(name);
                        }
                    }
                }, {
                    key: "delaySetPopupVisible",
                    value: function (obj, o, source) {
                        var Lill = this;
                        /** @type {number} */
                        var t = 1E3 * o;
                        if (this.clearDelayTimer(), t) {
                            /** @type {(null|{pageX: ??, pageY: ??})} */
                            var item = source ? {
                                pageX: source.pageX,
                                pageY: source.pageY
                            } : null;
                            this.delayTimer = window.setTimeout(function () {
                                Lill.setPopupVisible(obj, item);
                                Lill.clearDelayTimer();
                            }, t);
                        } else {
                            this.setPopupVisible(obj, source);
                        }
                    }
                }, {
                    key: "clearDelayTimer",
                    value: function () {
                        if (this.delayTimer) {
                            clearTimeout(this.delayTimer);
                            /** @type {null} */
                            this.delayTimer = null;
                        }
                    }
                }, {
                    key: "clearOutsideHandler",
                    value: function () {
                        if (this.clickOutsideHandler) {
                            this.clickOutsideHandler.remove();
                            /** @type {null} */
                            this.clickOutsideHandler = null;
                        }
                        if (this.contextMenuOutsideHandler1) {
                            this.contextMenuOutsideHandler1.remove();
                            /** @type {null} */
                            this.contextMenuOutsideHandler1 = null;
                        }
                        if (this.contextMenuOutsideHandler2) {
                            this.contextMenuOutsideHandler2.remove();
                            /** @type {null} */
                            this.contextMenuOutsideHandler2 = null;
                        }
                        if (this.touchOutsideHandler) {
                            this.touchOutsideHandler.remove();
                            /** @type {null} */
                            this.touchOutsideHandler = null;
                        }
                    }
                }, {
                    key: "createTwoChains",
                    value: function (key) {
                        var config = this.props.children.props;
                        var defaults = this.props;
                        return config[key] && defaults[key] ? this["fire".concat(key)] : config[key] || defaults[key];
                    }
                }, {
                    key: "isClickToShow",
                    value: function () {
                        var data = this.props;
                        var event = data.action;
                        var n = data.showAction;
                        return -1 !== event.indexOf("click") || -1 !== n.indexOf("click");
                    }
                }, {
                    key: "isContextMenuOnly",
                    value: function () {
                        var url = this.props.action;
                        return "contextMenu" === url || 1 === url.length && "contextMenu" === url[0];
                    }
                }, {
                    key: "isContextMenuToShow",
                    value: function () {
                        var data = this.props;
                        var act = data.action;
                        var module = data.showAction;
                        return -1 !== act.indexOf("contextMenu") || -1 !== module.indexOf("contextMenu");
                    }
                }, {
                    key: "isClickToHide",
                    value: function () {
                        var p = this.props;
                        var a = p.action;
                        var row = p.hideAction;
                        return -1 !== a.indexOf("click") || -1 !== row.indexOf("click");
                    }
                }, {
                    key: "isMouseEnterToShow",
                    value: function () {
                        var opts = this.props;
                        var o = opts.action;
                        var self = opts.showAction;
                        return -1 !== o.indexOf("hover") || -1 !== self.indexOf("mouseEnter");
                    }
                }, {
                    key: "isMouseLeaveToHide",
                    value: function () {
                        var _props = this.props;
                        var path = _props.action;
                        var scope = _props.hideAction;
                        return -1 !== path.indexOf("hover") || -1 !== scope.indexOf("mouseLeave");
                    }
                }, {
                    key: "isFocusToShow",
                    value: function () {
                        var _props2 = this.props;
                        var action = _props2.action;
                        var NameFirstChars = _props2.showAction;
                        return -1 !== action.indexOf("focus") || -1 !== NameFirstChars.indexOf("focus");
                    }
                }, {
                    key: "isBlurToHide",
                    value: function () {
                        var form = this.props;
                        var uriString = form.action;
                        var name = form.hideAction;
                        return -1 !== uriString.indexOf("focus") || -1 !== name.indexOf("blur");
                    }
                }, {
                    key: "forcePopupAlign",
                    value: function () {
                        var layerRef;
                        if (this.state.popupVisible) {
                            if (!(null === (layerRef = this.popupRef.current) || void 0 === layerRef)) {
                                layerRef.forceAlign();
                            }
                        }
                    }
                }, {
                    key: "fireEvents",
                    value: function (key, obj) {
                        var isSpecialObject = this.props.children.props[key];
                        if (isSpecialObject) {
                            isSpecialObject(obj);
                        }
                        var value = this.props[key];
                        if (value) {
                            value(obj);
                        }
                    }
                }, {
                    key: "close",
                    value: function () {
                        this.setPopupVisible(false);
                    }
                }, {
                    key: "render",
                    value: function () {
                        var current = this.state.popupVisible;
                        var _props = this.props;
                        var options = _props.children;
                        var forceRender = _props.forceRender;
                        var dataEndIndex = _props.alignPoint;
                        var state = _props.className;
                        var id = _props.autoDestroy;
                        var component = React.Children.only(options);
                        var props = {
                            key: "trigger"
                        };
                        if (this.isContextMenuToShow()) {
                            props.onContextMenu = this.onContextMenu;
                        } else {
                            props.onContextMenu = this.createTwoChains("onContextMenu");
                        }
                        if (this.isClickToHide() || this.isClickToShow()) {
                            props.onClick = this.onClick;
                            props.onMouseDown = this.onMouseDown;
                            props.onTouchStart = this.onTouchStart;
                        } else {
                            props.onClick = this.createTwoChains("onClick");
                            props.onMouseDown = this.createTwoChains("onMouseDown");
                            props.onTouchStart = this.createTwoChains("onTouchStart");
                        }
                        if (this.isMouseEnterToShow()) {
                            props.onMouseEnter = this.onMouseEnter;
                            if (dataEndIndex) {
                                props.onMouseMove = this.onMouseMove;
                            }
                        } else {
                            props.onMouseEnter = this.createTwoChains("onMouseEnter");
                        }
                        if (this.isMouseLeaveToHide()) {
                            props.onMouseLeave = this.onMouseLeave;
                        } else {
                            props.onMouseLeave = this.createTwoChains("onMouseLeave");
                        }
                        if (this.isFocusToShow() || this.isBlurToHide()) {
                            props.onFocus = this.onFocus;
                            props.onBlur = this.onBlur;
                        } else {
                            props.onFocus = this.createTwoChains("onFocus");
                            props.onBlur = this.createTwoChains("onBlur");
                        }
                        var style = require()(component && component.props && component.props.className, state);
                        if (style) {
                            props.className = style;
                        }
                        var newProps = assign({}, props);
                        if (isFunction(component)) {
                            newProps.ref = execute(this.triggerRef, component.ref);
                        }
                        var body;
                        var element = React.cloneElement(component, newProps);
                        return (current || this.popupRef.current || forceRender) && (body = React.createElement(template, {
                            key: "portal",
                            getContainer: this.getContainer,
                            didUpdate: this.handlePortalUpdate
                        }, this.getComponent())), !current && id && (body = null), React.createElement(ActionPlayer_1.Provider, {
                            value: this.triggerContextValue
                        }, element, body);
                    }
                }], [{
                    key: "getDerivedStateFromProps",
                    value: function (obj, value) {
                        var type = obj.popupVisible;
                        var $scope = {};
                        return void 0 !== type && value.popupVisible !== type && ($scope.popupVisible = type, $scope.prevPopupVisible = value.popupVisible), $scope;
                    }
                }]), render;
            }(React.Component);
            return ts.contextType = ActionPlayer_1, ts.defaultProps = {
                prefixCls: "rc-trigger-popup",
                getPopupClassNameFromAlign: filterModelValue,
                getDocument: TabbarDND_init,
                onPopupVisibleChange: ou,
                afterPopupVisibleChange: ou,
                onPopupAlign: ou,
                popupClassName: "",
                mouseEnterDelay: 0,
                mouseLeaveDelay: .1,
                focusDelay: 0,
                blurDelay: .15,
                popupStyle: {},
                destroyPopupOnHide: false,
                popupAlign: {},
                defaultPopupVisible: false,
                mask: false,
                maskClosable: true,
                action: [],
                showAction: [],
                hideAction: [],
                autoDestroy: false
            }, ts;
        }(wsFunction);
        var overflow = {
            adjustX: 1,
            adjustY: 1
        };
        var partial = {
            topLeft: {
                points: ["bl", "tl"],
                overflow: overflow,
                offset: [0, -7]
            },
            bottomLeft: {
                points: ["tl", "bl"],
                overflow: overflow,
                offset: [0, 7]
            },
            leftTop: {
                points: ["tr", "tl"],
                overflow: overflow,
                offset: [-4, 0]
            },
            rightTop: {
                points: ["tl", "tr"],
                overflow: overflow,
                offset: [4, 0]
            }
        };
        var removeClass = {
            topLeft: {
                points: ["bl", "tl"],
                overflow: overflow,
                offset: [0, -7]
            },
            bottomLeft: {
                points: ["tl", "bl"],
                overflow: overflow,
                offset: [0, 7]
            },
            rightTop: {
                points: ["tr", "tl"],
                overflow: overflow,
                offset: [-4, 0]
            },
            leftTop: {
                points: ["tl", "tr"],
                overflow: overflow,
                offset: [4, 0]
            }
        };
        var axes = {
            horizontal: "bottomLeft",
            vertical: "rightTop",
            "vertical-left": "rightTop",
            "vertical-right": "leftTop"
        };
        /** @type {!Array} */
        var width = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"];
        /** @type {!Array} */
        var users = ["active"];
        /**
         * @param {!Object} options
         * @return {?}
         */
        var render = function (options) {
            var _classNames;
            var textStyle = options.style;
            var classes = options.className;
            var text = options.title;
            var key = options.eventKey;
            var readOnly = (options.warnKey, options.disabled);
            var reset = options.internalPopupClose;
            var items = options.children;
            var test = options.itemIcon;
            var icn = options.expandIcon;
            var readOnlyFn = options.popupClassName;
            var pagesToDisplay = options.popupOffset;
            var onClick = options.onClick;
            var select = options.onMouseEnter;
            var el = options.onMouseLeave;
            var url = options.onTitleClick;
            var args = options.onTitleMouseEnter;
            var h = options.onTitleMouseLeave;
            var result = get(options, width);
            var data = trim(key);
            var opts = React.useContext(componentName);
            var x = opts.prefixCls;
            var type = opts.mode;
            var PROHIBITED_ATTRS = opts.openKeys;
            var disabled = opts.disabled;
            var value = opts.overflowDisabled;
            var o = opts.activeKey;
            var friendlyGreet = opts.selectedKeys;
            var hook = opts.itemIcon;
            var plus = opts.expandIcon;
            var generateBoundHandler = opts.onItemClick;
            var callback = opts.onOpenChange;
            var action = opts.onActive;
            var extend = React.useContext(spec)._internalRenderSubMenuItem;
            var bind = React.useContext(renderer).isSubPathKey;
            var event = dispatch();
            /** @type {string} */
            var name = "".concat(x, "-submenu");
            var isDisabled = disabled || readOnly;
            var iaRef = React.useRef();
            var fieldValueRef = React.useRef();
            var testOrHook = test || hook;
            var icon = icn || plus;
            var err = PROHIBITED_ATTRS.includes(key);
            var isOpen = !value && err;
            var val = bind(friendlyGreet, key);
            var body = destroy(key, isDisabled, args, h);
            var r = body.active;
            var route = get(body, users);
            var callbacks = call(React.useState(false), 2);
            var errback = callbacks[0];
            var f = callbacks[1];
            /**
             * @param {boolean} data
             * @return {undefined}
             */
            var draw = function (data) {
                if (!isDisabled) {
                    f(data);
                }
            };
            var status = React.useMemo(function () {
                return r || "inline" !== type && (errback || bind([o], key));
            }, [type, r, o, errback, key, bind]);
            var mainWindowStyle = setPosition(event.length);
            var onItemClick = connect(function (id) {
                if (!(null === onClick || void 0 === onClick)) {
                    onClick(updateArticleComments(id));
                }
                generateBoundHandler(id);
            });
            var id = data && "".concat(data, "-popup");
            var label = React.createElement("div", _extends({
                role: "menuitem",
                style: mainWindowStyle,
                className: "".concat(name, "-title"),
                tabIndex: isDisabled ? null : -1,
                ref: iaRef,
                title: "string" === typeof text ? text : null,
                "data-menu-id": value && data ? null : data,
                "aria-expanded": isOpen,
                "aria-haspopup": true,
                "aria-controls": id,
                "aria-disabled": isDisabled,
                onClick: function (event) {
                    if (!isDisabled) {
                        if (!(null === url || void 0 === url)) {
                            url({
                                key: key,
                                domEvent: event
                            });
                        }
                        if ("inline" === type) {
                            callback(key, !err);
                        }
                    }
                },
                onFocus: function () {
                    action(key);
                }
            }, route), text, React.createElement(Component, {
                icon: "horizontal" !== type ? icon : null,
                props: assign(assign({}, options), {}, {
                    isOpen: isOpen,
                    isSubMenu: true
                })
            }, React.createElement("i", {
                className: "".concat(name, "-arrow")
            })));
            var settings = React.useRef(type);
            if ("inline" !== type && (settings.current = event.length > 1 ? "vertical" : type), !value) {
                var auto = settings.current;
                label = React.createElement(click, {
                    mode: auto,
                    prefixCls: name,
                    visible: !reset && isOpen && "inline" !== type,
                    popupClassName: readOnlyFn,
                    popupOffset: pagesToDisplay,
                    popup: React.createElement(element, {
                        mode: "horizontal" === auto ? "vertical" : auto
                    }, React.createElement(CalendarHeader, {
                        id: id,
                        ref: fieldValueRef
                    }, items)),
                    disabled: isDisabled,
                    onVisibleChange: function (name) {
                        if ("inline" !== type) {
                            callback(key, name);
                        }
                    }
                }, label);
            }
            var item = React.createElement(View.Item, _extends({
                role: "none"
            }, result, {
                component: "li",
                style: textStyle,
                className: require()(name, "".concat(name, "-").concat(type), classes, (_classNames = {}, debug(_classNames, "".concat(name, "-open"), isOpen), debug(_classNames, "".concat(name, "-active"), status), debug(_classNames, "".concat(name, "-selected"), val), debug(_classNames, "".concat(name, "-disabled"), isDisabled), _classNames)),
                onMouseEnter: function (evt) {
                    draw(true);
                    if (!(null === select || void 0 === select)) {
                        select({
                            key: key,
                            domEvent: evt
                        });
                    }
                },
                onMouseLeave: function (evt) {
                    draw(false);
                    if (!(null === el || void 0 === el)) {
                        el({
                            key: key,
                            domEvent: evt
                        });
                    }
                }
            }), label, !value && React.createElement(loop, {
                id: id,
                open: isOpen,
                keyPath: event
            }, items));
            return extend && (item = extend(item, options, {
                selected: val,
                active: status,
                open: isOpen,
                disabled: isDisabled
            })), React.createElement(element, {
                onItemClick: onItemClick,
                mode: "horizontal" === type ? "vertical" : type,
                itemIcon: testOrHook,
                expandIcon: icon
            }, item);
        };
        /** @type {number} */
        var w = key.LEFT;
        /** @type {number} */
        var cacheKey = key.RIGHT;
        /** @type {number} */
        var domain = key.UP;
        /** @type {number} */
        var length = key.DOWN;
        /** @type {number} */
        var k = key.ENTER;
        /** @type {number} */
        var keyName = key.ESC;
        /** @type {number} */
        var dir = key.HOME;
        /** @type {number} */
        var number = key.END;
        /** @type {!Array} */
        var rv = [domain, length, w, cacheKey];
        /** @type {string} */
        var yyyy = Math.random().toFixed(5).toString().slice(2);
        /** @type {number} */
        var addr = 0;
        /** @type {string} */
        var href = "__RC_UTIL_PATH_SPLIT__";
        /**
         * @param {!Array} tag
         * @return {?}
         */
        var createNode = function (tag) {
            return tag.join(href);
        };
        /** @type {string} */
        var prop = "rc-menu-more";
        /** @type {!Array} */
        var field = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon",
            "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];
        /** @type {!Array} */
        var right = [];
        var CHELSEA = React.forwardRef(function (props, inNewClass) {
            var currentLine;
            var fields;
            var message = props.prefixCls;
            var id = void 0 === message ? "rc-menu" : message;
            var rootClassName = props.rootClassName;
            var style = props.style;
            var users = props.className;
            var index = props.tabIndex;
            var tabIndex = void 0 === index ? 0 : index;
            var offset = props.items;
            var first = props.children;
            var d = props.direction;
            var level = props.id;
            var y = props.mode;
            var direction = void 0 === y ? "vertical" : y;
            var highlightedColumn = props.inlineCollapsed;
            var disabled = props.disabled;
            var f = props.disabledOverflow;
            var value = props.subMenuOpenDelay;
            var collapse = void 0 === value ? .1 : value;
            var i = props.subMenuCloseDelay;
            var proto_id = void 0 === i ? .1 : i;
            var mapPaneName = props.forceSubMenuRender;
            var data = props.defaultOpenKeys;
            var maxZoomLevel = props.openKeys;
            var e = props.activeKey;
            var out = props.defaultActiveFirst;
            var DEFAULT_RECONNECT_TIME_INCREASE = props.selectable;
            var reconnectTimeIncrease = void 0 === DEFAULT_RECONNECT_TIME_INCREASE || DEFAULT_RECONNECT_TIME_INCREASE;
            var multi = props.multiple;
            var query = void 0 !== multi && multi;
            var error = props.defaultSelectedKeys;
            var stateVal = props.selectedKeys;
            var callback = props.onSelect;
            var el = props.onDeselect;
            var val = props.inlineIndent;
            var columnValue = void 0 === val ? 24 : val;
            var m = props.motion;
            var autoRemove = props.defaultMotions;
            var time = props.triggerSubMenuAction;
            var tile = void 0 === time ? "hover" : time;
            var instantValidation = props.builtinPlacements;
            var isFormSubmitted = props.itemIcon;
            var icon = props.expandIcon;
            var name = props.overflowedIndicator;
            var optName = void 0 === name ? "..." : name;
            var _props$meta = props.overflowedIndicatorPopupClassName;
            var url = props.getPopupContainer;
            var onClick = props.onClick;
            var min = props.onOpenChange;
            var onKeyDown = props.onKeyDown;
            var le = (props.openAnimation, props.openTransitionName, props._internalRenderMenuItem);
            var getPixelPositionOffset = props._internalRenderSubMenuItem;
            var attrs = get(props, field);
            var lines = React.useMemo(function () {
                return animate(first, offset, right);
            }, [first, offset]);
            var tiledImageBRs = call(React.useState(false), 2);
            var tiledImageBR = tiledImageBRs[0];
            var handleTimeoutPacket = tiledImageBRs[1];
            var _this = React.useRef();
            var a = function (data) {
                var group = call(done(data, {
                    value: data
                }), 2);
                var endtoken = group[0];
                var start = group[1];
                return React.useEffect(function () {
                    addr = addr + 1;
                    /** @type {string} */
                    var data = "".concat(yyyy, "-").concat(addr);
                    start("rc-menu-uuid-".concat(data));
                }, []), endtoken;
            }(level);
            /** @type {boolean} */
            var response = "rtl" === d;
            var group = call(React.useMemo(function () {
                return "inline" !== direction && "vertical" !== direction || !highlightedColumn ? [direction, false] : ["vertical", highlightedColumn];
            }, [direction, highlightedColumn]), 2);
            var type = group[0];
            var object = group[1];
            var black = call(React.useState(0), 2);
            var position = black[0];
            var _objectKeys = black[1];
            var dir = position >= lines.length - 1 || "horizontal" !== type || f;
            var res = call(done(data, {
                value: maxZoomLevel,
                postState: function (direction) {
                    return direction || right;
                }
            }), 2);
            var result = res[0];
            var getType = res[1];
            /**
             * @param {!Array} n
             * @return {undefined}
             */
            var removeNode = function (n) {
                getType(n);
                if (!(null === min || void 0 === min)) {
                    min(n);
                }
            };
            var hidden = call(React.useState(result), 2);
            var n = hidden[0];
            var h = hidden[1];
            /** @type {boolean} */
            var equals = "inline" === type;
            var timestampGenerator = React.useRef(false);
            React.useEffect(function () {
                if (equals) {
                    h(result);
                }
            }, [result]);
            React.useEffect(function () {
                if (timestampGenerator.current) {
                    if (equals) {
                        getType(n);
                    } else {
                        removeNode(right);
                    }
                } else {
                    /** @type {boolean} */
                    timestampGenerator.current = true;
                }
            }, [equals]);
            var store = build();
            var countRec = store.registerPath;
            var oldFoo = store.unregisterPath;
            var hash2id = store.refreshOverflowKeys;
            var _skToLastAccess = store.isSubPathKey;
            var left = store.getKeyPath;
            var filters = store.getKeys;
            var start = store.getSubPathKeys;
            var oldGenre = React.useMemo(function () {
                return {
                    registerPath: countRec,
                    unregisterPath: oldFoo
                };
            }, [countRec, oldFoo]);
            var placeholder_attr = React.useMemo(function () {
                return {
                    isSubPathKey: _skToLastAccess
                };
            }, [_skToLastAccess]);
            React.useEffect(function () {
                hash2id(dir ? right : lines.slice(position + 1).map(function (shortcutKeyObject) {
                    return shortcutKeyObject.key;
                }));
            }, [position, dir]);
            var raw = call(done(e || out && (null === (currentLine = lines[0]) || void 0 === currentLine ? void 0 : currentLine.key), {
                value: e
            }), 2);
            var key = raw[0];
            var next = raw[1];
            var noop = connect(function (encryptErr) {
                next(encryptErr);
            });
            var app = connect(function () {
                next(void 0);
            });
            (0, React.useImperativeHandle)(inNewClass, function () {
                return {
                    list: _this.current,
                    focus: function (date) {
                        var fieldToExpose;
                        var ref;
                        var r;
                        var focus;
                        var end = null !== key && void 0 !== key ? key : null === (fieldToExpose = lines.find(function (instance) {
                            return !instance.props.disabled;
                        })) || void 0 === fieldToExpose ? void 0 : fieldToExpose.key;
                        if (end) {
                            if (!(null === (ref = _this.current) || void 0 === ref || null === (r = ref.querySelector("li[data-menu-id='".concat(eq(a, end), "']"))) || void 0 === r || null === (focus = r.focus) || void 0 === focus)) {
                                focus.call(r, date);
                            }
                        }
                    }
                };
            });
            var blue = call(done(error || [], {
                value: stateVal,
                postState: function (data) {
                    return Array.isArray(data) ? data : null === data || void 0 === data ? right : [data];
                }
            }), 2);
            var b = blue[0];
            var createSelector = blue[1];
            var onItemClick = connect(function (id) {
                if (!(null === onClick || void 0 === onClick)) {
                    onClick(updateArticleComments(id));
                }
                (function (schema) {
                    if (reconnectTimeIncrease) {
                        var selectedKeysSelector;
                        var key = schema.key;
                        var storedRecord = b.includes(key);
                        selectedKeysSelector = query ? storedRecord ? b.filter(function (name) {
                            return name !== key;
                        }) : [].concat(resolve(b), [key]) : [key];
                        createSelector(selectedKeysSelector);
                        var arg = assign(assign({}, schema), {}, {
                            selectedKeys: selectedKeysSelector
                        });
                        if (storedRecord) {
                            if (!(null === el || void 0 === el)) {
                                el(arg);
                            }
                        } else {
                            if (!(null === callback || void 0 === callback)) {
                                callback(arg);
                            }
                        }
                    }
                    if (!query && result.length && "inline" !== type) {
                        removeNode(right);
                    }
                })(id);
            });
            var resizeHandler = connect(function (event, canCreateDiscussions) {
                var g = result.filter(function (name) {
                    return name !== event;
                });
                if (canCreateDiscussions) {
                    g.push(event);
                } else {
                    if ("inline" !== type) {
                        var child = start(event);
                        g = g.filter(function (elem) {
                            return !child.has(elem);
                        });
                    }
                }
                if (!appendChild()(result, g)) {
                    removeNode(g);
                }
            });
            var client = connect(url);
            var promise = addListeners(type, key, response, a, _this, filters, left, next, function (e, name) {
                var storeId = null !== name && void 0 !== name ? name : !result.includes(e);
                resizeHandler(e, storeId);
            }, onKeyDown);
            React.useEffect(function () {
                handleTimeoutPacket(true);
            }, []);
            var jsonObjCopy = React.useMemo(function () {
                return {
                    _internalRenderMenuItem: le,
                    _internalRenderSubMenuItem: getPixelPositionOffset
                };
            }, [le, getPixelPositionOffset]);
            var serviceArguments = "horizontal" !== type || f ? lines : lines.map(function (indicators, index) {
                return React.createElement(element, {
                    key: indicators.key,
                    overflowDisabled: index > position
                }, indicators);
            });
            var categories = React.createElement(View, _extends({
                id: level,
                ref: _this,
                prefixCls: "".concat(id, "-overflow"),
                component: "ul",
                itemComponent: Item,
                className: require()(id, "".concat(id, "-root"), "".concat(id, "-").concat(type), users, (fields = {}, debug(fields, "".concat(id, "-inline-collapsed"), object), debug(fields, "".concat(id, "-rtl"), response), fields), rootClassName),
                dir: d,
                style: style,
                role: "menu",
                tabIndex: tabIndex,
                data: serviceArguments,
                renderRawItem: function (aNetChannelMessage) {
                    return aNetChannelMessage;
                },
                renderRawRest: function (homonymsArray) {
                    var n = homonymsArray.length;
                    var m = n ? lines.slice(-n) : null;
                    return React.createElement(Button, {
                        eventKey: prop,
                        title: optName,
                        disabled: dir,
                        internalPopupClose: 0 === n,
                        popupClassName: _props$meta
                    }, m);
                },
                maxCount: "horizontal" !== type || f ? View.INVALIDATE : View.RESPONSIVE,
                ssr: "full",
                "data-menu-list": true,
                onVisibleChange: function (mirror) {
                    _objectKeys(mirror);
                },
                onKeyDown: promise
            }, attrs));
            return React.createElement(spec.Provider, {
                value: jsonObjCopy
            }, React.createElement(obj.Provider, {
                value: a
            }, React.createElement(element, {
                prefixCls: id,
                rootClassName: rootClassName,
                mode: type,
                openKeys: result,
                rtl: response,
                disabled: disabled,
                motion: tiledImageBR ? m : null,
                defaultMotions: tiledImageBR ? autoRemove : null,
                activeKey: key,
                onActive: noop,
                onInactive: app,
                selectedKeys: b,
                inlineIndent: columnValue,
                subMenuOpenDelay: collapse,
                subMenuCloseDelay: proto_id,
                forceSubMenuRender: mapPaneName,
                builtinPlacements: instantValidation,
                triggerSubMenuAction: tile,
                getPopupContainer: client,
                itemIcon: isFormSubmitted,
                expandIcon: icon,
                onItemClick: onItemClick,
                onOpenChange: resizeHandler
            }, React.createElement(renderer.Provider, {
                value: placeholder_attr
            }, categories), React.createElement("div", {
                style: {
                    display: "none"
                },
                "aria-hidden": true
            }, React.createElement(children.Provider, {
                value: oldGenre
            }, lines)))));
        });
        /** @type {!Array} */
        var strings = ["className", "title", "eventKey", "children"];
        /** @type {!Array} */
        var then = ["children"];
        /**
         * @param {!Object} obj
         * @return {?}
         */
        var view = function (obj) {
            var className = obj.className;
            var title = obj.title;
            var height = (obj.eventKey, obj.children);
            var result = get(obj, strings);
            var x = React.useContext(componentName).prefixCls;
            /** @type {string} */
            var key = "".concat(x, "-item-group");
            return React.createElement("li", _extends({}, result, {
                onClick: function (event) {
                    return event.stopPropagation();
                },
                className: require()(key, className)
            }), React.createElement("div", {
                className: "".concat(key, "-title"),
                title: "string" === typeof title ? title : void 0
            }, title), React.createElement("ul", {
                className: "".concat(key, "-list")
            }, height));
        };
        /** @type {function(number): ?} */
        var crossfilter_capacity = dispatch;
        var item = CHELSEA;
        /** @type {function(!Object): ?} */
        item.Item = Item;
        /** @type {function(!Object): ?} */
        item.SubMenu = Button;
        /** @type {function(!Object): ?} */
        item.ItemGroup = option;
        /** @type {function(!Element): ?} */
        item.Divider = Group;
        var content = item;
        var DEFAULT_NAMESPACE = {
            adjustX: 1,
            adjustY: 1
        };
        /** @type {!Array} */
        var Zu = [0, 0];
        var out = {
            topLeft: {
                points: ["bl", "tl"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, -4],
                targetOffset: Zu
            },
            topCenter: {
                points: ["bc", "tc"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, -4],
                targetOffset: Zu
            },
            topRight: {
                points: ["br", "tr"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, -4],
                targetOffset: Zu
            },
            bottomLeft: {
                points: ["tl", "bl"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, 4],
                targetOffset: Zu
            },
            bottomCenter: {
                points: ["tc", "bc"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, 4],
                targetOffset: Zu
            },
            bottomRight: {
                points: ["tr", "br"],
                overflow: DEFAULT_NAMESPACE,
                offset: [0, 4],
                targetOffset: Zu
            }
        };
        /** @type {number} */
        var lockForEditingKeycode = key.ESC;
        /** @type {number} */
        var quasimodeKeycode = key.TAB;
        /** @type {!Array} */
        var elementId = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus"];
        var z = React.forwardRef(open);
        var TabTemplate = React.forwardRef(Form);
        var Window = React.memo(React.forwardRef(setup), function (isSlidingUp, canCreateDiscussions) {
            return canCreateDiscussions.tabMoving;
        });
        var context = (0, React.createContext)(null);
        /** @type {number} */
        var zoomScale = Math.pow(.995, 20);
        /**
         * @param {!Object} options
         * @return {?}
         */
        var Input = function (options) {
            var n;
            var origin = options.position;
            var name = options.prefixCls;
            var value = options.extra;
            if (!value) {
                return null;
            }
            var i = {};
            return value && "object" === stringify(value) && !React.isValidElement(value) ? i = value : i.right = value, "right" === origin && (n = i.right), "left" === origin && (n = i.left), n ? React.createElement("div", {
                className: "".concat(name, "-extra-content")
            }, n) : null;
        };
        var app = React.forwardRef(init);
        /** @type {!Array} */
        var components = ["id", "prefixCls", "className", "children", "direction", "activeKey", "defaultActiveKey", "editable", "animated", "tabPosition", "tabBarGutter", "tabBarStyle", "tabBarExtraContent", "locale", "moreIcon", "moreTransitionName", "destroyInactiveTabPane", "renderTabBar", "onChange", "onTabClick", "onTabScroll", "getPopupContainer", "popupClassName"];
        /** @type {number} */
        var currentValue = 0;
        var ReactBootstrap = React.forwardRef(generate);
        /** @type {function(!Object): ?} */
        ReactBootstrap.TabPane = toggle;
        var RedBox = ReactBootstrap;
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var sendMessage = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /** @type {function(!Object): ?} */
        run.TabPane = toggle;
        /** @type {function(!Object): ?} */
        var directory = run;
        /**
         * @return {?}
         */
        var attributeNameInfo = function () {
            return {
                height: 0,
                opacity: 0
            };
        };
        /**
         * @param {!Element} doc
         * @return {?}
         */
        var getDocRect = function (doc) {
            return {
                height: doc.scrollHeight,
                opacity: 1
            };
        };
        /**
         * @param {?} data
         * @param {!Object} event
         * @return {?}
         */
        var onPropertyChange = function (data, event) {
            return true === (null === event || void 0 === event ? void 0 : event.deadline) || "height" === event.propertyName;
        };
        var Oc = {
            motionName: "ant-motion-collapse",
            onAppearStart: attributeNameInfo,
            onEnterStart: attributeNameInfo,
            onAppearActive: getDocRect,
            onEnterActive: getDocRect,
            onLeaveStart: function (precomputedDimensions) {
                return {
                    height: precomputedDimensions ? precomputedDimensions.offsetHeight : 0
                };
            },
            onLeaveActive: attributeNameInfo,
            onAppearEnd: onPropertyChange,
            onEnterEnd: onPropertyChange,
            onLeaveEnd: onPropertyChange,
            motionDeadline: 500
        };
        /** @type {function(?, string, number): ?} */
        var findSDKs = (equal("bottomLeft", "bottomRight", "topLeft", "topRight"), function (x, text, express) {
            return void 0 !== express ? express : "".concat(x, "-").concat(text);
        });
        var surfaceContext = Oc;
        /** @type {!Array} */
        var singular = [];
        /**
         * @param {!Object} node
         * @param {!Object} x
         * @return {?}
         */
        var getOffset = function (node, x) {
            var display = node.isConnected || node.ownerDocument.documentElement.contains(node);
            if (abs(x) && "function" === typeof x.behavior) {
                return x.behavior(display ? show(node, x) : []);
            }
            if (display) {
                var text = function (n) {
                    return false === n ? {
                        block: "end",
                        inline: "nearest"
                    } : abs(n) ? n : {
                        block: "start",
                        inline: "nearest"
                    };
                }(x);
                return function (wrappersTemplates, sortMode) {
                    if (void 0 === sortMode) {
                        /** @type {string} */
                        sortMode = "auto";
                    }
                    /** @type {boolean} */
                    var scrollEl = "scrollBehavior" in document.body.style;
                    wrappersTemplates.forEach(function (box) {
                        var el = box.el;
                        var top = box.top;
                        var left = box.left;
                        if (el.scroll && scrollEl) {
                            el.scroll({
                                top: top,
                                left: left,
                                behavior: sortMode
                            });
                        } else {
                            el.scrollTop = top;
                            el.scrollLeft = left;
                        }
                    });
                }(show(node, text), text.behavior);
            }
        };
        /** @type {!Array} */
        var statusName = ["parentNode"];
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var omit = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} options
         * @param {!Function} elem
         * @return {?}
         */
        var refresh = function (options, elem) {
            var err;
            var request = React.useContext(foobar);
            var _undefined = React.useContext(readonly);
            var obj = React.useContext(object);
            var o = obj.getPrefixCls;
            var normal = obj.direction;
            var node = obj.form;
            var callback = options.prefixCls;
            var key = options.className;
            var name = void 0 === key ? "" : key;
            var string = options.size;
            var type = void 0 === string ? request : string;
            var disabled = options.disabled;
            var shouldDisable = void 0 === disabled ? _undefined : disabled;
            var self = options.form;
            var data = options.colon;
            var labelAlign = options.labelAlign;
            var pagesToDisplay = options.labelWrap;
            var labelCol = options.labelCol;
            var wrapperCol = options.wrapperCol;
            var gen_code_options = options.hideRequiredMark;
            var desc = options.layout;
            var dir = void 0 === desc ? "horizontal" : desc;
            var text = options.scrollToFirstError;
            var easeVal = options.requiredMark;
            var readOnlyFn = options.onFinishFailed;
            var x = options.name;
            var inherited = omit(options, ["prefixCls", "className", "size", "disabled", "form", "colon", "labelAlign", "labelWrap", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "requiredMark", "onFinishFailed", "name"]);
            var hash = (0, React.useMemo)(function () {
                return void 0 !== easeVal ? easeVal : node && void 0 !== node.requiredMark ? node.requiredMark : !gen_code_options;
            }, [gen_code_options, easeVal, node]);
            var outcomeResults = null !== data && void 0 !== data ? data : null === node || void 0 === node ? void 0 : node.colon;
            var r = o("form", callback);
            var engine = require()(r, (debug(err = {}, "".concat(r, "-").concat(dir), true), debug(err, "".concat(r, "-hide-required-mark"), false === hash), debug(err, "".concat(r, "-rtl"), "rtl" === normal), debug(err, "".concat(r, "-").concat(type), type), err), name);
            var params = call(code(self), 1)[0];
            var t = params.__INTERNAL__;
            t.name = x;
            var command_module_id = (0, React.useMemo)(function () {
                return {
                    name: x,
                    labelAlign: labelAlign,
                    labelCol: labelCol,
                    labelWrap: pagesToDisplay,
                    wrapperCol: wrapperCol,
                    vertical: "vertical" === dir,
                    colon: outcomeResults,
                    requiredMark: hash,
                    itemRef: t.itemRef,
                    form: params
                };
            }, [x, labelAlign, labelCol, wrapperCol, dir, outcomeResults, hash, params]);
            React.useImperativeHandle(elem, function () {
                return params;
            });
            return React.createElement(keyword, {
                disabled: shouldDisable
            }, React.createElement(row, {
                size: type
            }, React.createElement(child.Provider, {
                value: command_module_id
            }, React.createElement(TodosLogin, _extends({
                id: x
            }, inherited, {
                name: x,
                onFinishFailed: function (res) {
                    if (!(null === readOnlyFn || void 0 === readOnlyFn)) {
                        readOnlyFn(res);
                    }
                    var item = {
                        block: "nearest"
                    };
                    if (text && res.errorFields.length) {
                        if ("object" === stringify(text)) {
                            item = text;
                        }
                        params.scrollToField(res.errorFields[0].name, item);
                    }
                },
                form: params,
                className: engine
            })))));
        };
        var _env = React.forwardRef(refresh);
        /**
         * @return {?}
         */
        var failed = function () {
            return {
                status: (0, React.useContext)(channel).status
            };
        };
        var cmeta = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"
                    }
                }]
            },
            name: "check-circle",
            theme: "filled"
        };
        /**
         * @param {?} context
         * @param {string} child
         * @return {?}
         */
        var List = function (context, child) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: child,
                icon: cmeta
            }));
        };
        /** @type {string} */
        List.displayName = "CheckCircleFilled";
        var handleMilestone = React.forwardRef(List);
        var iconObj = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                    }
                }]
            },
            name: "exclamation-circle",
            theme: "filled"
        };
        /**
         * @param {?} config
         * @param {string} model
         * @return {?}
         */
        var button = function (config, model) {
            return React.createElement(VictoryLine, assign(assign({}, config), {}, {
                ref: model,
                icon: iconObj
            }));
        };
        /** @type {string} */
        button.displayName = "ExclamationCircleFilled";
        var warning = React.forwardRef(button);
        var templates = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "0 0 1024 1024",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                    }
                }]
            },
            name: "loading",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} label
         * @return {?}
         */
        var source = function (context, label) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: label,
                icon: templates
            }));
        };
        /** @type {string} */
        source.displayName = "LoadingOutlined";
        var dialogWindow;
        var VInput = React.forwardRef(source);
        /**
         * @return {?}
         */
        var showDialog = function () {
            if (!translate() || !window.document.documentElement) {
                return false;
            }
            if (void 0 !== dialogWindow) {
                return dialogWindow;
            }
            /** @type {!Element} */
            var div = document.createElement("div");
            return div.style.display = "flex", div.style.flexDirection = "column", div.style.rowGap = "1px", div.appendChild(document.createElement("div")), div.appendChild(document.createElement("div")), document.body.appendChild(div), dialogWindow = 1 === div.scrollHeight, document.body.removeChild(div), dialogWindow;
        };
        /** @type {!Array} */
        var models = ["xxl", "xl", "lg", "md", "sm", "xs"];
        var o = {
            xs: "(max-width: 575px)",
            sm: "(min-width: 576px)",
            md: "(min-width: 768px)",
            lg: "(min-width: 992px)",
            xl: "(min-width: 1200px)",
            xxl: "(min-width: 1600px)"
        };
        /** @type {!Map} */
        var cache = new Map;
        /** @type {number} */
        var rate_path = -1;
        var namespace = {};
        var PubSub = {
            matchHandlers: {},
            dispatch: function (value) {
                return namespace = value, cache.forEach(function (callback) {
                    return callback(namespace);
                }), cache.size >= 1;
            },
            subscribe: function (callback) {
                return cache.size || this.register(), rate_path = rate_path + 1, cache.set(rate_path, callback), callback(namespace), rate_path;
            },
            unsubscribe: function (value) {
                cache.delete(value);
                if (!cache.size) {
                    this.unregister();
                }
            },
            unregister: function () {
                var vroot = this;
                Object.keys(o).forEach(function (direction) {
                    var i = o[direction];
                    var listener = vroot.matchHandlers[i];
                    if (!(null === listener || void 0 === listener)) {
                        listener.mql.removeListener(null === listener || void 0 === listener ? void 0 : listener.listener);
                    }
                });
                cache.clear();
            },
            register: function () {
                var _this = this;
                Object.keys(o).forEach(function (key) {
                    var mediaQuery = o[key];
                    /**
                     * @param {!Element} a
                     * @return {undefined}
                     */
                    var listener = function (a) {
                        var height = a.matches;
                        _this.dispatch(_extends(_extends({}, namespace), debug({}, key, height)));
                    };
                    /** @type {(MediaQueryList|null)} */
                    var mql = window.matchMedia(mediaQuery);
                    mql.addListener(listener);
                    _this.matchHandlers[mediaQuery] = {
                        mql: mql,
                        listener: listener
                    };
                    listener(mql);
                });
            }
        };
        var root = (0, React.createContext)({});
        /**
         * @param {!Object} value
         * @param {!Array} obj
         * @return {?}
         */
        var testcase = function (value, obj) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && obj.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (obj.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var panSpeed = (equal("top", "middle", "bottom", "stretch"), equal("start", "end", "center", "space-around", "space-between", "space-evenly"), React.forwardRef(function (options, oldRef) {
            var err;
            var container = options.prefixCls;
            var i = options.justify;
            var ext = options.align;
            var name = options.className;
            var style = options.style;
            var items = options.children;
            var node = options.gutter;
            var val = void 0 === node ? 0 : node;
            var wrap = options.wrap;
            var inherited = testcase(options, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]);
            var result = React.useContext(object);
            var $ = result.getPrefixCls;
            var hash = result.direction;
            var data = call(React.useState({
                xs: true,
                sm: true,
                md: true,
                lg: true,
                xl: true,
                xxl: true
            }), 2);
            var g = data[0];
            var a = data[1];
            var r = function () {
                var group = call(React.useState(false), 2);
                var endtoken = group[0];
                var low = group[1];
                return React.useEffect(function () {
                    low(showDialog());
                }, []), endtoken;
            }();
            var timestampGenerator = React.useRef(val);
            React.useEffect(function () {
                var topicA = PubSub.subscribe(function (s) {
                    var obj = timestampGenerator.current || 0;
                    if (!Array.isArray(obj) && "object" === stringify(obj) || Array.isArray(obj) && ("object" === stringify(obj[0]) || "object" === stringify(obj[1]))) {
                        a(s);
                    }
                });
                return function () {
                    return PubSub.unsubscribe(topicA);
                };
            }, []);
            var e = $("row", container);
            var Default = function () {
                /** @type {!Array} */
                var result = [void 0, void 0];
                return (Array.isArray(val) ? val : [val, void 0]).forEach(function (obj, name) {
                    if ("object" === stringify(obj)) {
                        /** @type {number} */
                        var i = 0;
                        for (; i < models.length; i++) {
                            var index = models[i];
                            if (g[index] && void 0 !== obj[index]) {
                                result[name] = obj[index];
                                break;
                            }
                        }
                    } else {
                        /** @type {!Function} */
                        result[name] = obj;
                    }
                }), result;
            }();
            var localPath = require()(e, (debug(err = {}, "".concat(e, "-no-wrap"), false === wrap), debug(err, "".concat(e, "-").concat(i), i), debug(err, "".concat(e, "-").concat(ext), ext), debug(err, "".concat(e, "-rtl"), "rtl" === hash), err), name);
            var d = {};
            /** @type {(number|undefined)} */
            var marginSize = null != Default[0] && Default[0] > 0 ? Default[0] / -2 : void 0;
            /** @type {(number|undefined)} */
            var value = null != Default[1] && Default[1] > 0 ? Default[1] / -2 : void 0;
            if (marginSize && (d.marginLeft = marginSize, d.marginRight = marginSize), r) {
                var group = call(Default, 2);
                d.rowGap = group[1];
            } else {
                if (value) {
                    /** @type {number} */
                    d.marginTop = value;
                    /** @type {number} */
                    d.marginBottom = value;
                }
            }
            var group = call(Default, 2);
            var endtoken = group[0];
            var curColAtIdx = group[1];
            var command_module_id = React.useMemo(function () {
                return {
                    gutter: [endtoken, curColAtIdx],
                    wrap: wrap,
                    supportFlexGap: r
                };
            }, [endtoken, curColAtIdx, wrap, r]);
            return React.createElement(root.Provider, {
                value: command_module_id
            }, React.createElement("div", _extends({}, inherited, {
                className: localPath,
                style: _extends(_extends({}, d), style),
                ref: oldRef
            }), items));
        }));
        var SimpleBinding = panSpeed;
        var refreshBtn = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"
                    }
                }]
            },
            name: "question-circle",
            theme: "outlined"
        };
        /**
         * @param {?} headers
         * @param {string} data
         * @return {?}
         */
        var message = function (headers, data) {
            return React.createElement(VictoryLine, assign(assign({}, headers), {}, {
                ref: data,
                icon: refreshBtn
            }));
        };
        /** @type {string} */
        message.displayName = "QuestionCircleOutlined";
        var div = React.forwardRef(message);
        /**
         * @param {!Object} value
         * @param {!Array} out
         * @return {?}
         */
        var reduce = function (value, out) {
            var acc = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && out.indexOf(path) < 0) {
                    acc[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (out.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        acc[path[i]] = value[path[i]];
                    }
                }
            }
            return acc;
        };
        /** @type {!Array} */
        var sizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
        var G__11635 = React.forwardRef(function (config, oldRef) {
            var err;
            var parent = React.useContext(object);
            var $ = parent.getPrefixCls;
            var direction = parent.direction;
            var props = React.useContext(root);
            var g = props.gutter;
            var oldV = props.wrap;
            var autoRemove = props.supportFlexGap;
            var attributes = config.prefixCls;
            var script = config.span;
            var data = config.order;
            var i = config.offset;
            var p = config.push;
            var ext = config.pull;
            var name = config.className;
            var tabHeads = config.children;
            var value = config.flex;
            var style = config.style;
            var attrs = reduce(config, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);
            var t = $("col", attributes);
            var params = {};
            sizes.forEach(function (i) {
                var err;
                var props = {};
                var node = config[i];
                if ("number" === typeof node) {
                    /** @type {number} */
                    props.span = node;
                } else {
                    if ("object" === stringify(node)) {
                        props = node || {};
                    }
                }
                delete attrs[i];
                params = _extends(_extends({}, params), (debug(err = {}, "".concat(t, "-").concat(i, "-").concat(props.span), void 0 !== props.span), debug(err, "".concat(t, "-").concat(i, "-order-").concat(props.order), props.order || 0 === props.order), debug(err, "".concat(t, "-").concat(i, "-offset-").concat(props.offset), props.offset || 0 === props.offset), debug(err, "".concat(t, "-").concat(i, "-push-").concat(props.push), props.push || 0 === props.push), debug(err, "".concat(t, "-").concat(i, "-pull-").concat(props.pull),
                    props.pull || 0 === props.pull), debug(err, "".concat(t, "-rtl"), "rtl" === direction), err));
            });
            var result = require()(t, (debug(err = {}, "".concat(t, "-").concat(script), void 0 !== script), debug(err, "".concat(t, "-order-").concat(data), data), debug(err, "".concat(t, "-offset-").concat(i), i), debug(err, "".concat(t, "-push-").concat(p), p), debug(err, "".concat(t, "-pull-").concat(ext), ext), err), name, params);
            var options = {};
            if (g && g[0] > 0) {
                /** @type {number} */
                var indent = g[0] / 2;
                /** @type {number} */
                options.paddingLeft = indent;
                /** @type {number} */
                options.paddingRight = indent;
            }
            if (g && g[1] > 0 && !autoRemove) {
                /** @type {number} */
                var value = g[1] / 2;
                /** @type {number} */
                options.paddingTop = value;
                /** @type {number} */
                options.paddingBottom = value;
            }
            return value && (options.flex = function (num) {
                return "number" === typeof num ? "".concat(num, " ").concat(num, " auto") : /^\d+(\.\d+)?(px|em|rem|%)$/.test(num) ? "0 0 ".concat(num) : num;
            }(value), false !== oldV || options.minWidth || (options.minWidth = 0)), React.createElement("div", _extends({}, attrs, {
                style: _extends(_extends({}, options), style),
                className: result,
                ref: oldRef
            }), tabHeads);
        });
        var Radar = G__11635;
        var parts = (0, React.createContext)(void 0);
        var inputProps = {
            placeholder: "Select time",
            rangePlaceholder: ["Start time", "End time"]
        };
        var CalendarMarkup = {
            lang: _extends({
                placeholder: "Select date",
                yearPlaceholder: "Select year",
                quarterPlaceholder: "Select quarter",
                monthPlaceholder: "Select month",
                weekPlaceholder: "Select week",
                rangePlaceholder: ["Start date", "End date"],
                rangeYearPlaceholder: ["Start year", "End year"],
                rangeQuarterPlaceholder: ["Start quarter", "End quarter"],
                rangeMonthPlaceholder: ["Start month", "End month"],
                rangeWeekPlaceholder: ["Start week", "End week"]
            }, {
                locale: "en_US",
                today: "Today",
                now: "Now",
                backToToday: "Back to today",
                ok: "OK",
                clear: "Clear",
                month: "Month",
                year: "Year",
                timeSelect: "select time",
                dateSelect: "select date",
                weekSelect: "Choose a week",
                monthSelect: "Choose a month",
                yearSelect: "Choose a year",
                decadeSelect: "Choose a decade",
                yearFormat: "YYYY",
                dateFormat: "M/D/YYYY",
                dayFormat: "D",
                dateTimeFormat: "M/D/YYYY HH:mm:ss",
                monthBeforeYear: true,
                previousMonth: "Previous month (PageUp)",
                nextMonth: "Next month (PageDown)",
                previousYear: "Last year (Control + left)",
                nextYear: "Next year (Control + right)",
                previousDecade: "Last decade",
                nextDecade: "Next decade",
                previousCentury: "Last century",
                nextCentury: "Next century"
            }),
            timePickerLocale: _extends({}, inputProps)
        };
        /** @type {string} */
        var value = "${label} is not a valid ${type}";
        var Backbone = {
            locale: "en",
            Pagination: {
                items_per_page: "/ page",
                jump_to: "Go to",
                jump_to_confirm: "confirm",
                page: "Page",
                prev_page: "Previous Page",
                next_page: "Next Page",
                prev_5: "Previous 5 Pages",
                next_5: "Next 5 Pages",
                prev_3: "Previous 3 Pages",
                next_3: "Next 3 Pages",
                page_size: "Page Size"
            },
            DatePicker: CalendarMarkup,
            TimePicker: inputProps,
            Calendar: CalendarMarkup,
            global: {
                placeholder: "Please select"
            },
            Table: {
                filterTitle: "Filter menu",
                filterConfirm: "OK",
                filterReset: "Reset",
                filterEmptyText: "No filters",
                filterCheckall: "Select all items",
                filterSearchPlaceholder: "Search in filters",
                emptyText: "No data",
                selectAll: "Select current page",
                selectInvert: "Invert current page",
                selectNone: "Clear all data",
                selectionAll: "Select all data",
                sortTitle: "Sort",
                expand: "Expand row",
                collapse: "Collapse row",
                triggerDesc: "Click to sort descending",
                triggerAsc: "Click to sort ascending",
                cancelSort: "Click to cancel sorting"
            },
            Modal: {
                okText: "OK",
                cancelText: "Cancel",
                justOkText: "OK"
            },
            Popconfirm: {
                okText: "OK",
                cancelText: "Cancel"
            },
            Transfer: {
                titles: ["", ""],
                searchPlaceholder: "Search here",
                itemUnit: "item",
                itemsUnit: "items",
                remove: "Remove",
                selectCurrent: "Select current page",
                removeCurrent: "Remove current page",
                selectAll: "Select all data",
                removeAll: "Remove all data",
                selectInvert: "Invert current page"
            },
            Upload: {
                uploading: "Uploading...",
                removeFile: "Remove file",
                uploadError: "Upload error",
                previewFile: "Preview file",
                downloadFile: "Download file"
            },
            Empty: {
                description: "No Data"
            },
            Icon: {
                icon: "icon"
            },
            Text: {
                edit: "Edit",
                copy: "Copy",
                copied: "Copied",
                expand: "Expand"
            },
            PageHeader: {
                back: "Back"
            },
            Form: {
                optional: "(optional)",
                defaultValidateMessages: {
                    default: "Field validation error for ${label}",
                    required: "Please enter ${label}",
                    enum: "${label} must be one of [${enum}]",
                    whitespace: "${label} cannot be a blank character",
                    date: {
                        format: "${label} date format is invalid",
                        parse: "${label} cannot be converted to a date",
                        invalid: "${label} is an invalid date"
                    },
                    types: {
                        string: value,
                        method: value,
                        array: value,
                        object: value,
                        number: value,
                        date: value,
                        boolean: value,
                        integer: value,
                        float: value,
                        regexp: value,
                        email: value,
                        url: value,
                        hex: value
                    },
                    string: {
                        len: "${label} must be ${len} characters",
                        min: "${label} must be at least ${min} characters",
                        max: "${label} must be up to ${max} characters",
                        range: "${label} must be between ${min}-${max} characters"
                    },
                    number: {
                        len: "${label} must be equal to ${len}",
                        min: "${label} must be minimum ${min}",
                        max: "${label} must be maximum ${max}",
                        range: "${label} must be between ${min}-${max}"
                    },
                    array: {
                        len: "Must be ${len} ${label}",
                        min: "At least ${min} ${label}",
                        max: "At most ${max} ${label}",
                        range: "The amount of ${label} must be between ${min}-${max}"
                    },
                    pattern: {
                        mismatch: "${label} does not match the pattern ${pattern}"
                    }
                }
            },
            Image: {
                preview: "Preview"
            }
        };
        var _tweenLookup = Backbone;
        var widget = function (name) {
            /**
             * @return {?}
             */
            function n() {
                return log(this, n), f.apply(this, arguments);
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "getLocale",
                value: function () {
                    var action = this.props;
                    var id = action.componentName;
                    var value = action.defaultLocale || _tweenLookup[null !== id && void 0 !== id ? id : "global"];
                    var proxyMapById = this.context;
                    var l10n = id && proxyMapById ? proxyMapById[id] : {};
                    return _extends(_extends({}, value instanceof Function ? value() : value), l10n || {});
                }
            }, {
                key: "getLocaleCode",
                value: function () {
                    var ctx = this.context;
                    var targetNode = ctx && ctx.locale;
                    return ctx && ctx.exist && !targetNode ? _tweenLookup.locale : targetNode;
                }
            }, {
                key: "render",
                value: function () {
                    return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
                }
            }]), n;
        }(React.Component);
        widget.defaultProps = {
            componentName: "global"
        };
        widget.contextType = parts;
        var createOverflowButton = {
            adjustX: 1,
            adjustY: 1
        };
        /** @type {!Array} */
        var Fs = [0, 0];
        var choices = {
            left: {
                points: ["cr", "cl"],
                overflow: createOverflowButton,
                offset: [-4, 0],
                targetOffset: Fs
            },
            right: {
                points: ["cl", "cr"],
                overflow: createOverflowButton,
                offset: [4, 0],
                targetOffset: Fs
            },
            top: {
                points: ["bc", "tc"],
                overflow: createOverflowButton,
                offset: [0, -4],
                targetOffset: Fs
            },
            bottom: {
                points: ["tc", "bc"],
                overflow: createOverflowButton,
                offset: [0, 4],
                targetOffset: Fs
            },
            topLeft: {
                points: ["bl", "tl"],
                overflow: createOverflowButton,
                offset: [0, -4],
                targetOffset: Fs
            },
            leftTop: {
                points: ["tr", "tl"],
                overflow: createOverflowButton,
                offset: [-4, 0],
                targetOffset: Fs
            },
            topRight: {
                points: ["br", "tr"],
                overflow: createOverflowButton,
                offset: [0, -4],
                targetOffset: Fs
            },
            rightTop: {
                points: ["tl", "tr"],
                overflow: createOverflowButton,
                offset: [4, 0],
                targetOffset: Fs
            },
            bottomRight: {
                points: ["tr", "br"],
                overflow: createOverflowButton,
                offset: [0, 4],
                targetOffset: Fs
            },
            rightBottom: {
                points: ["bl", "br"],
                overflow: createOverflowButton,
                offset: [4, 0],
                targetOffset: Fs
            },
            bottomLeft: {
                points: ["tl", "bl"],
                overflow: createOverflowButton,
                offset: [0, 4],
                targetOffset: Fs
            },
            leftBottom: {
                points: ["br", "bl"],
                overflow: createOverflowButton,
                offset: [-4, 0],
                targetOffset: Fs
            }
        };
        /**
         * @param {!Object} options
         * @param {?} overwrite
         * @return {?}
         */
        var setOptions = function (options, overwrite) {
            var readOnlyFn = options.overlayClassName;
            var name = options.trigger;
            var what = void 0 === name ? ["hover"] : name;
            var prefix = options.mouseEnterDelay;
            var partial = void 0 === prefix ? 0 : prefix;
            var decimals = options.mouseLeaveDelay;
            var c = void 0 === decimals ? .1 : decimals;
            var pagesToDisplay = options.overlayStyle;
            var object = options.prefixCls;
            var self = void 0 === object ? "rc-tooltip" : object;
            var i = options.children;
            var gen_code_options = options.onVisibleChange;
            var easeVal = options.afterVisibleChange;
            var sTransitionName = options.transitionName;
            var animationOptions = options.animation;
            var m = options.motion;
            var key = options.placement;
            var newElKey = void 0 === key ? "right" : key;
            var value = options.align;
            var valueForScale = void 0 === value ? {} : value;
            var require = options.destroyTooltipOnHide;
            var o = void 0 !== require && require;
            var nameVersions = options.defaultVisible;
            var injectAs = options.getTooltipContainer;
            var progressClb = options.overlayInnerStyle;
            var includerReg = options.arrowContent;
            var id = options.overlay;
            var libraryID = options.id;
            var showArrow = options.showArrow;
            var obj = get(options, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow"]);
            var editor = (0, React.useRef)(null);
            (0, React.useImperativeHandle)(overwrite, function () {
                return editor.current;
            });
            var item = assign({}, obj);
            if ("visible" in options) {
                item.popupVisible = options.visible;
            }
            /** @type {boolean} */
            var r = false;
            /** @type {boolean} */
            var needsAlpha = false;
            if ("boolean" === typeof o) {
                /** @type {boolean} */
                r = o;
            } else {
                if (o && "object" === stringify(o)) {
                    var a = o.keepParent;
                    /** @type {boolean} */
                    r = true === a;
                    /** @type {boolean} */
                    needsAlpha = false === a;
                }
            }
            return React.createElement(PivotButton, _extends({
                popupClassName: readOnlyFn,
                prefixCls: self,
                popup: function () {
                    return React.createElement(Slider, {
                        showArrow: showArrow,
                        arrowContent: includerReg,
                        key: "content",
                        prefixCls: self,
                        id: libraryID,
                        overlayInnerStyle: progressClb
                    }, id);
                },
                action: what,
                builtinPlacements: choices,
                popupPlacement: newElKey,
                ref: editor,
                popupAlign: valueForScale,
                getPopupContainer: injectAs,
                onPopupVisibleChange: gen_code_options,
                afterPopupVisibleChange: easeVal,
                popupTransitionName: sTransitionName,
                popupAnimation: animationOptions,
                popupMotion: m,
                defaultPopupVisible: nameVersions,
                destroyPopupOnHide: r,
                autoDestroy: needsAlpha,
                mouseLeaveDelay: c,
                popupStyle: pagesToDisplay,
                mouseEnterDelay: partial
            }, item), i);
        };
        var VictoryAxis = (0, React.forwardRef)(setOptions);
        var messages = equal("success", "processing", "error", "default", "warning");
        var expected = equal("pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime");
        var loaded = {
            adjustX: 1,
            adjustY: 1
        };
        var name = {
            adjustX: 0,
            adjustY: 0
        };
        /** @type {!Array} */
        var targetOffset = [0, 0];
        /**
         * @param {!Object} value
         * @param {!Array} result
         * @return {?}
         */
        var runTest = function (value, result) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && result.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (result.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /** @type {!RegExp} */
        var COLOR_REGEX = new RegExp("^(".concat(expected.join("|"), ")(-inverse)?$"));
        var EventCalendar = React.forwardRef(function (options, oldRef) {
            var err;
            var o = React.useContext(object);
            var list = o.getPopupContainer;
            var String = o.getPrefixCls;
            var direction = o.direction;
            var group = call(done(false, {
                value: options.visible,
                defaultValue: options.defaultVisible
            }), 2);
            var item = group[0];
            var ASSERT = group[1];
            /**
             * @return {?}
             */
            var gotoNewOfflinePage = function () {
                var pTitle = options.title;
                var overlay = options.overlay;
                return !pTitle && !overlay && 0 !== pTitle;
            };
            /**
             * @return {?}
             */
            var addAdapterCorners = function () {
                var gen_code_options = options.builtinPlacements;
                var readOnlyFn = options.arrowPointAtCenter;
                var pagesToDisplay = options.autoAdjustOverflow;
                return gen_code_options || createCornerElements({
                    arrowPointAtCenter: readOnlyFn,
                    autoAdjustOverflow: pagesToDisplay
                });
            };
            var put_file = options.getPopupContainer;
            var inherited = runTest(options, ["getPopupContainer"]);
            var end = options.prefixCls;
            var type = options.openClassName;
            var erase_prefix = options.getTooltipContainer;
            var permissions = options.overlayClassName;
            var color = options.color;
            var namespace = options.overlayInnerStyle;
            var c = options.children;
            var data = String("tooltip", end);
            var dir = String();
            var value = item;
            if (!("visible" in options) && gotoNewOfflinePage()) {
                /** @type {boolean} */
                value = false;
            }
            var val;
            var result = reset(isString(c) ? c : React.createElement("span", null, c), data);
            var config = result.props;
            var langClass = require()(config.className, debug({}, type || "".concat(data, "-open"), true));
            var groupPermissionsRef = require()(permissions, (debug(err = {}, "".concat(data, "-rtl"), "rtl" === direction), debug(err, "".concat(data, "-").concat(color), color && COLOR_REGEX.test(color)), err));
            var okfunc = namespace;
            return color && !COLOR_REGEX.test(color) && (okfunc = _extends(_extends({}, namespace), {
                background: color
            }), val = {
                "--antd-arrow-background-color": color
            }), React.createElement(VictoryAxis, _extends({}, inherited, {
                prefixCls: data,
                overlayClassName: groupPermissionsRef,
                getTooltipContainer: put_file || erase_prefix || list,
                ref: oldRef,
                builtinPlacements: addAdapterCorners(),
                overlay: function () {
                    var s = options.title;
                    var t = options.overlay;
                    return 0 === s ? s : t || s || "";
                }(),
                visible: value,
                onVisibleChange: function (name) {
                    var debug;
                    ASSERT(!gotoNewOfflinePage() && name);
                    if (!(gotoNewOfflinePage() || null === (debug = options.onVisibleChange) || void 0 === debug)) {
                        debug.call(options, name);
                    }
                },
                onPopupAlign: function (mirror, file) {
                    var data = addAdapterCorners();
                    /** @type {(string|undefined)} */
                    var option = Object.keys(data).find(function (userID) {
                        return data[userID].points[0] === file.points[0] && data[userID].points[1] === file.points[1];
                    });
                    if (option) {
                        var cssChanges = mirror.getBoundingClientRect();
                        var options = {
                            top: "50%",
                            left: "50%"
                        };
                        if (option.indexOf("top") >= 0 || option.indexOf("Bottom") >= 0) {
                            /** @type {string} */
                            options.top = "".concat(cssChanges.height - file.offset[1], "px");
                        } else {
                            if (option.indexOf("Top") >= 0 || option.indexOf("bottom") >= 0) {
                                /** @type {string} */
                                options.top = "".concat(-file.offset[1], "px");
                            }
                        }
                        if (option.indexOf("left") >= 0 || option.indexOf("Right") >= 0) {
                            /** @type {string} */
                            options.left = "".concat(cssChanges.width - file.offset[0], "px");
                        } else {
                            if (option.indexOf("right") >= 0 || option.indexOf("Left") >= 0) {
                                /** @type {string} */
                                options.left = "".concat(-file.offset[0], "px");
                            }
                        }
                        /** @type {string} */
                        mirror.style.transformOrigin = "".concat(options.left, " ").concat(options.top);
                    }
                },
                overlayInnerStyle: okfunc,
                arrowContent: React.createElement("span", {
                    className: "".concat(data, "-arrow-content"),
                    style: val
                }),
                motion: {
                    motionName: findSDKs(dir, "zoom-big-fast", options.transitionName),
                    motionDeadline: 1E3
                }
            }), value ? $(result, {
                className: langClass
            }) : result);
        });
        EventCalendar.defaultProps = {
            placement: "top",
            mouseEnterDelay: .1,
            mouseLeaveDelay: .1,
            arrowPointAtCenter: false,
            autoAdjustOverflow: true
        };
        var header = EventCalendar;
        /**
         * @param {!Object} value
         * @param {!Array} parent
         * @return {?}
         */
        var clone = function (value, parent) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && parent.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (parent.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var constructor = function (options) {
            var name = options.prefixCls;
            var str = options.label;
            var htmlFor = options.htmlFor;
            var win = options.labelCol;
            var focused = options.labelAlign;
            var error = options.colon;
            var method = options.required;
            var hash = options.requiredMark;
            var old = options.tooltip;
            var Form = function (id, options) {
                var proxyMapById = React.useContext(parts);
                var o = React.useMemo(function () {
                    var definition = options || _tweenLookup[id || "global"];
                    var l10n = id && proxyMapById ? proxyMapById[id] : {};
                    return _extends(_extends({}, "function" === typeof definition ? definition() : definition), l10n || {});
                }, [id, options, proxyMapById]);
                return [o];
            }("Form");
            var tag = call(Form, 1)[0];
            return str ? React.createElement(child.Consumer, {
                key: "label"
            }, function (legend) {
                var err;
                var contactsForm;
                var alreadyMarked = legend.vertical;
                var hovered = legend.labelAlign;
                var exisiting = legend.labelCol;
                var legendOptions = legend.labelWrap;
                var requestedAnnotationType = legend.colon;
                var data = win || exisiting || {};
                var undefined = focused || hovered;
                /** @type {string} */
                var key = "".concat(name, "-item-label");
                var langClass = require()(key, "left" === undefined && "".concat(key, "-left"), data.className, debug({}, "".concat(key, "-wrap"), !!legendOptions));
                var value = str;
                /** @type {boolean} */
                var selfCompletionActive = true === error || false !== requestedAnnotationType && false !== error;
                if (selfCompletionActive && !alreadyMarked && "string" === typeof str && "" !== str.trim()) {
                    /** @type {string} */
                    value = str.replace(/[:|\uff1a]\s*$/, "");
                }
                var source = function (val) {
                    return val ? "object" !== stringify(val) || React.isValidElement(val) ? {
                        title: val
                    } : val : null;
                }(old);
                if (source) {
                    var code = source.icon;
                    var label = void 0 === code ? React.createElement(div, null) : code;
                    var props = clone(source, ["icon"]);
                    var index = React.createElement(header, _extends({}, props), React.cloneElement(label, {
                        className: "".concat(name, "-item-tooltip"),
                        title: ""
                    }));
                    value = React.createElement(React.Fragment, null, value, index);
                }
                if (!("optional" !== hash || method)) {
                    value = React.createElement(React.Fragment, null, value, React.createElement("span", {
                        className: "".concat(name, "-item-optional"),
                        title: ""
                    }, (null === tag || void 0 === tag ? void 0 : tag.optional) || (null === (contactsForm = Backbone.Form) || void 0 === contactsForm ? void 0 : contactsForm.optional)));
                }
                var valueClassName = require()((debug(err = {}, "".concat(name, "-item-required"), method), debug(err, "".concat(name, "-item-required-mark-optional"), "optional" === hash), debug(err, "".concat(name, "-item-no-colon"), !selfCompletionActive), err));
                return React.createElement(Radar, _extends({}, data, {
                    className: langClass
                }), React.createElement("label", {
                    htmlFor: htmlFor,
                    className: valueClassName,
                    title: "string" === typeof str ? str : ""
                }, value));
            }) : null;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var factory = function (options) {
            var _name = options.prefixCls;
            var status_code = options.status;
            var force = options.wrapperCol;
            var items = options.children;
            var data = options.errors;
            var warnings = options.warnings;
            var self = options._internalItemRender;
            var title = options.extra;
            var help = options.help;
            var value = options.marginBottom;
            var lbit_id = options.onErrorVisibleChanged;
            /** @type {string} */
            var name = "".concat(_name, "-item");
            var path = React.useContext(child);
            var args = force || path.wrapperCol || {};
            var langClass = require()("".concat(name, "-control"), args.className);
            var iFormDatePicker = React.useMemo(function () {
                return _extends({}, path);
            }, [path]);
            delete iFormDatePicker.labelCol;
            delete iFormDatePicker.wrapperCol;
            var header = React.createElement("div", {
                className: "".concat(name, "-control-input")
            }, React.createElement("div", {
                className: "".concat(name, "-control-input-content")
            }, items));
            var command_module_id = React.useMemo(function () {
                return {
                    prefixCls: _name,
                    status: status_code
                };
            }, [_name, status_code]);
            var scm_branches = null !== value || data.length || warnings.length ? React.createElement("div", {
                style: {
                    display: "flex",
                    flexWrap: "nowrap"
                }
            }, React.createElement(Menu.Provider, {
                value: command_module_id
            }, React.createElement(end, {
                errors: data,
                warnings: warnings,
                help: help,
                helpStatus: status_code,
                className: "".concat(name, "-explain-connected"),
                onVisibleChanged: lbit_id
            })), !!value && React.createElement("div", {
                style: {
                    width: 0,
                    height: value
                }
            })) : null;
            var e = title ? React.createElement("div", {
                className: "".concat(name, "-extra")
            }, title) : null;
            var categories = self && "pro_table_render" === self.mark && self.render ? self.render(options, {
                input: header,
                errorList: scm_branches,
                extra: e
            }) : React.createElement(React.Fragment, null, header, scm_branches, e);
            return React.createElement(child.Provider, {
                value: iFormDatePicker
            }, React.createElement(Radar, _extends({}, args, {
                className: langClass
            }), categories));
        };
        /**
         * @param {!Object} value
         * @param {!Array} result
         * @return {?}
         */
        var getProperty = function (value, result) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && result.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (result.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var service = {
            success: handleMilestone,
            warning: warning,
            error: v,
            validating: VInput
        };
        equal("success", "warning", "error", "validating", "");
        var SettingsTableRowForm = React.memo(function (postboard) {
            return postboard.children;
        }, function (result, options) {
            return result.value === options.value && result.update === options.update;
        });
        /**
         * @param {!Object} options
         * @return {?}
         */
        var load = function (options) {
            /**
             * @param {!Object} name
             * @param {string} tpl
             * @param {?} data
             * @return {?}
             */
            function get(name, tpl, data) {
                return url && !type ? name : React.createElement(add, _extends({
                    key: "row"
                }, options, {
                    prefixCls: el,
                    fieldId: tpl,
                    isRequired: data,
                    errors: errors,
                    warnings: debug,
                    meta: info,
                    onSubItemMetaChange: process
                }), name);
            }
            var value = options.name;
            var url = options.noStyle;
            var lowerPriority = options.dependencies;
            var item = options.prefixCls;
            var samePriority = options.shouldUpdate;
            var rules = options.rules;
            var data = options.children;
            var method = options.required;
            var content = options.label;
            var bounds = options.messageVariables;
            var side = options.trigger;
            var key = void 0 === side ? "onChange" : side;
            var stateName = options.validateTrigger;
            var type = options.hidden;
            var traverse = (0, React.useContext)(object).getPrefixCls;
            var id = (0, React.useContext)(child).name;
            /** @type {boolean} */
            var urlAttr = "function" === typeof data;
            var callback = (0, React.useContext)(redux);
            var main = (0, React.useContext)(path).validateTrigger;
            var state = void 0 !== stateName ? stateName : main;
            var isSpecialPage = function (name) {
                return !(void 0 === name || null === name);
            }(value);
            var el = traverse("form", item);
            var copy = React.useContext(part);
            var keyboard = React.useRef();
            var level = function (data) {
                var group = call(React.useState(data), 2);
                var endtoken = group[0];
                var low = group[1];
                var timer = (0, React.useRef)(null);
                var correction = (0, React.useRef)([]);
                var timestampGenerator = (0, React.useRef)(false);
                return React.useEffect(function () {
                    return timestampGenerator.current = false, function () {
                        /** @type {boolean} */
                        timestampGenerator.current = true;
                        $timeout.cancel(timer.current);
                        /** @type {null} */
                        timer.current = null;
                    };
                }, []), [endtoken, function (e) {
                    if (!timestampGenerator.current) {
                        if (null === timer.current) {
                            /** @type {!Array} */
                            correction.current = [];
                            timer.current = $timeout(function () {
                                /** @type {null} */
                                timer.current = null;
                                low(function (system_constant) {
                                    var t = system_constant;
                                    return correction.current.forEach(function (e) {
                                        t = e(t);
                                    }), t;
                                });
                            });
                        }
                        correction.current.push(e);
                    }
                }];
            }({});
            var label = call(level, 2);
            var langLocaleMap = label[0];
            var allStatementsAreSelectOnly = label[1];
            var cache = call(attr(function () {
                return {
                    errors: [],
                    warnings: [],
                    touched: false,
                    validating: false,
                    name: []
                };
            }), 2);
            var info = cache[0];
            var compiled = cache[1];
            /**
             * @param {!Object} value
             * @param {!Function} o
             * @return {undefined}
             */
            var process = function (value, o) {
                allStatementsAreSelectOnly(function (object) {
                    var obj = _extends({}, object);
                    /** @type {string} */
                    var privMapUv = [].concat(resolve(value.name.slice(0, -1)), resolve(o)).join("__SPLIT__");
                    return value.destroy ? delete obj[privMapUv] : obj[privMapUv] = value, obj;
                });
            };
            var localStorage = call(React.useMemo(function () {
                var all = resolve(info.errors);
                var instance = resolve(info.warnings);
                return Object.values(langLocaleMap).forEach(function (lintResults) {
                    all.push.apply(all, resolve(lintResults.errors || []));
                    instance.push.apply(instance, resolve(lintResults.warnings || []));
                }), [all, instance];
            }, [langLocaleMap, info.errors, info.warnings]), 2);
            var errors = localStorage[0];
            var debug = localStorage[1];
            var template = function () {
                var $ = React.useContext(child).itemRef;
                var arg = React.useRef({});
                return function (item, obj) {
                    var value = obj && "object" === stringify(obj) && obj.ref;
                    var key = item.join("_");
                    return arg.current.name === key && arg.current.originRef === value || (arg.current.name = key, arg.current.originRef = value, arg.current.ref = execute($(item), value)), arg.current.ref;
                };
            }();
            if (!isSpecialPage && !urlAttr && !lowerPriority) {
                return get(data);
            }
            var params = {};
            return "string" === typeof content ? params.label = content : value && (params.label = String(value)), bounds && (params = _extends(_extends({}, params), bounds)), React.createElement(wrapper, _extends({}, options, {
                messageVariables: params,
                trigger: key,
                validateTrigger: state,
                onMetaChange: function (data) {
                    var THREAD_STARTED = null === copy || void 0 === copy ? void 0 : copy.getKey(data.name);
                    if (compiled(data.destroy ? {
                        errors: [],
                        warnings: [],
                        touched: false,
                        validating: false,
                        name: []
                    } : data, true), url && callback) {
                        var mode = data.name;
                        if (data.destroy) {
                            mode = keyboard.current || mode;
                        } else {
                            if (void 0 !== THREAD_STARTED) {
                                var data = call(THREAD_STARTED, 2);
                                var a = data[0];
                                var s = data[1];
                                /** @type {!Array<?>} */
                                mode = [a].concat(resolve(s));
                                /** @type {!Array<?>} */
                                keyboard.current = mode;
                            }
                        }
                        callback(data, mode);
                    }
                }
            }), function (center, nameInterval, val) {
                var name = seed(value).length && nameInterval ? nameInterval.name : [];
                var index = has(name, id);
                var fn = void 0 !== method ? method : !(!rules || !rules.some(function (o) {
                    if (o && "object" === stringify(o) && o.required && !o.warningOnly) {
                        return true;
                    }
                    if ("function" === typeof o) {
                        var body = o(val);
                        return body && body.required && !body.warningOnly;
                    }
                    return false;
                }));
                var item = _extends({}, center);
                /** @type {null} */
                var label = null;
                if (Array.isArray(data) && isSpecialPage) {
                    label = data;
                } else {
                    if (urlAttr && (!samePriority && !lowerPriority || isSpecialPage)) {
                    } else {
                        if (!lowerPriority || urlAttr || isSpecialPage) {
                            if (isString(data)) {
                                var field = _extends(_extends({}, data.props), item);
                                if (!field.id) {
                                    field.id = index;
                                }
                                if (isFunction(data)) {
                                    field.ref = template(name, data);
                                }
                                (new Set([].concat(resolve(seed(key)), resolve(seed(state))))).forEach(function (property) {
                                    /**
                                     * @return {undefined}
                                     */
                                    field[property] = function () {
                                        var ref;
                                        var _Component$prototype$componentWillMount;
                                        var tmp;
                                        var props;
                                        var acceptProperty;
                                        /** @type {number} */
                                        var k = arguments.length;
                                        /** @type {!Array} */
                                        var results = new Array(k);
                                        /** @type {number} */
                                        var i = 0;
                                        for (; i < k; i++) {
                                            results[i] = arguments[i];
                                        }
                                        if (!(null === (tmp = item[property]) || void 0 === tmp)) {
                                            (ref = tmp).call.apply(ref, [item].concat(results));
                                        }
                                        if (!(null === (acceptProperty = (props = data.props)[property]) || void 0 === acceptProperty)) {
                                            (_Component$prototype$componentWillMount = acceptProperty).call.apply(_Component$prototype$componentWillMount, [props].concat(results));
                                        }
                                    };
                                });
                                label = React.createElement(SettingsTableRowForm, {
                                    value: item[options.valuePropName || "value"],
                                    update: data
                                }, $(data, field));
                            } else {
                                label = urlAttr && (samePriority || lowerPriority) && !isSpecialPage ? data(val) : data;
                            }
                        } else {
                        }
                    }
                }
                return get(label, index, fn);
            });
        };
        /** @type {function(): ?} */
        load.useStatus = failed;
        /** @type {function(!Object): ?} */
        var newFileInfo = load;
        /**
         * @param {!Object} value
         * @param {!Array} result
         * @return {?}
         */
        var union = function (value, result) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && result.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (result.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var bundle = function (options) {
            var relation = options.prefixCls;
            var columns = options.children;
            var inherited = union(options, ["prefixCls", "children"]);
            var result = (0, React.useContext(object).getPrefixCls)("form", relation);
            var command_module_id = React.useMemo(function () {
                return {
                    prefixCls: result,
                    status: "error"
                };
            }, [result]);
            return React.createElement(main, _extends({}, inherited), function (buildInTemplates, value, result) {
                return React.createElement(Menu.Provider, {
                    value: command_module_id
                }, columns(buildInTemplates.map(function (name) {
                    return _extends(_extends({}, name), {
                        fieldKey: name.key
                    });
                }), value, {
                    errors: result.errors,
                    warnings: result.warnings
                }));
            });
        };
        var env = _env;
        /** @type {function(!Object): ?} */
        env.Item = newFileInfo;
        /** @type {function(!Object): ?} */
        env.List = bundle;
        /** @type {function(!Object): ?} */
        env.ErrorList = end;
        /** @type {function(number): ?} */
        env.useForm = code;
        /**
         * @return {?}
         */
        env.useFormInstance = function () {
            return (0, React.useContext)(child).form;
        };
        /** @type {function(): ?} */
        env.useWatch = success;
        /**
         * @param {!Object} config
         * @return {?}
         */
        env.Provider = function (config) {
            var props = apply(config, ["prefixCls"]);
            return React.createElement(promise, _extends({}, props));
        };
        /**
         * @return {undefined}
         */
        env.create = function () {
        };
        var lambdaBody = env;
        var propTypes = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                    }
                }]
            },
            name: "info-circle",
            theme: "filled"
        };
        /**
         * @param {?} fetch
         * @param {string} obj
         * @return {?}
         */
        var post = function (fetch, obj) {
            return React.createElement(VictoryLine, assign(assign({}, fetch), {}, {
                ref: obj,
                icon: propTypes
            }));
        };
        /** @type {string} */
        post.displayName = "InfoCircleFilled";
        var interpolateBar;
        var file = React.forwardRef(post);
        var doc = assign({}, one);
        var version = doc.version;
        var _e = doc.render;
        var relationships = doc.unmountComponentAtNode;
        try {
            if (Number((version || "").split(".")[0]) >= 18) {
                interpolateBar = doc.createRoot;
            }
        } catch (Ic) {
        }
        /** @type {string} */
        var j = "__rc_react_root__";
        var Week = function (name) {
            /**
             * @return {?}
             */
            function n() {
                var self;
                log(this, n);
                /** @type {number} */
                var arglen = arguments.length;
                /** @type {!Array} */
                var args = new Array(arglen);
                /** @type {number} */
                var i = 0;
                for (; i < arglen; i++) {
                    args[i] = arguments[i];
                }
                return (self = x.call.apply(x, [this].concat(args))).closeTimer = null, self.close = function (event) {
                    if (event) {
                        event.stopPropagation();
                    }
                    self.clearCloseTimer();
                    var config = self.props;
                    var onClose = config.onClose;
                    var path = config.noticeKey;
                    if (onClose) {
                        onClose(path);
                    }
                }, self.startCloseTimer = function () {
                    if (self.props.duration) {
                        self.closeTimer = window.setTimeout(function () {
                            self.close();
                        }, 1E3 * self.props.duration);
                    }
                }, self.clearCloseTimer = function () {
                    if (self.closeTimer) {
                        clearTimeout(self.closeTimer);
                        /** @type {null} */
                        self.closeTimer = null;
                    }
                }, self;
            }
            compile(n, name);
            var x = fn(n);
            return g(n, [{
                key: "componentDidMount",
                value: function () {
                    this.startCloseTimer();
                }
            }, {
                key: "componentDidUpdate",
                value: function (data) {
                    if (this.props.duration !== data.duration || this.props.updateMark !== data.updateMark || this.props.visible !== data.visible && this.props.visible) {
                        this.restartCloseTimer();
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function () {
                    this.clearCloseTimer();
                }
            }, {
                key: "restartCloseTimer",
                value: function () {
                    this.clearCloseTimer();
                    this.startCloseTimer();
                }
            }, {
                key: "render",
                value: function () {
                    var action2 = this;
                    var options = this.props;
                    var _name = options.prefixCls;
                    var classes = options.className;
                    var end = options.closable;
                    var text = options.closeIcon;
                    var textStyle = options.style;
                    var onClick = options.onClick;
                    var items = options.children;
                    var fn = options.holder;
                    /** @type {string} */
                    var id = "".concat(_name, "-notice");
                    var surfaceContext = Object.keys(this.props).reduce(function (controllerProperties, k) {
                        return "data-" !== k.substr(0, 5) && "aria-" !== k.substr(0, 5) && "role" !== k || (controllerProperties[k] = action2.props[k]), controllerProperties;
                    }, {});
                    var key = React.createElement("div", _extends({
                        className: require()(id, classes, debug({}, "".concat(id, "-closable"), end)),
                        style: textStyle,
                        onMouseEnter: this.clearCloseTimer,
                        onMouseLeave: this.startCloseTimer,
                        onClick: onClick
                    }, surfaceContext), React.createElement("div", {
                        className: "".concat(id, "-content")
                    }, items), end ? React.createElement("a", {
                        tabIndex: 0,
                        onClick: this.close,
                        className: "".concat(id, "-close")
                    }, text || React.createElement("span", {
                        className: "".concat(id, "-close-x")
                    })) : null);
                    return fn ? d.createPortal(key, fn) : key;
                }
            }]), n;
        }(React.Component);
        Week.defaultProps = {
            onClose: function () {
            },
            duration: 1.5
        };
        /** @type {!Array} */
        var expression = ["getContainer"];
        /** @type {number} */
        var lastCallback = 0;
        /** @type {number} */
        var testMiddlewares = Date.now();
        var Modal = function (name) {
            /**
             * @return {?}
             */
            function render() {
                var state;
                log(this, render);
                /** @type {number} */
                var arglen = arguments.length;
                /** @type {!Array} */
                var args = new Array(arglen);
                /** @type {number} */
                var i = 0;
                for (; i < arglen; i++) {
                    args[i] = arguments[i];
                }
                return (state = result.call.apply(result, [this].concat(args))).state = {
                    notices: []
                }, state.hookRefs = new Map, state.add = function (s, stream) {
                    var r = s.key || createKey();
                    var item = assign(assign({}, s), {}, {
                        key: r
                    });
                    var ln = state.props.maxCount;
                    state.setState(function (state) {
                        var p = state.notices;
                        var i = p.map(function (action) {
                            return action.notice.key;
                        }).indexOf(r);
                        var listenInProgress = p.concat();
                        return -1 !== i ? listenInProgress.splice(i, 1, {
                            notice: item,
                            holderCallback: stream
                        }) : (ln && p.length >= ln && (item.key = listenInProgress[0].notice.key, item.updateMark = createKey(), item.userPassKey = r, listenInProgress.shift()), listenInProgress.push({
                            notice: item,
                            holderCallback: stream
                        })), {
                            notices: listenInProgress
                        };
                    });
                }, state.remove = function (documents) {
                    state.setState(function (state) {
                        return {
                            notices: state.notices.filter(function (action) {
                                var game = action.notice;
                                var state = game.key;
                                return (game.userPassKey || state) !== documents;
                            })
                        };
                    });
                }, state.noticePropsMap = {}, state;
            }
            compile(render, name);
            var result = fn(render);
            return g(render, [{
                key: "getTransitionName",
                value: function () {
                    var _props2 = this.props;
                    var x = _props2.prefixCls;
                    var options = _props2.animation;
                    var callback = this.props.transitionName;
                    return !callback && options && (callback = "".concat(x, "-").concat(options)), callback;
                }
            }, {
                key: "render",
                value: function () {
                    var t = this;
                    var notices = this.state.notices;
                    var options = this.props;
                    var id = options.prefixCls;
                    var classes = options.className;
                    var icon = options.closeIcon;
                    var textStyle = options.style;
                    /** @type {!Array} */
                    var relatedKeys = [];
                    return notices.forEach(function (result, data) {
                        var options = result.notice;
                        var courseSections = result.holderCallback;
                        var c = data === notices.length - 1 ? options.updateMark : void 0;
                        var key = options.key;
                        var optional = options.userPassKey;
                        var props = assign(assign(assign({
                            prefixCls: id,
                            closeIcon: icon
                        }, options), options.props), {}, {
                            key: key,
                            noticeKey: optional || key,
                            updateMark: c,
                            onClose: function (key) {
                                var fn;
                                t.remove(key);
                                if (!(null === (fn = options.onClose) || void 0 === fn)) {
                                    fn.call(options);
                                }
                            },
                            onClick: options.onClick,
                            children: options.content
                        });
                        relatedKeys.push(key);
                        t.noticePropsMap[key] = {
                            props: props,
                            holderCallback: courseSections
                        };
                    }), React.createElement("div", {
                        className: require()(id, classes),
                        style: textStyle
                    }, React.createElement(AddTodo, {
                        keys: relatedKeys,
                        motionName: this.getTransitionName(),
                        onVisibleChanged: function (n, callback) {
                            var name = callback.key;
                            if (!n) {
                                delete t.noticePropsMap[name];
                            }
                        }
                    }, function (_ref) {
                        var name = _ref.key;
                        var key = _ref.className;
                        var style = _ref.style;
                        var visible = _ref.visible;
                        var element = t.noticePropsMap[name];
                        var data = element.props;
                        var map = element.holderCallback;
                        return map ? React.createElement("div", {
                            key: name,
                            className: require()(key, "".concat(id, "-hook-holder")),
                            style: assign({}, style),
                            ref: function (obj) {
                                if ("undefined" !== typeof name) {
                                    if (obj) {
                                        t.hookRefs.set(name, obj);
                                        map(obj, data);
                                    } else {
                                        t.hookRefs.delete(name);
                                    }
                                }
                            }
                        }) : React.createElement(Week, _extends({}, data, {
                            className: require()(key, null === data || void 0 === data ? void 0 : data.className),
                            style: assign(assign({}, style), null === data || void 0 === data ? void 0 : data.style),
                            visible: visible
                        }));
                    }));
                }
            }]), render;
        }(React.Component);
        Modal.newInstance = void 0;
        Modal.defaultProps = {
            prefixCls: "rc-notification",
            animation: "fade",
            style: {
                top: 65,
                left: "50%"
            }
        };
        /**
         * @param {!Object} cfg
         * @param {!Function} cb
         * @return {undefined}
         */
        Modal.newInstance = function (cfg, cb) {
            var options = cfg || {};
            var getContainer = options.getContainer;
            var result = get(options, expression);
            /** @type {!Element} */
            var element = document.createElement("div");
            if (getContainer) {
                getContainer().appendChild(element);
            } else {
                document.body.appendChild(element);
            }
            /** @type {boolean} */
            var l = false;
            register(React.createElement(Modal, _extends({}, result, {
                ref: function (value) {
                    if (!l) {
                        /** @type {boolean} */
                        l = true;
                        cb({
                            notice: function (text) {
                                value.add(text);
                            },
                            removeNotice: function (key) {
                                value.remove(key);
                            },
                            component: value,
                            destroy: function () {
                                !function (suppressDisabledCheck) {
                                    finish.apply(this, arguments);
                                }(element);
                                if (element.parentNode) {
                                    element.parentNode.removeChild(element);
                                }
                            },
                            useNotification: function () {
                                return notify(value);
                            }
                        });
                    }
                }
            })), element);
        };
        var R = Modal;
        /** @type {function(number): boolean} */
        var isNaN = Number.isNaN || function (value) {
            return "number" === typeof value && value !== value;
        };
        var allOperations = _extends({}, Backbone.Modal);
        var Calendar = function (name) {
            /**
             * @param {!Object} self
             * @return {?}
             */
            function render(self) {
                var record;
                return log(this, render), (record = p.call(this, self)).getMemoizedContextValue = function (prevModFn, $) {
                    /**
                     * @return {?}
                     */
                    function get() {
                        /** @type {!Array} */
                        var obj = [];
                        /** @type {number} */
                        var i = 0;
                        for (; i < arguments.length; i++) {
                            obj[i] = arguments[i];
                        }
                        if (browser && browser.lastThis === this && $(obj, browser.lastArgs)) {
                            return browser.lastResult;
                        }
                        var result = prevModFn.apply(this, obj);
                        return browser = {
                            lastResult: result,
                            lastArgs: obj,
                            lastThis: this
                        }, result;
                    }
                    if (void 0 === $) {
                        /** @type {function(!Array, !NodeList): ?} */
                        $ = versionGT;
                    }
                    /** @type {null} */
                    var browser = null;
                    return get.clear = function () {
                        /** @type {null} */
                        browser = null;
                    }, get;
                }(function (name) {
                    return _extends(_extends({}, name), {
                        exist: true
                    });
                }), getHeat(self.locale && self.locale.Modal), record;
            }
            compile(render, name);
            var p = fn(render);
            return g(render, [{
                key: "componentDidMount",
                value: function () {
                    getHeat(this.props.locale && this.props.locale.Modal);
                }
            }, {
                key: "componentDidUpdate",
                value: function (o) {
                    var code = this.props.locale;
                    if (o.locale !== code) {
                        getHeat(code && code.Modal);
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function () {
                    getHeat();
                }
            }, {
                key: "render",
                value: function () {
                    var props = this.props;
                    var locale = props.locale;
                    var tabHeads = props.children;
                    var localeName = this.getMemoizedContextValue(locale);
                    return React.createElement(parts.Provider, {
                        value: localeName
                    }, tabHeads);
                }
            }]), render;
        }(React.Component);
        Calendar.defaultProps = {
            locale: {}
        };
        var survey = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                    }
                }]
            },
            name: "check-circle",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} x
         * @return {?}
         */
        var container = function (context, x) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: x,
                icon: survey
            }));
        };
        /** @type {string} */
        container.displayName = "CheckCircleOutlined";
        var commentSuccess = React.forwardRef(container);
        var iconActor = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                    }
                }]
            },
            name: "close-circle",
            theme: "outlined"
        };
        /**
         * @param {?} obj
         * @param {string} attrs
         * @return {?}
         */
        var attrs = function (obj, attrs) {
            return React.createElement(VictoryLine, assign(assign({}, obj), {}, {
                ref: attrs,
                icon: iconActor
            }));
        };
        /** @type {string} */
        attrs.displayName = "CloseCircleOutlined";
        var msg = React.forwardRef(attrs);
        var checkedUncheckedNode = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                    }
                }]
            },
            name: "exclamation-circle",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} label
         * @return {?}
         */
        var share = function (context, label) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: label,
                icon: checkedUncheckedNode
            }));
        };
        /** @type {string} */
        share.displayName = "ExclamationCircleOutlined";
        var menu = React.forwardRef(share);
        var textIcon = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"
                    }
                }]
            },
            name: "info-circle",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} label
         * @return {?}
         */
        var action = function (context, label) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: label,
                icon: textIcon
            }));
        };
        /** @type {string} */
        action.displayName = "InfoCircleOutlined";
        var scopeExpressionContent;
        var default_text;
        var revCount;
        var results = {};
        /** @type {number} */
        var curve = 4.5;
        /** @type {number} */
        var o_old = 24;
        /** @type {number} */
        var pingPongTimeout = 24;
        /** @type {string} */
        var displayText = "";
        /** @type {string} */
        var ACTIVE = "topRight";
        /** @type {boolean} */
        var hash = false;
        var defaultOpts = {
            success: commentSuccess,
            info: React.forwardRef(action),
            error: msg,
            warning: menu
        };
        var logger = {
            open: function (id) {
                fetch(id, function (component) {
                    var el = component.prefixCls;
                    var cb = component.iconPrefixCls;
                    component.instance.notice(info(id, el, cb));
                });
            },
            close: function (key) {
                Object.keys(results).forEach(function (domain) {
                    return Promise.resolve(results[domain]).then(function (instance) {
                        instance.removeNotice(key);
                    });
                });
            },
            config: function (options) {
                var duration = options.duration;
                var placement = options.placement;
                var timeout = options.bottom;
                var o = options.top;
                var getContainer = options.getContainer;
                var ratingStarsAmount = options.closeIcon;
                var message = options.prefixCls;
                if (void 0 !== message) {
                    displayText = message;
                }
                if (void 0 !== duration) {
                    curve = duration;
                }
                if (void 0 !== placement) {
                    ACTIVE = placement;
                } else {
                    if (options.rtl) {
                        /** @type {string} */
                        ACTIVE = "topLeft";
                    }
                }
                if (void 0 !== timeout) {
                    pingPongTimeout = timeout;
                }
                if (void 0 !== o) {
                    o_old = o;
                }
                if (void 0 !== getContainer) {
                    scopeExpressionContent = getContainer;
                }
                if (void 0 !== ratingStarsAmount) {
                    default_text = ratingStarsAmount;
                }
                if (void 0 !== options.rtl) {
                    hash = options.rtl;
                }
                if (void 0 !== options.maxCount) {
                    revCount = options.maxCount;
                }
            },
            destroy: function () {
                Object.keys(results).forEach(function (domain) {
                    Promise.resolve(results[domain]).then(function (anAlertDialog) {
                        anAlertDialog.destroy();
                    });
                    delete results[domain];
                });
            }
        };
        ["success", "info", "warning", "error"].forEach(function (logType) {
            /**
             * @param {?} name
             * @return {?}
             */
            logger[logType] = function (name) {
                return logger.open(_extends(_extends({}, name), {
                    type: logType
                }));
            };
        });
        logger.warn = logger.warning;
        logger.useNotification = function (cb, method) {
            return function () {
                var template;
                /** @type {null} */
                var a = null;
                var copy = call(notify({
                    add: function (s, t) {
                        if (!(null === a || void 0 === a)) {
                            a.component.add(s, t);
                        }
                    }
                }), 2);
                var callback = copy[0];
                var prop = copy[1];
                var layout = React.useRef({});
                return layout.current.open = function (obj) {
                    var event = obj.prefixCls;
                    var result = template("notification", event);
                    cb(_extends(_extends({}, obj), {
                        prefixCls: result
                    }), function (component) {
                        var path = component.prefixCls;
                        var instance = component.instance;
                        a = instance;
                        callback(method(obj, path));
                    });
                }, ["success", "info", "warning", "error"].forEach(function (n) {
                    /**
                     * @param {?} name
                     * @return {?}
                     */
                    layout.current[n] = function (name) {
                        return layout.current.open(_extends(_extends({}, name), {
                            type: n
                        }));
                    };
                }), [layout.current, React.createElement(src, {
                    key: "holder"
                }, function (tag) {
                    return template = tag.getPrefixCls, prop;
                })];
            };
        }(fetch, info);
        var _logger = logger;
        var String = function () {
            /**
             * @param {number} obj
             * @param {?} options
             * @return {?}
             */
            function Color(obj, options) {
                var format;
                if (void 0 === obj && (obj = ""), void 0 === options && (options = {}), obj instanceof Color) {
                    return obj;
                }
                if ("number" === typeof obj) {
                    obj = function (val) {
                        return {
                            r: val >> 16,
                            g: (65280 & val) >> 8,
                            b: 255 & val
                        };
                    }(obj);
                }
                /** @type {number} */
                this.originalInput = obj;
                var color = parse(obj);
                /** @type {number} */
                this.originalInput = obj;
                this.r = color.r;
                this.g = color.g;
                this.b = color.b;
                this.a = color.a;
                /** @type {number} */
                this.roundA = Math.round(100 * this.a) / 100;
                this.format = null !== (format = options.format) && void 0 !== format ? format : color.format;
                this.gradientType = options.gradientType;
                if (this.r < 1) {
                    /** @type {number} */
                    this.r = Math.round(this.r);
                }
                if (this.g < 1) {
                    /** @type {number} */
                    this.g = Math.round(this.g);
                }
                if (this.b < 1) {
                    /** @type {number} */
                    this.b = Math.round(this.b);
                }
                this.isValid = color.ok;
            }
            return Color.prototype.isDark = function () {
                return this.getBrightness() < 128;
            }, Color.prototype.isLight = function () {
                return !this.isDark();
            }, Color.prototype.getBrightness = function () {
                var rgb = this.toRgb();
                return (299 * rgb.r + 587 * rgb.g + 114 * rgb.b) / 1E3;
            }, Color.prototype.getLuminance = function () {
                var rgb = this.toRgb();
                /** @type {number} */
                var t = rgb.r / 255;
                /** @type {number} */
                var n = rgb.g / 255;
                /** @type {number} */
                var r = rgb.b / 255;
                return .2126 * (t <= .03928 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4)) + .7152 * (n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4)) + .0722 * (r <= .03928 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4));
            }, Color.prototype.getAlpha = function () {
                return this.a;
            }, Color.prototype.setAlpha = function (a) {
                return this.a = boundAlpha(a), this.roundA = Math.round(100 * this.a) / 100, this;
            }, Color.prototype.toHsv = function () {
                var hsv = rgbToHsv(this.r, this.g, this.b);
                return {
                    h: 360 * hsv.h,
                    s: hsv.s,
                    v: hsv.v,
                    a: this.a
                };
            }, Color.prototype.toHsvString = function () {
                var hsv = rgbToHsv(this.r, this.g, this.b);
                /** @type {number} */
                var testMiddlewares = Math.round(360 * hsv.h);
                /** @type {number} */
                var gmapsSpecs = Math.round(100 * hsv.s);
                /** @type {number} */
                var singleImages = Math.round(100 * hsv.v);
                return 1 === this.a ? "hsv(".concat(testMiddlewares, ", ").concat(gmapsSpecs, "%, ").concat(singleImages, "%)") : "hsva(".concat(testMiddlewares, ", ").concat(gmapsSpecs, "%, ").concat(singleImages, "%, ").concat(this.roundA, ")");
            }, Color.prototype.toHsl = function () {
                var hsl = rgbToHsl(this.r, this.g, this.b);
                return {
                    h: 360 * hsl.h,
                    s: hsl.s,
                    l: hsl.l,
                    a: this.a
                };
            }, Color.prototype.toHslString = function () {
                var hsl = rgbToHsl(this.r, this.g, this.b);
                /** @type {number} */
                var testMiddlewares = Math.round(360 * hsl.h);
                /** @type {number} */
                var gmapsSpecs = Math.round(100 * hsl.s);
                /** @type {number} */
                var singleImages = Math.round(100 * hsl.l);
                return 1 === this.a ? "hsl(".concat(testMiddlewares, ", ").concat(gmapsSpecs, "%, ").concat(singleImages, "%)") : "hsla(".concat(testMiddlewares, ", ").concat(gmapsSpecs, "%, ").concat(singleImages, "%, ").concat(this.roundA, ")");
            }, Color.prototype.toHex = function (allow3Char) {
                return void 0 === allow3Char && (allow3Char = false), rgb(this.r, this.g, this.b, allow3Char);
            }, Color.prototype.toHexString = function (allow3Char) {
                return void 0 === allow3Char && (allow3Char = false), "#" + this.toHex(allow3Char);
            }, Color.prototype.toHex8 = function (allow4Char) {
                return void 0 === allow4Char && (allow4Char = false), function (zLoc, t, inTS, y, allow4Char) {
                    /** @type {!Array} */
                    var b = [min(Math.round(zLoc).toString(16)), min(Math.round(t).toString(16)), min(Math.round(inTS).toString(16)), min(round(y))];
                    return allow4Char && b[0].startsWith(b[0].charAt(1)) && b[1].startsWith(b[1].charAt(1)) && b[2].startsWith(b[2].charAt(1)) && b[3].startsWith(b[3].charAt(1)) ? b[0].charAt(0) + b[1].charAt(0) + b[2].charAt(0) + b[3].charAt(0) : b.join("");
                }(this.r, this.g, this.b, this.a, allow4Char);
            }, Color.prototype.toHex8String = function (allow4Char) {
                return void 0 === allow4Char && (allow4Char = false), "#" + this.toHex8(allow4Char);
            }, Color.prototype.toRgb = function () {
                return {
                    r: Math.round(this.r),
                    g: Math.round(this.g),
                    b: Math.round(this.b),
                    a: this.a
                };
            }, Color.prototype.toRgbString = function () {
                /** @type {number} */
                var max = Math.round(this.r);
                /** @type {number} */
                var testMiddlewares = Math.round(this.g);
                /** @type {number} */
                var b = Math.round(this.b);
                return 1 === this.a ? "rgb(".concat(max, ", ").concat(testMiddlewares, ", ").concat(b, ")") : "rgba(".concat(max, ", ").concat(testMiddlewares, ", ").concat(b, ", ").concat(this.roundA, ")");
            }, Color.prototype.toPercentageRgb = function () {
                /**
                 * @param {undefined} width
                 * @return {?}
                 */
                var flip = function (width) {
                    return "".concat(Math.round(100 * parseInt(width, 255)), "%");
                };
                return {
                    r: flip(this.r),
                    g: flip(this.g),
                    b: flip(this.b),
                    a: this.a
                };
            }, Color.prototype.toPercentageRgbString = function () {
                /**
                 * @param {undefined} width
                 * @return {?}
                 */
                var flip = function (width) {
                    return Math.round(100 * parseInt(width, 255));
                };
                return 1 === this.a ? "rgb(".concat(flip(this.r), "%, ").concat(flip(this.g), "%, ").concat(flip(this.b), "%)") : "rgba(".concat(flip(this.r), "%, ").concat(flip(this.g), "%, ").concat(flip(this.b), "%, ").concat(this.roundA, ")");
            }, Color.prototype.toName = function () {
                if (0 === this.a) {
                    return "transparent";
                }
                if (this.a < 1) {
                    return false;
                }
                /** @type {string} */
                var _testColor = "#" + rgb(this.r, this.g, this.b, false);
                /** @type {number} */
                var layer_i = 0;
                /** @type {!Array<Array<?>>} */
                var crossfilterable_layers = Object.entries(namedColors);
                for (; layer_i < crossfilterable_layers.length; layer_i++) {
                    /** @type {!Array<?>} */
                    var layer = crossfilterable_layers[layer_i];
                    var ll = layer[0];
                    if (_testColor === layer[1]) {
                        return ll;
                    }
                }
                return false;
            }, Color.prototype.toString = function (format) {
                /** @type {boolean} */
                var s = Boolean(format);
                format = null !== format && void 0 !== format ? format : this.format;
                /** @type {boolean} */
                var formattedString = false;
                /** @type {boolean} */
                var rewrite = this.a < 1 && this.a >= 0;
                return s || !rewrite || !format.startsWith("hex") && "name" !== format ? ("rgb" === format && (formattedString = this.toRgbString()), "prgb" === format && (formattedString = this.toPercentageRgbString()), "hex" !== format && "hex6" !== format || (formattedString = this.toHexString()), "hex3" === format && (formattedString = this.toHexString(true)), "hex4" === format && (formattedString = this.toHex8String(true)), "hex8" === format && (formattedString = this.toHex8String()), "name" === format &&
                    (formattedString = this.toName()), "hsl" === format && (formattedString = this.toHslString()), "hsv" === format && (formattedString = this.toHsvString()), formattedString || this.toHexString()) : "name" === format && 0 === this.a ? this.toName() : this.toRgbString();
            }, Color.prototype.toNumber = function () {
                return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
            }, Color.prototype.clone = function () {
                return new Color(this.toString());
            }, Color.prototype.lighten = function (amount) {
                if (void 0 === amount) {
                    /** @type {number} */
                    amount = 10;
                }
                var hsl = this.toHsl();
                return hsl.l += amount / 100, hsl.l = clamp(hsl.l), new Color(hsl);
            }, Color.prototype.brighten = function (a) {
                if (void 0 === a) {
                    /** @type {number} */
                    a = 10;
                }
                var rgb = this.toRgb();
                return rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(-a / 100 * 255))), rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(-a / 100 * 255))), rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(-a / 100 * 255))), new Color(rgb);
            }, Color.prototype.darken = function (amount) {
                if (void 0 === amount) {
                    /** @type {number} */
                    amount = 10;
                }
                var hsl = this.toHsl();
                return hsl.l -= amount / 100, hsl.l = clamp(hsl.l), new Color(hsl);
            }, Color.prototype.tint = function (color) {
                return void 0 === color && (color = 10), this.mix("white", color);
            }, Color.prototype.shade = function (color) {
                return void 0 === color && (color = 10), this.mix("black", color);
            }, Color.prototype.desaturate = function (amount) {
                if (void 0 === amount) {
                    /** @type {number} */
                    amount = 10;
                }
                var hsl = this.toHsl();
                return hsl.s -= amount / 100, hsl.s = clamp(hsl.s), new Color(hsl);
            }, Color.prototype.saturate = function (amount) {
                if (void 0 === amount) {
                    /** @type {number} */
                    amount = 10;
                }
                var hsl = this.toHsl();
                return hsl.s += amount / 100, hsl.s = clamp(hsl.s), new Color(hsl);
            }, Color.prototype.greyscale = function () {
                return this.desaturate(100);
            }, Color.prototype.spin = function (amount) {
                var hsl = this.toHsl();
                /** @type {number} */
                var hue = (hsl.h + amount) % 360;
                return hsl.h = hue < 0 ? 360 + hue : hue, new Color(hsl);
            }, Color.prototype.mix = function (obj, v) {
                if (void 0 === v) {
                    /** @type {number} */
                    v = 50;
                }
                var from = this.toRgb();
                var to = (new Color(obj)).toRgb();
                /** @type {number} */
                var ratio = v / 100;
                return new Color({
                    r: (to.r - from.r) * ratio + from.r,
                    g: (to.g - from.g) * ratio + from.g,
                    b: (to.b - from.b) * ratio + from.b,
                    a: (to.a - from.a) * ratio + from.a
                });
            }, Color.prototype.analogous = function (results, slices) {
                if (void 0 === results) {
                    /** @type {number} */
                    results = 6;
                }
                if (void 0 === slices) {
                    /** @type {number} */
                    slices = 30;
                }
                var hsl = this.toHsl();
                /** @type {number} */
                var part = 360 / slices;
                /** @type {!Array} */
                var ret = [this];
                /** @type {number} */
                hsl.h = (hsl.h - (part * results >> 1) + 720) % 360;
                for (; --results;) {
                    /** @type {number} */
                    hsl.h = (hsl.h + part) % 360;
                    ret.push(new Color(hsl));
                }
                return ret;
            }, Color.prototype.complement = function () {
                var hsl = this.toHsl();
                return hsl.h = (hsl.h + 180) % 360, new Color(hsl);
            }, Color.prototype.monochromatic = function (results) {
                if (void 0 === results) {
                    /** @type {number} */
                    results = 6;
                }
                var location = this.toHsv();
                var hash = location.h;
                var s = location.s;
                var a = location.v;
                /** @type {!Array} */
                var ret = [];
                /** @type {number} */
                var up = 1 / results;
                for (; results--;) {
                    ret.push(new Color({
                        h: hash,
                        s: s,
                        v: a
                    }));
                    /** @type {number} */
                    a = (a + up) % 1;
                }
                return ret;
            }, Color.prototype.splitcomplement = function () {
                var hsl = this.toHsl();
                var h = hsl.h;
                return [this, new Color({
                    h: (h + 72) % 360,
                    s: hsl.s,
                    l: hsl.l
                }), new Color({
                    h: (h + 216) % 360,
                    s: hsl.s,
                    l: hsl.l
                })];
            }, Color.prototype.onBackground = function (color) {
                var rgb = this.toRgb();
                var from = (new Color(color)).toRgb();
                return new Color({
                    r: from.r + (rgb.r - from.r) * rgb.a,
                    g: from.g + (rgb.g - from.g) * rgb.a,
                    b: from.b + (rgb.b - from.b) * rgb.a
                });
            }, Color.prototype.triad = function () {
                return this.polyad(3);
            }, Color.prototype.tetrad = function () {
                return this.polyad(4);
            }, Color.prototype.polyad = function (n) {
                var hsl = this.toHsl();
                var h = hsl.h;
                /** @type {!Array} */
                var palette = [this];
                /** @type {number} */
                var ratio = 360 / n;
                /** @type {number} */
                var m = 1;
                for (; m < n; m++) {
                    palette.push(new Color({
                        h: (h + m * ratio) % 360,
                        s: hsl.s,
                        l: hsl.l
                    }));
                }
                return palette;
            }, Color.prototype.equals = function (val) {
                return this.toRgbString() === (new Color(val)).toRgbString();
            }, Color;
        }();
        /** @type {string} */
        var predicted_answer = "-ant-".concat(Date.now(), "-").concat(Math.random());
        var calculateSectionStatus;
        var whatToScale;
        /** @type {!Array} */
        var domIDs = ["getTargetContainer", "getPopupContainer", "renderEmpty", "pageHeader", "input", "pagination", "form"];
        /**
         * @return {?}
         */
        var pipe = function () {
            return {
                getPrefixCls: function (name, value) {
                    return value || (name ? "".concat(time(), "-").concat(name) : time());
                },
                getIconPrefixCls: yd,
                getRootPrefixCls: function (defAngle, color) {
                    return defAngle || (calculateSectionStatus || (color && color.includes("-") ? color.replace(/^(.*)-[^-]*$/, "$1") : time()));
                }
            };
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var list = function (options) {
            var contactsForm;
            var facetr;
            var summary = options.children;
            var config = options.csp;
            var readOnlyFn = options.autoInsertSpaceInButton;
            var args = options.form;
            var locale = options.locale;
            var memoryCache = options.componentSize;
            var direction = options.direction;
            var space = options.space;
            var virtual = options.virtual;
            var gen_code_options = options.dropdownMatchSelectWidth;
            var fallback = options.legacyLocale;
            var context = options.parentContext;
            var img = options.iconPrefixCls;
            var readonly = options.componentDisabled;
            var w = React.useCallback(function (args, res) {
                var buffer = options.prefixCls;
                if (res) {
                    return res;
                }
                var a = buffer || context.getPrefixCls("");
                return args ? "".concat(a, "-").concat(args) : a;
            }, [context.getPrefixCls, options.prefixCls]);
            var result = _extends(_extends({}, context), {
                csp: config,
                autoInsertSpaceInButton: readOnlyFn,
                locale: locale || fallback,
                direction: direction,
                space: space,
                virtual: virtual,
                dropdownMatchSelectWidth: gen_code_options,
                getPrefixCls: w
            });
            domIDs.forEach(function (index) {
                var item = options[index];
                if (item) {
                    result[index] = item;
                }
            });
            var entry = define(function () {
                return result;
            }, result, function (a, b) {
                /** @type {!Array<string>} */
                var s = Object.keys(a);
                /** @type {!Array<string>} */
                var r = Object.keys(b);
                return s.length !== r.length || s.some(function (i) {
                    return a[i] !== b[i];
                });
            });
            var command_module_id = React.useMemo(function () {
                return {
                    prefixCls: img,
                    csp: config
                };
            }, [img, config]);
            var value = summary;
            var data = {};
            return locale && (data = (null === (contactsForm = locale.Form) || void 0 === contactsForm ? void 0 : contactsForm.defaultValidateMessages) || (null === (facetr = Backbone.Form) || void 0 === facetr ? void 0 : facetr.defaultValidateMessages) || {}), args && args.validateMessages && (data = _extends(_extends({}, data), args.validateMessages)), Object.keys(data).length > 0 && (value = React.createElement(promise, {
                validateMessages: data
            }, summary)), locale && (value = React.createElement(Calendar, {
                locale: locale,
                _ANT_MARK__: "internalMark"
            }, value)), (img || config) && (value = React.createElement(removeCritText.Provider, {
                value: command_module_id
            }, value)), memoryCache && (value = React.createElement(row, {
                size: memoryCache
            }, value)), void 0 !== readonly && (value = React.createElement(keyword, {
                disabled: readonly
            }, value)), React.createElement(object.Provider, {
                value: entry
            }, value);
        };
        /**
         * @param {!Object} _props
         * @return {?}
         */
        var req = function (_props) {
            return React.useEffect(function () {
                if (_props.direction) {
                    rule.config({
                        rtl: "rtl" === _props.direction
                    });
                    _logger.config({
                        rtl: "rtl" === _props.direction
                    });
                }
            }, [_props.direction]), React.createElement(widget, null, function (n, isSlidingUp, canCreateDiscussions) {
                return React.createElement(src, null, function (parentContext) {
                    return React.createElement(list, _extends({
                        parentContext: parentContext,
                        legacyLocale: canCreateDiscussions
                    }, _props));
                });
            });
        };
        req.ConfigContext = object;
        req.SizeContext = foobar;
        /**
         * @param {!Object} data
         * @return {undefined}
         */
        req.config = function (data) {
            var status = data.prefixCls;
            var width = data.iconPrefixCls;
            var layers = data.theme;
            if (void 0 !== status) {
                calculateSectionStatus = status;
            }
            if (void 0 !== width) {
                whatToScale = width;
            }
            if (layers) {
                redraw(time(), layers);
            }
        };
        var instance;
        /** @type {function(!Object): ?} */
        var HTML = req;
        var icqavTableTop;
        var uniqueMatch;
        var max;
        /** @type {number} */
        var elapsedTime = 3;
        /** @type {number} */
        var Od = 1;
        /** @type {string} */
        var svg = "";
        /** @type {string} */
        var term = "move-up";
        /** @type {boolean} */
        var isRegexMode = false;
        /** @type {boolean} */
        var myRtl = false;
        var index = {
            info: file,
            success: handleMilestone,
            error: v,
            warning: warning,
            loading: VInput
        };
        /** @type {!Array<string>} */
        var bson_object_string = Object.keys(index);
        var target = {
            open: function (o) {
                var key = o.key || nameGenerator();
                /** @type {!Promise} */
                var promise = new Promise(function (cleanup) {
                    /**
                     * @return {?}
                     */
                    var onClose = function () {
                        return "function" === typeof o.onClose && o.onClose(), cleanup(true);
                    };
                    read(o, function (self) {
                        var E = self.prefixCls;
                        var b = self.iconPrefixCls;
                        self.instance.notice(push(_extends(_extends({}, o), {
                            key: key,
                            onClose: onClose
                        }), E, b));
                    });
                });
                /**
                 * @return {undefined}
                 */
                var deferred = function () {
                    if (instance) {
                        instance.removeNotice(key);
                    }
                };
                return deferred.then = function (obj, callback) {
                    return promise.then(obj, callback);
                }, deferred.promise = promise, deferred;
            },
            config: function (obj) {
                if (void 0 !== obj.top) {
                    icqavTableTop = obj.top;
                    /** @type {null} */
                    instance = null;
                }
                if (void 0 !== obj.duration) {
                    elapsedTime = obj.duration;
                }
                if (void 0 !== obj.prefixCls) {
                    svg = obj.prefixCls;
                }
                if (void 0 !== obj.getContainer) {
                    uniqueMatch = obj.getContainer;
                    /** @type {null} */
                    instance = null;
                }
                if (void 0 !== obj.transitionName) {
                    term = obj.transitionName;
                    /** @type {null} */
                    instance = null;
                    /** @type {boolean} */
                    isRegexMode = true;
                }
                if (void 0 !== obj.maxCount) {
                    max = obj.maxCount;
                    /** @type {null} */
                    instance = null;
                }
                if (void 0 !== obj.rtl) {
                    myRtl = obj.rtl;
                }
            },
            destroy: function (obj) {
                if (instance) {
                    if (obj) {
                        (0, instance.removeNotice)(obj);
                    } else {
                        var unsubscribe = instance.destroy;
                        unsubscribe();
                        /** @type {null} */
                        instance = null;
                    }
                }
            }
        };
        bson_object_string.forEach(function (e) {
            return bootstrap(target, e);
        });
        target.warn = target.warning;
        target.useMessage = function (next, cb) {
            return function () {
                var fire;
                var sourceAtt;
                /** @type {null} */
                var _this = null;
                var group = call(notify({
                    add: function (s, t) {
                        if (!(null === _this || void 0 === _this)) {
                            _this.component.add(s, t);
                        }
                    }
                }), 2);
                var resolve = group[0];
                var endtoken = group[1];
                var res = React.useRef({});
                return res.current.open = function (o) {
                    var event = o.prefixCls;
                    var result = fire("message", event);
                    var allowed = fire();
                    var key = o.key || nameGenerator();
                    /** @type {!Promise} */
                    var promise = new Promise(function (cleanup) {
                        /**
                         * @return {?}
                         */
                        var onClose = function () {
                            return "function" === typeof o.onClose && o.onClose(), cleanup(true);
                        };
                        next(_extends(_extends({}, o), {
                            prefixCls: result,
                            rootPrefixCls: allowed,
                            getPopupContainer: sourceAtt
                        }), function (cls) {
                            var fields = cls.prefixCls;
                            var result = cls.instance;
                            _this = result;
                            resolve(cb(_extends(_extends({}, o), {
                                key: key,
                                onClose: onClose
                            }), fields));
                        });
                    });
                    /**
                     * @return {undefined}
                     */
                    var deferred = function () {
                        if (_this) {
                            _this.removeNotice(key);
                        }
                    };
                    return deferred.then = function (obj, callback) {
                        return promise.then(obj, callback);
                    }, deferred.promise = promise, deferred;
                }, bson_object_string.forEach(function (e) {
                    return bootstrap(res.current, e);
                }), [res.current, React.createElement(src, {
                    key: "holder"
                }, function (that) {
                    return fire = that.getPrefixCls, sourceAtt = that.getPopupContainer, endtoken;
                })];
            };
        }(read, push);
        var rule = target;
        /**
         * @param {!Object} fs
         * @return {?}
         */
        var App = function (fs) {
            return fs.children;
        };
        /**
         * @param {!Object} data
         * @return {?}
         */
        var Cell = function (data) {
            var pornResult;
            var id = data.itemPrefixCls;
            var item = data.component;
            var span = data.span;
            var classes = data.className;
            var dialog = data.style;
            var labelStyle = data.labelStyle;
            var contentStyle = data.contentStyle;
            var selector = data.bordered;
            var value = data.label;
            var result = data.content;
            var currentAnime = data.colon;
            var el = item;
            return selector ? React.createElement(el, {
                className: require()((pornResult = {}, debug(pornResult, "".concat(id, "-item-label"), hasOwnProperty(value)), debug(pornResult, "".concat(id, "-item-content"), hasOwnProperty(result)), pornResult), classes),
                style: dialog,
                colSpan: span
            }, hasOwnProperty(value) && React.createElement("span", {
                style: labelStyle
            }, value), hasOwnProperty(result) && React.createElement("span", {
                style: contentStyle
            }, result)) : React.createElement(el, {
                className: require()("".concat(id, "-item"), classes),
                style: dialog,
                colSpan: span
            }, React.createElement("div", {
                className: "".concat(id, "-item-container")
            }, (value || 0 === value) && React.createElement("span", {
                className: require()("".concat(id, "-item-label"), debug({}, "".concat(id, "-item-no-colon"), !currentAnime)),
                style: labelStyle
            }, value), (result || 0 === result) && React.createElement("span", {
                className: require()("".concat(id, "-item-content")),
                style: contentStyle
            }, result)));
        };
        /**
         * @param {!Object} props
         * @return {?}
         */
        var SettingsTableRow = function (props) {
            var options = React.useContext(meta);
            var name = props.prefixCls;
            var config = props.vertical;
            var data = props.row;
            var key = props.index;
            var isHead = props.bordered;
            return config ? React.createElement(React.Fragment, null, React.createElement("tr", {
                key: "label-".concat(key),
                className: "".concat(name, "-row")
            }, getElements(data, props, _extends({
                component: "th",
                type: "label",
                showLabel: true
            }, options))), React.createElement("tr", {
                key: "content-".concat(key),
                className: "".concat(name, "-row")
            }, getElements(data, props, _extends({
                component: "td",
                type: "content",
                showContent: true
            }, options)))) : React.createElement("tr", {
                key: key,
                className: "".concat(name, "-row")
            }, getElements(data, props, _extends({
                component: isHead ? ["th", "td"] : "td",
                type: "item",
                showLabel: true,
                showContent: true
            }, options)));
        };
        var meta = React.createContext({});
        var suffixes = {
            xxl: 3,
            xl: 3,
            lg: 3,
            md: 3,
            sm: 2,
            xs: 1
        };
        /** @type {function(!Object): ?} */
        traverse.Item = App;
        var response;
        /** @type {function(!Object): ?} */
        var parsedResponse = traverse;
        /** @type {number} */
        var _g = 0;
        var throttles = {};
        /**
         * @param {number} key
         * @return {undefined}
         */
        tmpl.cancel = function (key) {
            if (void 0 !== key) {
                $timeout.cancel(throttles[key]);
                delete throttles[key];
            }
        };
        tmpl.ids = throttles;
        var result = function (name) {
            /**
             * @return {?}
             */
            function n() {
                var options;
                return log(this, n), (options = f.apply(this, arguments)).containerRef = React.createRef(), options.animationStart = false, options.destroyed = false, options.onClick = function (el, name) {
                    var pop;
                    var value;
                    var propNames = options.props;
                    var numProps = propNames.insertExtraNode;
                    if (!(propNames.disabled || !el || positionHighlight(el) || el.className.indexOf("-leave") >= 0)) {
                        /** @type {!Element} */
                        options.extraNode = document.createElement("div");
                        var iconDiv = trigger(options).extraNode;
                        var time = options.context.getPrefixCls;
                        /** @type {string} */
                        iconDiv.className = "".concat(time(""), "-click-animating-node");
                        var ATTR_COMPONENT_UID = options.getAttributeName();
                        if (el.setAttribute(ATTR_COMPONENT_UID, "true"), name && "#ffffff" !== name && "rgb(255, 255, 255)" !== name && arrayToText(name) && !/rgba\((?:\d*, ){3}0\)/.test(name) && "transparent" !== name) {
                            /** @type {string} */
                            iconDiv.style.borderColor = name;
                            var doc = (null === (pop = el.getRootNode) || void 0 === pop ? void 0 : pop.call(el)) || el.ownerDocument;
                            var div = doc instanceof Document ? doc.body : null !== (value = doc.firstChild) && void 0 !== value ? value : doc;
                            response = request("\n      [".concat(time(""), "-click-animating-without-extra-node='true']::after, .").concat(time(""), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(name, ";\n      }"), "antd-wave", {
                                csp: options.csp,
                                attachTo: div
                            });
                        }
                        if (numProps) {
                            el.appendChild(iconDiv);
                        }
                        ["transition", "animation"].forEach(function (name) {
                            el.addEventListener("".concat(name, "start"), options.onTransitionStart);
                            el.addEventListener("".concat(name, "end"), options.onTransitionEnd);
                        });
                    }
                }, options.onTransitionStart = function (arg) {
                    if (!options.destroyed) {
                        var n = options.containerRef.current;
                        if (arg && arg.target === n && !options.animationStart) {
                            options.resetEffect(n);
                        }
                    }
                }, options.onTransitionEnd = function (event) {
                    if (event && "fadeEffect" === event.animationName) {
                        options.resetEffect(event.target);
                    }
                }, options.bindAnimationEvent = function (e) {
                    if (e && e.getAttribute && !e.getAttribute("disabled") && !(e.className.indexOf("disabled") >= 0)) {
                        /**
                         * @param {!Event} e
                         * @return {undefined}
                         */
                        var check = function (e) {
                            if ("INPUT" !== e.target.tagName && !positionHighlight(e.target)) {
                                options.resetEffect(e);
                                /** @type {string} */
                                var form = getComputedStyle(e).getPropertyValue("border-top-color") || getComputedStyle(e).getPropertyValue("border-color") || getComputedStyle(e).getPropertyValue("background-color");
                                options.clickWaveTimeoutId = window.setTimeout(function () {
                                    return options.onClick(e, form);
                                }, 0);
                                tmpl.cancel(options.animationStartId);
                                /** @type {boolean} */
                                options.animationStart = true;
                                options.animationStartId = tmpl(function () {
                                    /** @type {boolean} */
                                    options.animationStart = false;
                                }, 10);
                            }
                        };
                        return e.addEventListener("click", check, true), {
                            cancel: function () {
                                e.removeEventListener("click", check, true);
                            }
                        };
                    }
                }, options.renderWave = function (a) {
                    var queryString = a.csp;
                    var result = options.props.children;
                    if (options.csp = queryString, !React.isValidElement(result)) {
                        return result;
                    }
                    var data = options.containerRef;
                    return isFunction(result) && (data = execute(result.ref, options.containerRef)), $(result, {
                        ref: data
                    });
                }, options;
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "componentDidMount",
                value: function () {
                    /** @type {boolean} */
                    this.destroyed = false;
                    var parent = this.containerRef.current;
                    if (parent && 1 === parent.nodeType) {
                        this.instance = this.bindAnimationEvent(parent);
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function () {
                    if (this.instance) {
                        this.instance.cancel();
                    }
                    if (this.clickWaveTimeoutId) {
                        clearTimeout(this.clickWaveTimeoutId);
                    }
                    /** @type {boolean} */
                    this.destroyed = true;
                }
            }, {
                key: "getAttributeName",
                value: function () {
                    var time = this.context.getPrefixCls;
                    var extending = this.props.insertExtraNode;
                    return "".concat(time(""), extending ? "-click-animating" : "-click-animating-without-extra-node");
                }
            }, {
                key: "resetEffect",
                value: function (element) {
                    var _this = this;
                    if (element && element !== this.extraNode && element instanceof Element) {
                        var stateNavigator = this.props.insertExtraNode;
                        var ATTR_COMPONENT_UID = this.getAttributeName();
                        element.setAttribute(ATTR_COMPONENT_UID, "false");
                        if (response) {
                            /** @type {string} */
                            response.innerHTML = "";
                        }
                        if (stateNavigator && this.extraNode && element.contains(this.extraNode)) {
                            element.removeChild(this.extraNode);
                        }
                        ["transition", "animation"].forEach(function (type) {
                            element.removeEventListener("".concat(type, "start"), _this.onTransitionStart);
                            element.removeEventListener("".concat(type, "end"), _this.onTransitionEnd);
                        });
                    }
                }
            }, {
                key: "render",
                value: function () {
                    return React.createElement(src, null, this.renderWave);
                }
            }]), n;
        }(React.Component);
        result.contextType = object;
        var canvas = (0, React.forwardRef)(function (props, oldRef) {
            return React.createElement(result, _extends({
                ref: oldRef
            }, props));
        });
        /**
         * @param {!Object} obj
         * @param {!Array} keys
         * @return {?}
         */
        var prefix = function (obj, keys) {
            var q = {};
            var a;
            for (a in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, a) && keys.indexOf(a) < 0) {
                    q[a] = obj[a];
                }
            }
            if (null != obj && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var k = 0;
                /** @type {!Array<?>} */
                a = Object.getOwnPropertySymbols(obj);
                for (; k < a.length; k++) {
                    if (keys.indexOf(a[k]) < 0 && Object.prototype.propertyIsEnumerable.call(obj, a[k])) {
                        q[a[k]] = obj[a[k]];
                    }
                }
            }
            return q;
        };
        var ele = React.createContext(void 0);
        /**
         * @param {!Object} node
         * @return {?}
         */
        var group = function (node) {
            var err;
            var result = React.useContext(object);
            var $ = result.getPrefixCls;
            var hash = result.direction;
            var request = node.prefixCls;
            var size = node.size;
            var name = node.className;
            var props = prefix(node, ["prefixCls", "size", "className"]);
            var id = $("btn-group", request);
            /** @type {string} */
            var type = "";
            switch (size) {
                case "large":
                    /** @type {string} */
                    type = "lg";
                    break;
                case "small":
                    /** @type {string} */
                    type = "sm";
            }
            var attachment = require()(id, (debug(err = {}, "".concat(id, "-").concat(type), type), debug(err, "".concat(id, "-rtl"), "rtl" === hash), err), name);
            return React.createElement(ele.Provider, {
                value: size
            }, React.createElement("div", _extends({}, props, {
                className: attachment
            })));
        };
        /**
         * @return {?}
         */
        var setToSystem = function () {
            return {
                width: 0,
                opacity: 0,
                transform: "scale(0)"
            };
        };
        /**
         * @param {!Element} elem
         * @return {?}
         */
        var findScrollNormal = function (elem) {
            return {
                width: elem.scrollWidth,
                opacity: 1,
                transform: "scale(1)"
            };
        };
        /**
         * @param {?} component
         * @return {?}
         */
        var Line = function (component) {
            var key = component.prefixCls;
            /** @type {boolean} */
            var selected = !!component.loading;
            return component.existIcon ? React.createElement("span", {
                className: "".concat(key, "-loading-icon")
            }, React.createElement(VInput, null)) : React.createElement(PatchItem, {
                visible: selected,
                motionName: "".concat(key, "-loading-icon-motion"),
                removeOnLeave: true,
                onAppearStart: setToSystem,
                onAppearActive: findScrollNormal,
                onEnterStart: setToSystem,
                onEnterActive: findScrollNormal,
                onLeaveStart: findScrollNormal,
                onLeaveActive: setToSystem
            }, function (obj, oldRef) {
                var buttonClass = obj.className;
                var style = obj.style;
                return React.createElement("span", {
                    className: "".concat(key, "-loading-icon"),
                    style: style,
                    ref: oldRef
                }, React.createElement(VInput, {
                    className: buttonClass
                }));
            });
        };
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var mixin = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /** @type {!RegExp} */
        var pattern = /^[\u4e00-\u9fa5]{2}$/;
        var isArray = pattern.test.bind(pattern);
        equal("default", "primary", "ghost", "dashed", "link", "text");
        equal("default", "circle", "round");
        equal("submit", "button", "reset");
        /**
         * @param {!Object} data
         * @param {number} nodes
         * @return {?}
         */
        var create = function (data, nodes) {
            var err;
            var view = data.loading;
            var response = void 0 !== view && view;
            var end = data.prefixCls;
            var key = data.type;
            var id = void 0 === key ? "default" : key;
            var jointKeys = data.danger;
            var val = data.shape;
            var str = void 0 === val ? "default" : val;
            var src = data.size;
            var isDisabled = data.disabled;
            var name = data.className;
            var value = data.children;
            var disabled = data.icon;
            var ghost = data.ghost;
            var opening = void 0 !== ghost && ghost;
            var body = data.block;
            var hostnames = void 0 !== body && body;
            var string = data.htmlType;
            var type = void 0 === string ? "button" : string;
            var item = mixin(data, ["loading", "prefixCls", "type", "danger", "shape", "size", "disabled", "className", "children", "icon", "ghost", "block", "htmlType"]);
            var isPicture = React.useContext(foobar);
            var isReadOnly = React.useContext(readonly);
            var isDeleteDisabled = isDisabled || isReadOnly;
            var srcset = React.useContext(ele);
            var black = call(React.useState(!!response), 2);
            var newState = black[0];
            var cleanupInspector = black[1];
            var group = call(React.useState(false), 2);
            var swapper = group[0];
            var next = group[1];
            var result = React.useContext(object);
            var callback = result.getPrefixCls;
            var root = result.autoInsertSpaceInButton;
            var hash = result.direction;
            var node = nodes || React.createRef();
            /**
             * @return {?}
             */
            var isEmpty = function () {
                return 1 === React.Children.count(value) && !disabled && !isBlank(id);
            };
            var b = "boolean" === typeof response ? response : (null === response || void 0 === response ? void 0 : response.delay) || true;
            React.useEffect(function () {
                /** @type {null} */
                var cb = null;
                return "number" === typeof b ? cb = window.setTimeout(function () {
                    /** @type {null} */
                    cb = null;
                    cleanupInspector(b);
                }, b) : cleanupInspector(b), function () {
                    if (cb) {
                        window.clearTimeout(cb);
                        /** @type {null} */
                        cb = null;
                    }
                };
            }, [b]);
            React.useEffect(function () {
                if (node && node.current && false !== root) {
                    var x = node.current.textContent;
                    if (isEmpty() && isArray(x)) {
                        if (!swapper) {
                            next(true);
                        }
                    } else {
                        if (swapper) {
                            next(false);
                        }
                    }
                }
            }, [node]);
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            var eventHandler = function (e) {
                var start = data.onClick;
                if (newState || isDeleteDisabled) {
                    e.preventDefault();
                } else {
                    if (!(null === start || void 0 === start)) {
                        start(e);
                    }
                }
            };
            var r = callback("btn", end);
            /** @type {boolean} */
            var compileRemote = false !== root;
            var sheet = srcset || src || isPicture;
            var ext = sheet && {
                large: "lg",
                small: "sm",
                middle: void 0
            }[sheet] || "";
            var state = newState ? "loading" : disabled;
            var attrs = apply(item, ["navigate"]);
            var engine = require()(r, (debug(err = {}, "".concat(r, "-").concat(str), "default" !== str && str), debug(err, "".concat(r, "-").concat(id), id), debug(err, "".concat(r, "-").concat(ext), ext), debug(err, "".concat(r, "-icon-only"), !value && 0 !== value && !!state), debug(err, "".concat(r, "-background-ghost"), opening && !isBlank(id)), debug(err, "".concat(r, "-loading"), newState), debug(err, "".concat(r, "-two-chinese-chars"), swapper && compileRemote && !newState), debug(err, "".concat(r,
                "-block"), hostnames), debug(err, "".concat(r, "-dangerous"), !!jointKeys), debug(err, "".concat(r, "-rtl"), "rtl" === hash), debug(err, "".concat(r, "-disabled"), void 0 !== attrs.href && isDeleteDisabled), err), name);
            var sections = disabled && !newState ? disabled : React.createElement(Line, {
                existIcon: !!disabled,
                prefixCls: r,
                loading: !!newState
            });
            var scm_branches = value || 0 === value ? function (table, a) {
                /** @type {boolean} */
                var r = false;
                /** @type {!Array} */
                var e = [];
                return React.Children.forEach(table, function (i) {
                    var type = stringify(i);
                    /** @type {boolean} */
                    var l = "string" === type || "number" === type;
                    if (r && l) {
                        /** @type {number} */
                        var j = e.length - 1;
                        var x = e[j];
                        /** @type {string} */
                        e[j] = "".concat(x).concat(i);
                    } else {
                        e.push(i);
                    }
                    /** @type {boolean} */
                    r = l;
                }), React.Children.map(e, function (type) {
                    return r(type, a);
                });
            }(value, isEmpty() && compileRemote) : null;
            if (void 0 !== attrs.href) {
                return React.createElement("a", _extends({}, attrs, {
                    className: engine,
                    onClick: eventHandler,
                    ref: node
                }), sections, scm_branches);
            }
            var options = React.createElement("button", _extends({}, item, {
                type: type,
                className: engine,
                onClick: eventHandler,
                disabled: isDeleteDisabled,
                ref: node
            }), sections, scm_branches);
            return isBlank(id) ? options : React.createElement(canvas, {
                disabled: !!newState
            }, options);
        };
        var res = React.forwardRef(create);
        /** @type {function(!Object): ?} */
        res.Group = group;
        /** @type {boolean} */
        res.__ANT_BUTTON = true;
        var Nested = res;
        var usb2in1 = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0138.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z"
                    }
                }]
            },
            name: "github",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} editor
         * @return {?}
         */
        var table = function (context, editor) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: editor,
                icon: usb2in1
            }));
        };
        /** @type {string} */
        table.displayName = "GithubOutlined";
        var cell = React.forwardRef(table);
        var xboxOneOSX = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"
                    }
                }]
            },
            name: "user",
            theme: "outlined"
        };
        /**
         * @param {?} b
         * @param {string} result
         * @return {?}
         */
        var tile = function (b, result) {
            return React.createElement(VictoryLine, assign(assign({}, b), {}, {
                ref: result,
                icon: xboxOneOSX
            }));
        };
        /** @type {string} */
        tile.displayName = "UserOutlined";
        var left_tiles = React.forwardRef(tile);
        /** @type {string} */
        var REST_PATH = "http://127.0.0.1:7070";
        var globs = __webpack_require__(184);
        /** @type {!WebSocket} */
        var socket = new WebSocket("ws://127.0.0.1:7000/ws");
        /**
         * @return {?}
         */
        var initialize = function () {
            /** @type {function(!Object): ?} */
            var directoryEntries = directory.TabPane;
            var self = call(lambdaBody.useForm(), 1)[0];
            var group = call(React.useState([]), 2);
            var names = group[0];
            var start = group[1];
            var result = call((0, React.useState)(0), 2);
            var ch = result[0];
            var cb = result[1];
            var black = call((0, React.useState)([]), 2);
            var resolvedSourceMapConfigs = black[0];
            var generate = black[1];
            var question1 = call((0, React.useState)("room"), 2);
            var activeKey = question1[0];
            var initialize = question1[1];
            var _this = (0, React.useRef)(null);
            (0, React.useEffect)(function () {
                !function () {
                    var _ref;
                    var index;
                    if (!(null === _this || void 0 === _this || null === (_ref = _this.current) || void 0 === _ref)) {
                        _ref.scrollTo(0, null === _this || void 0 === _this || null === (index = _this.current) || void 0 === index ? void 0 : index.scrollHeight);
                    }
                }();
                var data = {
                    authToken: addClass(),
                    roomId: 1
                };
                /**
                 * @param {?} e
                 * @return {undefined}
                 */
                socket.onopen = function (e) {
                    console.log("ws onopen evt:", e);
                    socket.send(JSON.stringify(data));
                    var response = trace(data);
                    Promise.all([response]).then(function (e) {
                        var size_buffer = call(e, 1)[0];
                        console.log("ws roomInfo response:", size_buffer);
                    });
                };
                /**
                 * @param {!Object} event
                 * @return {?}
                 */
                socket.onmessage = function (event) {
                    console.log("ws onmessage evt:", event);
                    /** @type {*} */
                    var info = JSON.parse(event.data);
                    if (console.log("ws onmessage:", info), 3 === info.op) {
                        /** @type {string} */
                        var a = info.fromUserName + "(" + info.createTime + "):" + info.msg;
                        var b = names.slice();
                        if (b.push(a), b.length > 2E4) {
                            return void window.location.reload();
                        }
                        start(b);
                    } else {
                        if (4 === info.op) {
                            cb(info.count);
                        } else {
                            if (5 === info.op) {
                                cb(info.count);
                                /** @type {!Array} */
                                var row = [];
                                var id;
                                for (id in info.roomUserInfo) {
                                    var c = info.roomUserInfo[id];
                                    row.push(c);
                                }
                                generate(row);
                            }
                        }
                    }
                };
            }, [names, initialize]);
            /**
             * @return {undefined}
             */
            var update = function () {
                initialize("room");
                var documentBodyPromise = null === self || void 0 === self ? void 0 : self.validateFields();
                Promise.all([documentBodyPromise]).then(function (e) {
                    var size_buffer = call(e, 1)[0];
                    console.log("validate:", size_buffer);
                    var msg = self.getFieldsValue().msg;
                    var obj = {
                        op: 5,
                        roomId: 1,
                        authToken: addClass(),
                        msg: msg
                    };
                    console.log("params:", obj);
                    var a = function (objOrTsid) {
                        return property.apply(this, arguments);
                    }(obj);
                    Promise.all([a]).then(function (e) {
                        var t = call(e, 1)[0];
                        console.log("response:", t);
                        if (0 !== (null === t || void 0 === t ? void 0 : t.code)) {
                            rule.error("\u53d1\u9001\u5931\u8d25,\u767b\u5f55\u5df2\u5931\u6548\uff0c\u8bf7\u91cd\u65b0\u767b\u5f55\u5237\u65b0\u9875\u9762\u91cd\u8bd5");
                        }
                        self.resetFields();
                    }).catch(function (contextReference) {
                        console.log("inner e:", contextReference);
                        rule.error("\u53d1\u9001\u5931\u8d25,\u767b\u5f55\u5df2\u5931\u6548\uff0c\u8bf7\u91cd\u65b0\u767b\u5f55\u5237\u65b0\u9875\u9762\u91cd\u8bd5");
                    });
                }).catch(function (contextReference) {
                    console.log("e:", contextReference);
                    rule.error("\u53d1\u9001\u6d88\u606f\u4e0d\u80fd\u4e3a\u7a7a");
                });
            };
            return (0, globs.jsxs)("div", {
                className: "room",
                children: [(0, globs.jsxs)("div", {
                    className: "info",
                    children: [(0, globs.jsxs)(parsedResponse, {
                        title: "",
                        size: "small",
                        bordered: true,
                        column: {
                            xxl: 4,
                            xl: 3,
                            lg: 3,
                            md: 4,
                            sm: 2,
                            xs: 1
                        },
                        children: [(0, globs.jsx)(parsedResponse.Item, {
                            label: "\u623f\u95f4\u540d:",
                            children: "gochat"
                        }), (0, globs.jsx)(parsedResponse.Item, {
                            label: "\u5728\u7ebf\u4eba\u6570:",
                            children: ch
                        }), (0, globs.jsx)(parsedResponse.Item, {
                            label: "Github:",
                            children: (0, globs.jsx)("a", {
                                href: "https://github.com/LockGit/gochat",
                                target: "_blank",
                                children: (0, globs.jsx)(cell, {})
                            })
                        })]
                    }), (0, globs.jsx)("div", {
                        className: "card-container",
                        children: (0, globs.jsxs)(directory, {
                            type: "card",
                            onChange: function (obj) {
                                initialize(obj);
                                trace({
                                    authToken: addClass(),
                                    roomId: 1
                                });
                            },
                            activeKey: activeKey,
                            children: [(0, globs.jsx)(directoryEntries, {
                                tab: "\u804a\u5929\u5ba4",
                                children: (0, globs.jsx)("div", {
                                    className: "message-container",
                                    ref: _this,
                                    children: (0, globs.jsx)("div", {
                                        className: "msg",
                                        id: "msg",
                                        children: names.length > 0 && names.map(function (contextMenu, mmCoreSplitViewBlock) {
                                            return (0, globs.jsx)("p", {
                                                children: contextMenu
                                            }, mmCoreSplitViewBlock);
                                        })
                                    })
                                })
                            }, "room"), (0, globs.jsx)(directoryEntries, {
                                tab: "\u5728\u7ebf\u6210\u5458",
                                children: resolvedSourceMapConfigs.length > 0 && resolvedSourceMapConfigs.map(function (fragment, mmCoreSplitViewBlock) {
                                    return (0, globs.jsxs)("p", {
                                        children: [(0, globs.jsx)(left_tiles, {}), fragment]
                                    }, mmCoreSplitViewBlock);
                                })
                            }, "member")]
                        })
                    })]
                }), (0, globs.jsx)("div", {
                    style: {
                        margin: "1px 0 0 0",
                        height: "55px"
                    },
                    children: (0, globs.jsx)(lambdaBody, {
                        name: "send",
                        form: self,
                        onKeyDown: function (event) {
                            if ("Enter" === event.key) {
                                update();
                            }
                        },
                        children: (0, globs.jsx)(lambdaBody.Item, {
                            name: "msg",
                            rules: [{
                                required: true,
                                message: "\u6d88\u606f\u957f\u5ea61~255",
                                max: 255
                            }],
                            children: (0, globs.jsx)(columnDefs, {
                                ref: function (obj) {
                                    if (null != obj) {
                                        obj.focus();
                                    }
                                },
                                style: {
                                    background: "azure"
                                },
                                placeholder: "\u8bf7\u8f93\u5165\u60a8\u8981\u53d1\u9001\u7684\u6d88\u606f"
                            })
                        })
                    })
                }), (0, globs.jsxs)("div", {
                    className: "send",
                    children: [(0, globs.jsx)(Nested, {
                        style: {
                            margin: "5px 5px 0 0"
                        },
                        type: "primary",
                        onClick: function () {
                            self.resetFields();
                        },
                        children: "\u6e05\u7a7a"
                    }), (0, globs.jsx)(Nested, {
                        style: {
                            margin: "5px 0 0 0"
                        },
                        type: "primary",
                        onClick: update,
                        children: "\u53d1\u9001"
                    })]
                })]
            });
        };
        /**
         * @return {?}
         */
        var toggleVideo = function () {
            return (0, globs.jsxs)("div", {
                className: "video",
                children: [(0, globs.jsx)("div", {
                    className: "go",
                    children: (0, globs.jsx)("img", {
                        src: "./img/go.png"
                    })
                }), (0, globs.jsx)("div", {
                    className: "play",
                    children: (0, globs.jsx)("img", {
                        src: "./img/play.png"
                    })
                })]
            });
        };
        var oWalkersTransformers = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M824.2 699.9a301.55 301.55 0 00-86.4-60.4C783.1 602.8 812 546.8 812 484c0-110.8-92.4-201.7-203.2-200-109.1 1.7-197 90.6-197 200 0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C345 754.6 314 826.8 312 903.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5A226.62 226.62 0 01612 684c60.9 0 118.2 23.7 161.3 66.8C814.5 792 838 846.3 840 904.3c.1 4.3 3.7 7.7 8 7.7h56a8 8 0 008-8.2c-2-77-33-149.2-87.8-203.9zM612 612c-34.2 0-66.4-13.3-90.5-37.5a126.86 126.86 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4 0 34.2-13.3 66.3-37.5 90.5A127.3 127.3 0 01612 612zM361.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7z"
                    }
                }]
            },
            name: "team",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} node
         * @return {?}
         */
        var touchmove = function (context, node) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: node,
                icon: oWalkersTransformers
            }));
        };
        /** @type {string} */
        touchmove.displayName = "TeamOutlined";
        var secondMove = React.forwardRef(touchmove);
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var getName = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} name
         * @return {?}
         */
        var tag = function (name) {
            var len = name.prefixCls;
            var size = name.className;
            var _columnStyles$columnN3 = name.dashed;
            var result = getName(name, ["prefixCls", "className", "dashed"]);
            var id = (0, React.useContext(object).getPrefixCls)("menu", len);
            var n = require()(debug({}, "".concat(id, "-item-divider-dashed"), !!_columnStyles$columnN3), size);
            return React.createElement(Group, _extends({
                className: n
            }, result));
        };
        var range = (0, React.createContext)({
            prefixCls: "",
            firstLevel: true,
            inlineCollapsed: false
        });
        /**
         * @param {!Object} value
         * @param {!Array} _
         * @return {?}
         */
        var getKey = function (value, _) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && _.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (_.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var input = function (name) {
            /**
             * @return {?}
             */
            function n() {
                var cache;
                return log(this, n), (cache = f.apply(this, arguments)).renderItem = function (res) {
                    var _ref;
                    var host;
                    var end = res.siderCollapsed;
                    var data = cache.context;
                    var options = data.prefixCls;
                    var ok = data.firstLevel;
                    var start = data.inlineCollapsed;
                    var undefined = data.direction;
                    var jointKeys = data.disableMenuItemTitleTooltip;
                    var element = cache.props;
                    var classes = element.className;
                    var obj = element.children;
                    var e = cache.props;
                    var s = e.title;
                    var p = e.icon;
                    var value = e.danger;
                    var item = getKey(e, ["title", "icon", "danger"]);
                    var str = s;
                    if ("undefined" === typeof s) {
                        str = ok ? obj : "";
                    } else {
                        if (false === s) {
                            /** @type {string} */
                            str = "";
                        }
                    }
                    var props = {
                        title: str
                    };
                    if (!(end || start)) {
                        /** @type {null} */
                        props.title = null;
                        /** @type {boolean} */
                        props.visible = false;
                    }
                    var d = filter(obj).length;
                    var values = React.createElement(Item, _extends({}, item, {
                        className: require()((_ref = {}, debug(_ref, "".concat(options, "-item-danger"), value), debug(_ref, "".concat(options, "-item-only-child"), 1 === (p ? d + 1 : d)), _ref), classes),
                        title: "string" === typeof s ? s : void 0
                    }), $(p, {
                        className: require()(isString(p) ? null === (host = p.props) || void 0 === host ? void 0 : host.className : "", "".concat(options, "-item-icon"))
                    }), cache.renderItemChildren(start));
                    return jointKeys || (values = React.createElement(header, _extends({}, props, {
                        placement: "rtl" === undefined ? "left" : "right",
                        overlayClassName: "".concat(options, "-inline-collapsed-tooltip")
                    }), values)), values;
                }, cache;
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "renderItemChildren",
                value: function (x) {
                    var component = this.context;
                    var key = component.prefixCls;
                    var onCreateArgs = component.firstLevel;
                    var _props = this.props;
                    var className = _props.icon;
                    var data = _props.children;
                    var over = React.createElement("span", {
                        className: "".concat(key, "-title-content")
                    }, data);
                    return (!className || isString(data) && "span" === data.type) && data && x && onCreateArgs && "string" === typeof data ? React.createElement("div", {
                        className: "".concat(key, "-inline-collapsed-noicon")
                    }, data.charAt(0)) : over;
                }
            }, {
                key: "render",
                value: function () {
                    return React.createElement(_reactRedux.Consumer, null, this.renderItem);
                }
            }]), n;
        }(React.Component);
        input.contextType = range;
        /**
         * @param {!Object} args
         * @return {?}
         */
        var Link = function (args) {
            var props;
            var torrent_title;
            var verbose = args.popupClassName;
            var data = args.icon;
            var msg = args.title;
            var theme = args.theme;
            var config = React.useContext(range);
            var name = config.prefixCls;
            var endpoint = config.inlineCollapsed;
            var field = config.antdMenuTheme;
            var groupCapacity = crossfilter_capacity();
            if (data) {
                var end = isString(msg) && "span" === msg.type;
                torrent_title = React.createElement(React.Fragment, null, $(data, {
                    className: require()(isString(data) ? null === (props = data.props) || void 0 === props ? void 0 : props.className : "", "".concat(name, "-item-icon"))
                }), end ? msg : React.createElement("span", {
                    className: "".concat(name, "-title-content")
                }, msg));
            } else {
                torrent_title = endpoint && !groupCapacity.length && msg && "string" === typeof msg ? React.createElement("div", {
                    className: "".concat(name, "-inline-collapsed-noicon")
                }, msg.charAt(0)) : React.createElement("span", {
                    className: "".concat(name, "-title-content")
                }, msg);
            }
            var command_module_id = React.useMemo(function () {
                return _extends(_extends({}, config), {
                    firstLevel: false
                });
            }, [config]);
            return React.createElement(range.Provider, {
                value: command_module_id
            }, React.createElement(Button, _extends({}, apply(args, ["icon"]), {
                title: torrent_title,
                popupClassName: require()(name, "".concat(name, "-").concat(theme || field), verbose)
            })));
        };
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var pick = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var hide = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var node = React.createContext(null);
        /**
         * @param {!Object} container
         * @return {?}
         */
        var Text = function (container) {
            var n = container.children;
            var item = hide(container, ["children"]);
            var name = React.useContext(node);
            var command_module_id = React.useMemo(function () {
                return _extends(_extends({}, name), item);
            }, [name, item.prefixCls, item.mode, item.selectable]);
            return React.createElement(node.Provider, {
                value: command_module_id
            }, n);
        };
        var subject = node;
        /**
         * @param {!Object} value
         * @param {!Array} config
         * @return {?}
         */
        var getArgs = function (value, config) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && config.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (config.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        var PivotCell = (0, React.forwardRef)(function (args, oldRef) {
            var connection;
            var options = React.useContext(subject) || {};
            var that = React.useContext(object);
            var sprintf = that.getPrefixCls;
            var previousButtonBar = that.getPopupContainer;
            var direction = that.direction;
            var predicted_answer = sprintf();
            var name = args.prefixCls;
            var state = args.className;
            var model = args.theme;
            var type = void 0 === model ? "light" : model;
            var callback = args.expandIcon;
            var instanceObject_7 = args._internalDisableMenuItemTitleTooltip;
            var l = args.inlineCollapsed;
            var oldLayer = args.siderCollapsed;
            var data = args.items;
            var result = args.children;
            var mode = args.mode;
            var value = args.selectable;
            var onClick = args.onClick;
            var props = apply(getArgs(args, ["prefixCls", "className", "theme", "expandIcon", "_internalDisableMenuItemTitleTooltip", "inlineCollapsed", "siderCollapsed", "items", "children", "mode", "selectable", "onClick"]), ["collapsedWidth"]);
            var categories = runASSERTS(data) || result;
            if (!(null === (connection = options.validator) || void 0 === connection)) {
                connection.call(options, {
                    mode: mode
                });
            }
            var _callback;
            var locationFilter = TribeFilter(function () {
                var e;
                if (!(null === onClick || void 0 === onClick)) {
                    onClick.apply(void 0, arguments);
                }
                if (!(null === (e = null === options || void 0 === options ? void 0 : options.onClick) || void 0 === e)) {
                    e.call(options);
                }
            });
            var MODE_DRAWING_LINE = options.mode || mode;
            var element = null !== value && void 0 !== value ? value : options.selectable;
            var R = React.useMemo(function () {
                return void 0 !== oldLayer ? oldLayer : l;
            }, [l, oldLayer]);
            var r = {
                horizontal: {
                    motionName: "".concat(predicted_answer, "-slide-up")
                },
                inline: surfaceContext,
                other: {
                    motionName: "".concat(predicted_answer, "-zoom-big")
                }
            };
            var id = sprintf("menu", name || options.prefixCls);
            var style = require()("".concat(id, "-").concat(type), state);
            _callback = "function" === typeof callback ? callback : $(callback || options.expandIcon, {
                className: "".concat(id, "-submenu-expand-icon")
            });
            var command_module_id = React.useMemo(function () {
                return {
                    prefixCls: id,
                    inlineCollapsed: R || false,
                    antdMenuTheme: type,
                    direction: direction,
                    firstLevel: true,
                    disableMenuItemTitleTooltip: instanceObject_7
                };
            }, [id, R, type, direction, instanceObject_7]);
            return React.createElement(subject.Provider, {
                value: null
            }, React.createElement(range.Provider, {
                value: command_module_id
            }, React.createElement(content, _extends({
                getPopupContainer: previousButtonBar,
                overflowedIndicator: React.createElement(member, null),
                overflowedIndicatorPopupClassName: "".concat(id, "-").concat(type),
                mode: MODE_DRAWING_LINE,
                selectable: element,
                onClick: locationFilter
            }, props, {
                inlineCollapsed: R,
                className: style,
                prefixCls: id,
                direction: direction,
                defaultMotions: r,
                expandIcon: _callback,
                ref: oldRef
            }), categories)));
        });
        var global = function (name) {
            /**
             * @return {?}
             */
            function n() {
                var state;
                return log(this, n), (state = f.apply(this, arguments)).focus = function (obj) {
                    var menu;
                    if (!(null === (menu = state.menu) || void 0 === menu)) {
                        menu.focus(obj);
                    }
                }, state;
            }
            compile(n, name);
            var f = fn(n);
            return g(n, [{
                key: "render",
                value: function () {
                    var _this6 = this;
                    return React.createElement(_reactRedux.Consumer, null, function (data) {
                        return React.createElement(PivotCell, _extends({
                            ref: function (value) {
                                /** @type {!Object} */
                                _this6.menu = value;
                            }
                        }, _this6.props, data));
                    });
                }
            }]), n;
        }(React.Component);
        /** @type {function(!Object): ?} */
        global.Divider = tag;
        global.Item = input;
        /** @type {function(!Object): ?} */
        global.SubMenu = Link;
        /** @type {function(!Object): ?} */
        global.ItemGroup = option;
        var stack;
        var viewName = global;
        !function (exports) {
            /** @type {string} */
            exports.Pop = "POP";
            /** @type {string} */
            exports.Push = "PUSH";
            /** @type {string} */
            exports.Replace = "REPLACE";
        }(stack || (stack = {}));
        /**
         * @param {?} target
         * @return {?}
         */
        var shape = function (target) {
            return target;
        };
        /** @type {string} */
        var RESIZE_EV = "beforeunload";
        /** @type {string} */
        var ActionEvent = "popstate";
        var DTOptions = (0, React.createContext)(null);
        var pinInput = (0, React.createContext)(null);
        var media = (0, React.createContext)({
            outlet: null,
            matches: []
        });
        /** @type {!RegExp} */
        var reFeaturedMethod = /^:\w+$/;
        /**
         * @param {string} f_string
         * @return {?}
         */
        var substr = function (f_string) {
            return "*" === f_string;
        };
        /**
         * @param {!Array} b
         * @return {?}
         */
        var evaluate = function (b) {
            return b.join("/").replace(/\/\/+/g, "/");
        };
        /**
         * @param {string} previous
         * @return {?}
         */
        var relative = function (previous) {
            return previous.replace(/\/+$/, "").replace(/^\/*/, "/");
        };
        /**
         * @param {string} s
         * @return {?}
         */
        var selectAll = function (s) {
            return s && "?" !== s ? s.startsWith("?") ? s : "?" + s : "";
        };
        /**
         * @param {string} value
         * @return {?}
         */
        var md5 = function (value) {
            return value && "#" !== value ? value.startsWith("#") ? value : "#" + value : "";
        };
        /** @type {!Array} */
        var values = ["onClick", "reloadDocument", "replace", "state", "target", "to"];
        var initialArgValues = (0, React.forwardRef)(function (result, oldRef) {
            var _onClick = result.onClick;
            var error = result.reloadDocument;
            var rt = result.replace;
            var replace = void 0 !== rt && rt;
            var state = result.state;
            var targetMessage = result.target;
            var url = result.to;
            var args = copy(result, values);
            var shortURL = redirect(url);
            var tmp = function (key, fn) {
                /** @type {({replace: ?, state: ?, target: ?}|{})} */
                var event = void 0 === fn ? {} : fn;
                var debuggerModel = event.target;
                var filename = event.replace;
                var state = event.state;
                var flushBufferInto = write();
                var file = parseUrl();
                var a = getTemplate(key);
                return (0, React.useCallback)(function (event) {
                    if (0 === event.button && (!debuggerModel || "_self" === debuggerModel) && !function (event) {
                        return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
                    }(event)) {
                        event.preventDefault();
                        /** @type {boolean} */
                        var isReplaceAction = !!filename || unpack(file) === unpack(a);
                        flushBufferInto(key, {
                            replace: isReplaceAction,
                            state: state
                        });
                    }
                }, [file, flushBufferInto, a, filename, state, debuggerModel, key]);
            }(url, {
                replace: replace,
                state: state,
                target: targetMessage
            });
            return (0, React.createElement)("a", parseArgs({}, args, {
                href: shortURL,
                onClick: function (e) {
                    if (_onClick) {
                        _onClick(e);
                    }
                    if (!(e.defaultPrevented || error)) {
                        tmp(e);
                    }
                },
                ref: oldRef,
                target: targetMessage
            }));
        });
        var settings = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M868 732h-70.3c-4.8 0-9.3 2.1-12.3 5.8-7 8.5-14.5 16.7-22.4 24.5a353.84 353.84 0 01-112.7 75.9A352.8 352.8 0 01512.4 866c-47.9 0-94.3-9.4-137.9-27.8a353.84 353.84 0 01-112.7-75.9 353.28 353.28 0 01-76-112.5C167.3 606.2 158 559.9 158 512s9.4-94.2 27.8-137.8c17.8-42.1 43.4-80 76-112.5s70.5-58.1 112.7-75.9c43.6-18.4 90-27.8 137.9-27.8 47.9 0 94.3 9.3 137.9 27.8 42.2 17.8 80.1 43.4 112.7 75.9 7.9 7.9 15.3 16.1 22.4 24.5 3 3.7 7.6 5.8 12.3 5.8H868c6.3 0 10.2-7 6.7-12.3C798 160.5 663.8 81.6 511.3 82 271.7 82.6 79.6 277.1 82 516.4 84.4 751.9 276.2 942 512.4 942c152.1 0 285.7-78.8 362.3-197.7 3.4-5.3-.4-12.3-6.7-12.3zm88.9-226.3L815 393.7c-5.3-4.2-13-.4-13 6.3v76H488c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h314v76c0 6.7 7.8 10.5 13 6.3l141.9-112a8 8 0 000-12.6z"
                    }
                }]
            },
            name: "logout",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} child
         * @return {?}
         */
        var b = function (context, child) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: child,
                icon: settings
            }));
        };
        /** @type {string} */
        b.displayName = "LogoutOutlined";
        var color = React.forwardRef(b);
        /** @type {!Array} */
        var tableApi = [{
            label: "\u767b\u5f55(Login)",
            key: "/login"
        }, {
            label: "\u6ce8\u518c(Register)",
            key: "/register"
        }];
        /** @type {!Array} */
        var signatureTableApi = [{
            label: "\u9000\u51fa(Logout)",
            key: "/logout",
            icon: (0, globs.jsx)(color, {})
        }];
        /**
         * @return {?}
         */
        var loadImage = function () {
            var result = call((0, React.useState)(""), 2);
            var body = result[0];
            var text = result[1];
            var group = call((0, React.useState)(tableApi), 2);
            var names = group[0];
            var deleteSignatures = group[1];
            var apiKey = addClass();
            var timestampGenerator = (0, React.useRef)(true);
            return (0, React.useEffect)(function () {
                if (timestampGenerator.current) {
                    /** @type {boolean} */
                    timestampGenerator.current = false;
                    var documentBodyPromise = function (partKeys) {
                        return c.apply(this, arguments);
                    }({
                        authToken: apiKey
                    });
                    Promise.all([documentBodyPromise]).then(function (e) {
                        var data;
                        var node;
                        var id = call(e, 1)[0];
                        if ("" !== (null === id || void 0 === id || null === (data = id.data) || void 0 === data ? void 0 : data.userName) && void 0 !== id) {
                            text(null === id || void 0 === id || null === (node = id.data) || void 0 === node ? void 0 : node.userName);
                            deleteSignatures(signatureTableApi);
                        }
                    }).catch(function (contextReference) {
                        console.log("error:", contextReference);
                    });
                }
            }, [apiKey]), (0, globs.jsxs)("div", {
                children: [(0, globs.jsx)("div", {
                    className: "logo"
                }), (0, globs.jsxs)("div", {
                    className: "header",
                    children: [(0, globs.jsx)("div", {
                        className: "header_name",
                        children: (0, globs.jsx)(initialArgValues, {
                            to: "/",
                            children: (0, globs.jsxs)("span", {
                                children: [(0, globs.jsx)(secondMove, {}), "\u5206\u5e03\u5f0f\u5373\u65f6\u901a\u8baf\u7cfb\u7edf(gochat)"]
                            })
                        })
                    }), (0, globs.jsxs)("div", {
                        className: "menu",
                        children: ["" !== body && (0, globs.jsxs)("div", {
                            className: "nick_name",
                            children: ["\u60a8\u597d\uff1a", body]
                        }), (0, globs.jsx)(viewName, {
                            theme: "dark",
                            mode: "horizontal",
                            overflowedIndicator: false,
                            items: names,
                            onClick: function (e) {
                                var uid = e.key;
                                if (console.log("--", uid), "/logout" === uid) {
                                    var documentBodyPromise = function (partKeys) {
                                        return complete.apply(this, arguments);
                                    }({
                                        authToken: apiKey
                                    });
                                    Promise.all([documentBodyPromise]).then(function (e) {
                                        var t = call(e, 1)[0];
                                        if (0 === (null === t || void 0 === t ? void 0 : t.code) && void 0 !== t) {
                                            localStorage.setItem("authToken", "");
                                            deleteSignatures(tableApi);
                                            text("");
                                        }
                                    }).catch(function (contextReference) {
                                        console.log("error:", contextReference);
                                    });
                                } else {
                                    window.location.href = uid;
                                }
                            }
                        })]
                    })]
                })]
            });
        };
        /**
         * @return {?}
         */
        var slitscan = function () {
            return (0, globs.jsxs)("div", {
                children: [(0, globs.jsx)("span", {
                    children: "Author By Lock @MIT License "
                }), (0, globs.jsxs)("a", {
                    href: "https://github.com/LockGit/gochat",
                    target: "_blank",
                    children: [(0, globs.jsx)(cell, {}), "LockGit/gochat"]
                })]
            });
        };
        var syn1c = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                    }
                }]
            },
            name: "down",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} layer
         * @return {?}
         */
        var StyledComponent = function (context, layer) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: layer,
                icon: syn1c
            }));
        };
        /** @type {string} */
        StyledComponent.displayName = "DownOutlined";
        var Note = React.forwardRef(StyledComponent);
        /**
         * @param {!Object} obj
         * @param {!Array} keys
         * @return {?}
         */
        var _objectWithoutProperties = function (obj, keys) {
            var q = {};
            var a;
            for (a in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, a) && keys.indexOf(a) < 0) {
                    q[a] = obj[a];
                }
            }
            if (null != obj && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var k = 0;
                /** @type {!Array<?>} */
                a = Object.getOwnPropertySymbols(obj);
                for (; k < a.length; k++) {
                    if (keys.indexOf(a[k]) < 0 && Object.prototype.propertyIsEnumerable.call(obj, a[k])) {
                        q[a[k]] = obj[a[k]];
                    }
                }
            }
            return q;
        };
        var ReactInfiniteListApp = Nested.Group;
        /**
         * @param {!Object} options
         * @return {?}
         */
        var postLink = function (options) {
            var def = React.useContext(object);
            var body = def.getPopupContainer;
            var get = def.getPrefixCls;
            var order = def.direction;
            var end = options.prefixCls;
            var string = options.type;
            var type = void 0 === string ? "default" : string;
            var disabled = options.disabled;
            var loading = options.loading;
            var onClick = options.onClick;
            var pagesToDisplay = options.htmlType;
            var tabHeads = options.children;
            var classes = options.className;
            var overlay = options.overlay;
            var trigger = options.trigger;
            var align = options.align;
            var data = options.visible;
            var easeVal = options.onVisibleChange;
            var dryRun = options.placement;
            var path = options.getPopupContainer;
            var xmlUrl = options.href;
            var icon = options.icon;
            var pinImage = void 0 === icon ? React.createElement(member, null) : icon;
            var pTitle = options.title;
            var value = options.buttonsRender;
            var prop = void 0 === value ? function (value) {
                return value;
            } : value;
            var gen_code_options = options.mouseEnterDelay;
            var d3version = options.mouseLeaveDelay;
            var nameVersions = options.overlayClassName;
            var injectAs = options.overlayStyle;
            var progressClb = options.destroyPopupOnHide;
            var props = _objectWithoutProperties(options, ["prefixCls", "type", "disabled", "loading", "onClick", "htmlType", "children", "className", "overlay", "trigger", "align", "visible", "onVisibleChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide"]);
            var key = get("dropdown-button", end);
            var defaults = {
                align: align,
                overlay: overlay,
                disabled: disabled,
                trigger: disabled ? [] : trigger,
                onVisibleChange: easeVal,
                getPopupContainer: path || body,
                mouseEnterDelay: gen_code_options,
                mouseLeaveDelay: d3version,
                overlayClassName: nameVersions,
                overlayStyle: injectAs,
                destroyPopupOnHide: progressClb
            };
            if ("visible" in options) {
                defaults.visible = data;
            }
            defaults.placement = "placement" in options ? dryRun : "rtl" === order ? "bottomLeft" : "bottomRight";
            var form = call(prop([React.createElement(Nested, {
                type: type,
                disabled: disabled,
                loading: loading,
                onClick: onClick,
                htmlType: pagesToDisplay,
                href: xmlUrl,
                title: pTitle
            }, tabHeads), React.createElement(Nested, {
                type: type,
                icon: pinImage
            })]), 2);
            var item = form[0];
            var items = form[1];
            return React.createElement(ReactInfiniteListApp, _extends({}, props, {
                className: require()(key, classes)
            }), item, React.createElement(ResultsTableComponent, _extends({}, defaults), items));
        };
        /** @type {boolean} */
        postLink.__ANT_BUTTON = true;
        /** @type {function(!Object): ?} */
        var isFlick = postLink;
        /** @type {function(!Object): ?} */
        var eventGesture = (equal("topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight", "top", "bottom"), function (options) {
            var n;
            var that = React.useContext(object);
            var name = that.getPopupContainer;
            var a = that.getPrefixCls;
            var hash = that.direction;
            var obj = options.arrow;
            var date = options.prefixCls;
            var script = options.children;
            var enable = options.trigger;
            var disabled = options.disabled;
            var windowName = options.getPopupContainer;
            var permissions = options.overlayClassName;
            var visible = options.visible;
            var setup = options.onVisibleChange;
            var d = a("dropdown", date);
            var node = React.Children.only(script);
            var indicators = $(node, {
                className: require()("".concat(d, "-trigger"), debug({}, "".concat(d, "-rtl"), "rtl" === hash), node.props.className),
                disabled: disabled
            });
            var self = disabled ? [] : enable;
            if (self && -1 !== self.indexOf("contextMenu")) {
                /** @type {boolean} */
                n = true;
            }
            var form = call(done(false, {
                value: visible
            }), 2);
            var value = form[0];
            var input = form[1];
            var locationFilter = TribeFilter(function (value) {
                if (!(null === setup || void 0 === setup)) {
                    setup(value);
                }
                input(value);
            });
            var groupPermissionsRef = require()(permissions, debug({}, "".concat(d, "-rtl"), "rtl" === hash));
            var corners = createCornerElements({
                arrowPointAtCenter: "object" === stringify(obj) && obj.pointAtCenter,
                autoAdjustOverflow: true
            });
            var onPlusClick = React.useCallback(function () {
                input(false);
            }, []);
            return React.createElement(z, _extends({
                alignPoint: n
            }, options, {
                visible: value,
                builtinPlacements: corners,
                arrow: !!obj,
                overlayClassName: groupPermissionsRef,
                prefixCls: d,
                getPopupContainer: windowName || name,
                transitionName: function () {
                    var predicted_answer = a();
                    var root = options.placement;
                    var sel = void 0 === root ? "" : root;
                    var c = options.transitionName;
                    return void 0 !== c ? c : sel.indexOf("top") >= 0 ? "".concat(predicted_answer, "-slide-down") : "".concat(predicted_answer, "-slide-up");
                }(),
                trigger: self,
                overlay: function () {
                    var value;
                    var fn = options.overlay;
                    return value = "function" === typeof fn ? fn() : fn, value = React.Children.only("string" === typeof value ? React.createElement("span", null, value) : value), React.createElement(Text, {
                        prefixCls: "".concat(d, "-menu"),
                        expandIcon: React.createElement("span", {
                            className: "".concat(d, "-menu-submenu-arrow")
                        }, React.createElement(NgReactGridShowPerPage, {
                            className: "".concat(d, "-menu-submenu-arrow-icon")
                        })),
                        mode: "vertical",
                        selectable: false,
                        onClick: onPlusClick,
                        validator: function (options) {
                            options.mode;
                        }
                    }, value);
                },
                placement: function () {
                    var now = options.placement;
                    return now ? now.includes("Center") ? now.slice(0, now.indexOf("Center")) : now : "rtl" === hash ? "bottomRight" : "bottomLeft";
                }(),
                onVisibleChange: locationFilter
            }), indicators);
        });
        /** @type {function(!Object): ?} */
        eventGesture.Button = isFlick;
        eventGesture.defaultProps = {
            mouseEnterDelay: .15,
            mouseLeaveDelay: .1
        };
        /** @type {function(!Object): ?} */
        var ResultsTableComponent = eventGesture;
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var each = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var createMenu = function (options) {
            var type;
            var text;
            var origin = options.prefixCls;
            var decimals = options.separator;
            var icon = void 0 === decimals ? "/" : decimals;
            var value = options.children;
            var overlay = options.overlay;
            var _props = options.dropdownProps;
            var item = each(options, ["prefixCls", "separator", "children", "overlay", "dropdownProps"]);
            var key = (0, React.useContext(object).getPrefixCls)("breadcrumb", origin);
            return type = "href" in item ? React.createElement("a", _extends({
                className: "".concat(key, "-link")
            }, item), value) : React.createElement("span", _extends({
                className: "".concat(key, "-link")
            }, item), value), text = type, type = overlay ? React.createElement(ResultsTableComponent, _extends({
                overlay: overlay,
                placement: "bottom"
            }, _props), React.createElement("span", {
                className: "".concat(key, "-overlay-link")
            }, text, React.createElement(Note, null))) : text, value ? React.createElement("li", null, type, icon && React.createElement("span", {
                className: "".concat(key, "-separator")
            }, icon)) : null;
        };
        /** @type {boolean} */
        createMenu.__ANT_BREADCRUMB_ITEM = true;
        /** @type {function(!Object): ?} */
        var StandardText = createMenu;
        /**
         * @param {!Object} line
         * @return {?}
         */
        var renderSpan = function (line) {
            var text = line.children;
            var key = (0, React.useContext(object).getPrefixCls)("breadcrumb");
            return React.createElement("span", {
                className: "".concat(key, "-separator")
            }, text || "/");
        };
        /** @type {boolean} */
        renderSpan.__ANT_BREADCRUMB_SEPARATOR = true;
        /** @type {function(!Object): ?} */
        var separator = renderSpan;
        /**
         * @param {!Object} obj
         * @param {!Array} e
         * @return {?}
         */
        var forIn = function (obj, e) {
            var hash = {};
            var a;
            for (a in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, a) && e.indexOf(a) < 0) {
                    hash[a] = obj[a];
                }
            }
            if (null != obj && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                a = Object.getOwnPropertySymbols(obj);
                for (; i < a.length; i++) {
                    if (e.indexOf(a[i]) < 0 && Object.prototype.propertyIsEnumerable.call(obj, a[i])) {
                        hash[a[i]] = obj[a[i]];
                    }
                }
            }
            return hash;
        };
        /**
         * @param {undefined} t
         * @param {!Object} value
         * @return {?}
         */
        var concat = function (t, value) {
            return t = (t || "").replace(/^\//, ""), Object.keys(value).forEach(function (i) {
                t = t.replace(":".concat(i), value[i]);
            }), t;
        };
        /**
         * @param {!Array} index
         * @param {number} cls
         * @param {undefined} name
         * @return {?}
         */
        var iterator = function (index, cls, name) {
            var l = resolve(index);
            var value = concat(cls || "", name);
            return value && l.push(value), l;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        var _init = function (options) {
            var categories;
            var e = options.prefixCls;
            var separator = options.separator;
            var sep = void 0 === separator ? "/" : separator;
            var textStyle = options.style;
            var data = options.className;
            var routes = options.routes;
            var s = options.children;
            var fn = options.itemRender;
            var callback = void 0 === fn ? onSuccess : fn;
            var name = options.params;
            var key = void 0 === name ? {} : name;
            var inherited = forIn(options, ["prefixCls", "separator", "style", "className", "routes", "children", "itemRender", "params"]);
            var result = React.useContext(object);
            var $ = result.getPrefixCls;
            var hash = result.direction;
            var id = $("breadcrumb", e);
            if (routes && routes.length > 0) {
                /** @type {!Array} */
                var i = [];
                categories = routes.map(function (item) {
                    var view;
                    var name = concat(item.path, key);
                    return name && i.push(name), item.children && item.children.length && (view = React.createElement(viewName, {
                        items: item.children.map(function (item) {
                            return {
                                key: item.path || item.breadcrumbName,
                                label: callback(item, key, routes, iterator(i, item.path, key))
                            };
                        })
                    })), React.createElement(StandardText, {
                        overlay: view,
                        separator: sep,
                        key: name || item.breadcrumbName
                    }, callback(item, key, routes, i));
                });
            } else {
                if (s) {
                    categories = filter(s).map(function (show, awsKey) {
                        return show ? $(show, {
                            separator: sep,
                            key: awsKey
                        }) : show;
                    });
                }
            }
            var content = require()(id, debug({}, "".concat(id, "-rtl"), "rtl" === hash), data);
            return React.createElement("nav", _extends({
                className: content,
                style: textStyle
            }, inherited), React.createElement("ol", null, categories));
        };
        /** @type {function(!Object): ?} */
        _init.Item = StandardText;
        /** @type {function(!Object): ?} */
        _init.Separator = separator;
        /** @type {function(!Object): ?} */
        var GroupComponent = _init;
        /**
         * @param {!Object} value
         * @param {!Array} object
         * @return {?}
         */
        var isArrayLike = function (value, object) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && object.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (object.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /**
         * @param {!Object} obj
         * @return {?}
         */
        var handleClick = function (obj) {
            var err;
            var entityName = obj.prefixCls;
            var name = obj.className;
            var value = obj.checked;
            var handler = obj.onChange;
            var _onClick = obj.onClick;
            var props = isArrayLike(obj, ["prefixCls", "className", "checked", "onChange", "onClick"]);
            var e = (0, React.useContext(object).getPrefixCls)("tag", entityName);
            var localPath = require()(e, (debug(err = {}, "".concat(e, "-checkable"), true), debug(err, "".concat(e, "-checkable-checked"), value), err), name);
            return React.createElement("span", _extends({}, props, {
                className: localPath,
                onClick: function (e) {
                    if (!(null === handler || void 0 === handler)) {
                        handler(!value);
                    }
                    if (!(null === _onClick || void 0 === _onClick)) {
                        _onClick(e);
                    }
                }
            }));
        };
        /**
         * @param {!Object} value
         * @param {!Array} parent
         * @return {?}
         */
        var select = function (value, parent) {
            var result = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && parent.indexOf(path) < 0) {
                    result[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (parent.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        result[path[i]] = value[path[i]];
                    }
                }
            }
            return result;
        };
        /** @type {!RegExp} */
        var excludeParameterMatch = new RegExp("^(".concat(expected.join("|"), ")(-inverse)?$"));
        /** @type {!RegExp} */
        var nowRelative = new RegExp("^(".concat(messages.join("|"), ")$"));
        /**
         * @param {!Object} options
         * @param {string} model
         * @return {?}
         */
        var createElement = function (options, model) {
            var err;
            var opt = options.prefixCls;
            var name = options.className;
            var i = options.style;
            var value = options.children;
            var toption = options.icon;
            var color = options.color;
            var onClose = options.onClose;
            var data = options.closeIcon;
            var closable = options.closable;
            var nodeList = void 0 !== closable && closable;
            var el = select(options, ["prefixCls", "className", "style", "children", "icon", "color", "onClose", "closeIcon", "closable"]);
            var result = React.useContext(object);
            var $ = result.getPrefixCls;
            var hash = result.direction;
            var group = call(React.useState(true), 2);
            var endtoken = group[0];
            var indexOf = group[1];
            React.useEffect(function () {
                if ("visible" in el) {
                    indexOf(el.visible);
                }
            }, [el.visible]);
            /**
             * @return {?}
             */
            var isAllowed = function () {
                return !!color && (excludeParameterMatch.test(color) || nowRelative.test(color));
            };
            var baseHRstyle = _extends({
                backgroundColor: color && !isAllowed() ? color : void 0
            }, i);
            var size = isAllowed();
            var id = $("tag", opt);
            var attachment = require()(id, (debug(err = {}, "".concat(id, "-").concat(color), size), debug(err, "".concat(id, "-has-color"), color && !size), debug(err, "".concat(id, "-hidden"), !endtoken), debug(err, "".concat(id, "-rtl"), "rtl" === hash), err), name);
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            var onClick = function (e) {
                e.stopPropagation();
                if (!(null === onClose || void 0 === onClose)) {
                    onClose(e);
                }
                if (!(e.defaultPrevented || "visible" in el)) {
                    indexOf(false);
                }
            };
            var wrapAsObjs = "onClick" in el || value && "a" === value.type;
            var props = apply(el, ["visible"]);
            var msg = toption || null;
            var message = msg ? React.createElement(React.Fragment, null, msg, React.createElement("span", null, value)) : value;
            var c = React.createElement("span", _extends({}, props, {
                ref: model,
                className: attachment,
                style: baseHRstyle
            }), message, nodeList ? data ? React.createElement("span", {
                className: "".concat(id, "-close-icon"),
                onClick: onClick
            }, data) : React.createElement(span, {
                className: "".concat(id, "-close-icon"),
                onClick: onClick
            }) : null);
            return wrapAsObjs ? React.createElement(canvas, null, c) : c;
        };
        var el = React.forwardRef(createElement);
        /** @type {function(!Object): ?} */
        el.CheckableTag = handleClick;
        var G__26636_26639 = el;
        var api = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M168 504.2c1-43.7 10-86.1 26.9-126 17.3-41 42.1-77.7 73.7-109.4S337 212.3 378 195c42.4-17.9 87.4-27 133.9-27s91.5 9.1 133.8 27A341.5 341.5 0 01755 268.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.7 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c0-6.7-7.7-10.5-12.9-6.3l-56.4 44.1C765.8 155.1 646.2 92 511.8 92 282.7 92 96.3 275.6 92 503.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8zm756 7.8h-60c-4.4 0-7.9 3.5-8 7.8-1 43.7-10 86.1-26.9 126-17.3 41-42.1 77.8-73.7 109.4A342.45 342.45 0 01512.1 856a342.24 342.24 0 01-243.2-100.8c-9.9-9.9-19.2-20.4-27.8-31.4l60.2-47a8 8 0 00-3-14.1l-175.7-43c-5-1.2-9.9 2.6-9.9 7.7l-.7 181c0 6.7 7.7 10.5 12.9 6.3l56.4-44.1C258.2 868.9 377.8 932 512.2 932c229.2 0 415.5-183.7 419.8-411.8a8 8 0 00-8-8.2z"
                    }
                }]
            },
            name: "sync",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} node
         * @return {?}
         */
        var childSelector = function (context, node) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: node,
                icon: api
            }));
        };
        /** @type {string} */
        childSelector.displayName = "SyncOutlined";
        var multiple = React.forwardRef(childSelector);
        /**
         * @return {?}
         */
        var andThen = function () {
            return (0, globs.jsx)(GroupComponent, {
                style: {
                    margin: "16px 0"
                },
                children: (0, globs.jsxs)(GroupComponent.Item, {
                    children: [(0, globs.jsx)("span", {
                        className: "project",
                        children: (0, globs.jsx)("span", {
                            className: "font",
                            children: (0, globs.jsxs)("a", {
                                href: "https://github.com/LockGit/gochat",
                                target: "_blank",
                                children: [(0, globs.jsx)(cell, {}), " LockGit/gochat"]
                            })
                        })
                    }), (0, globs.jsxs)("span", {
                        style: {
                            margin: "0 0 0 20px"
                        },
                        children: [(0, globs.jsx)(G__26636_26639, {
                            icon: (0, globs.jsx)(multiple, {
                                spin: true
                            }),
                            color: "processing",
                            children: "gochat"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "magenta",
                            children: "IM"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "orange",
                            children: "Golang"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "red",
                            children: "WebSocket"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "gold",
                            children: "TCP"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "purple",
                            children: "Distributed"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "volcano",
                            children: "Pure Go"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "green",
                            children: "Docker"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "cyan",
                            children: "Etcd"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "blue",
                            children: "Rpcx"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "blue",
                            children: "Cache"
                        }), (0, globs.jsx)(G__26636_26639, {
                            color: "geekblue",
                            children: "Queue"
                        })]
                    })]
                })
            });
        };
        var watch = helper.Header;
        var startAngle2 = helper.Content;
        var po = helper.Footer;
        /**
         * @return {?}
         */
        var buildProgress = function () {
            return (0, globs.jsxs)(helper, {
                children: [(0, globs.jsx)(watch, {
                    style: {
                        position: "fixed",
                        zIndex: 1,
                        width: "100%"
                    },
                    children: (0, globs.jsx)(loadImage, {})
                }), (0, globs.jsxs)(startAngle2, {
                    className: "site-layout",
                    style: {
                        padding: "0 50px",
                        marginTop: 64
                    },
                    children: [(0, globs.jsx)(andThen, {}), (0, globs.jsx)("div", {
                        className: "site-layout-background",
                        style: {
                            padding: 24,
                            minHeight: 500
                        },
                        children: (0, globs.jsxs)("div", {
                            className: "main",
                            children: [(0, globs.jsx)(toggleVideo, {}), (0, globs.jsx)(initialize, {})]
                        })
                    })]
                }), (0, globs.jsx)(po, {
                    style: {
                        textAlign: "center"
                    },
                    children: (0, globs.jsx)(slitscan, {})
                })]
            });
        };
        /**
         * @param {!Object} props
         * @return {?}
         */
        var componentDidMount = function (props) {
            var err;
            var result = (0, React.useContext)(object);
            var $ = result.getPrefixCls;
            var hash = result.direction;
            var k = props.prefixCls;
            var key = props.className;
            var url = void 0 === key ? "" : key;
            var e = $("input-group", k);
            var className = require()(e, (debug(err = {}, "".concat(e, "-lg"), "large" === props.size), debug(err, "".concat(e, "-sm"), "small" === props.size), debug(err, "".concat(e, "-compact"), props.compact), debug(err, "".concat(e, "-rtl"), "rtl" === hash), err), url);
            var namespace = (0, React.useContext)(channel);
            var command_module_id = (0, React.useMemo)(function () {
                return _extends(_extends({}, namespace), {
                    isFormItemInput: false
                });
            }, [namespace]);
            return React.createElement("span", {
                className: className,
                style: props.style,
                onMouseEnter: props.onMouseEnter,
                onMouseLeave: props.onMouseLeave,
                onFocus: props.onFocus,
                onBlur: props.onBlur
            }, React.createElement(channel.Provider, {
                value: command_module_id
            }, props.children));
        };
        var elements = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                    }
                }, {
                    tag: "path",
                    attrs: {
                        d: "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                    }
                }]
            },
            name: "eye-invisible",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} url
         * @return {?}
         */
        var script = function (context, url) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: url,
                icon: elements
            }));
        };
        /** @type {string} */
        script.displayName = "EyeInvisibleOutlined";
        var OldFilterFormConcrete = React.forwardRef(script);
        var cfg = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z"
                    }
                }]
            },
            name: "eye",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} name
         * @return {?}
         */
        var task = function (context, name) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: name,
                icon: cfg
            }));
        };
        /** @type {string} */
        task.displayName = "EyeOutlined";
        var ref = React.forwardRef(task);
        /**
         * @param {!Object} value
         * @param {!Array} parent
         * @return {?}
         */
        var setProperties = function (value, parent) {
            var acc = {};
            var path;
            for (path in value) {
                if (Object.prototype.hasOwnProperty.call(value, path) && parent.indexOf(path) < 0) {
                    acc[path] = value[path];
                }
            }
            if (null != value && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                path = Object.getOwnPropertySymbols(value);
                for (; i < path.length; i++) {
                    if (parent.indexOf(path[i]) < 0 && Object.prototype.propertyIsEnumerable.call(value, path[i])) {
                        acc[path[i]] = value[path[i]];
                    }
                }
            }
            return acc;
        };
        var prefixMapping = {
            click: "onClick",
            hover: "onMouseOver"
        };
        var SnackBar = React.forwardRef(function (data, oldRef) {
            var res = call((0, React.useState)(false), 2);
            var id = res[0];
            var write = res[1];
            /**
             * @return {undefined}
             */
            var i = function () {
                if (!data.disabled) {
                    write(!id);
                }
            };
            /**
             * @param {?} definition
             * @return {?}
             */
            var create = function (definition) {
                var $ = definition.getPrefixCls;
                var state = data.className;
                var direction = data.prefixCls;
                var col = data.inputPrefixCls;
                var size = data.size;
                var match = data.visibilityToggle;
                var path = setProperties(data, ["className", "prefixCls", "inputPrefixCls", "size", "visibilityToggle"]);
                var el = $("input", col);
                var type = $("input-password", direction);
                var exts = match && function (name) {
                    var e;
                    var type = data.action;
                    var tweenFunction = data.iconRender;
                    var base = prefixMapping[type] || "";
                    var c = (void 0 === tweenFunction ? function () {
                        return null;
                    } : tweenFunction)(id);
                    var props = (debug(e = {}, base, i), debug(e, "className", "".concat(name, "-icon")), debug(e, "key", "passwordIcon"), debug(e, "onMouseDown", function (event) {
                        event.preventDefault();
                    }), debug(e, "onMouseUp", function (event) {
                        event.preventDefault();
                    }), e);
                    return React.cloneElement(React.isValidElement(c) ? c : React.createElement("span", null, c), props);
                }(type);
                var style = require()(type, state, debug({}, "".concat(type, "-").concat(size), !!size));
                var attrs = _extends(_extends({}, apply(path, ["suffix", "iconRender"])), {
                    type: id ? "text" : "password",
                    className: style,
                    prefixCls: el,
                    suffix: exts
                });
                return size && (attrs.size = size), React.createElement(HorizontalScroller, _extends({
                    ref: oldRef
                }, attrs));
            };
            return React.createElement(src, null, create);
        });
        SnackBar.defaultProps = {
            action: "click",
            visibilityToggle: true,
            iconRender: function (scoringCriteriaId) {
                return scoringCriteriaId ? React.createElement(ref, null) : React.createElement(OldFilterFormConcrete, null);
            }
        };
        var password = SnackBar;
        var slider = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"
                    }
                }]
            },
            name: "search",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} data
         * @return {?}
         */
        var model = function (context, data) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: data,
                icon: slider
            }));
        };
        /** @type {string} */
        model.displayName = "SearchOutlined";
        var DropIndicator = React.forwardRef(model);
        /**
         * @param {!Object} obj
         * @param {!Array} src
         * @return {?}
         */
        var copyProps = function (obj, src) {
            var out = {};
            var name;
            for (name in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, name) && src.indexOf(name) < 0) {
                    out[name] = obj[name];
                }
            }
            if (null != obj && "function" === typeof Object.getOwnPropertySymbols) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array<?>} */
                name = Object.getOwnPropertySymbols(obj);
                for (; i < name.length; i++) {
                    if (src.indexOf(name[i]) < 0 && Object.prototype.propertyIsEnumerable.call(obj, name[i])) {
                        out[name[i]] = obj[name[i]];
                    }
                }
            }
            return out;
        };
        var outFile = React.forwardRef(function (self, path) {
            var err;
            var addonAfter;
            var lexem = self.prefixCls;
            var lexeme = self.inputPrefixCls;
            var name = self.className;
            var cs = self.size;
            var suffix = self.suffix;
            var _elClass = self.enterButton;
            var data = void 0 !== _elClass && _elClass;
            var m = self.addonAfter;
            var loading = self.loading;
            var flag = self.disabled;
            var callback = self.onSearch;
            var handler = self.onChange;
            var x = self.onCompositionStart;
            var trigger = self.onCompositionEnd;
            var item = copyProps(self, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange", "onCompositionStart", "onCompositionEnd"]);
            var option = React.useContext(object);
            var endOfMode = option.getPrefixCls;
            var hash = option.direction;
            var req = React.useContext(foobar);
            var timestampGenerator = React.useRef(false);
            var e = cs || req;
            var arg = React.useRef(null);
            /**
             * @param {!Event} event
             * @return {undefined}
             */
            var onClick = function (event) {
                var token;
                if (document.activeElement === (null === (token = arg.current) || void 0 === token ? void 0 : token.input)) {
                    event.preventDefault();
                }
            };
            /**
             * @param {?} item
             * @return {undefined}
             */
            var blur = function (item) {
                var token;
                var tblr;
                if (callback) {
                    callback(null === (tblr = null === (token = arg.current) || void 0 === token ? void 0 : token.input) || void 0 === tblr ? void 0 : tblr.value, item);
                }
            };
            var level = endOfMode("input-search", lexem);
            var end_mode = endOfMode("input", lexeme);
            var awesomeIcon = "boolean" === typeof data ? React.createElement(DropIndicator, null) : null;
            /** @type {string} */
            var container = "".concat(level, "-button");
            var el = data || {};
            var partial = el.type && true === el.type.__ANT_BUTTON;
            addonAfter = partial || "button" === el.type ? $(el, _extends({
                onMouseDown: onClick,
                onClick: function (e) {
                    var mask;
                    var controller;
                    if (!(null === (controller = null === (mask = null === el || void 0 === el ? void 0 : el.props) || void 0 === mask ? void 0 : mask.onClick) || void 0 === controller)) {
                        controller.call(mask, e);
                    }
                    blur(e);
                },
                key: "enterButton"
            }, partial ? {
                className: container,
                size: e
            } : {})) : React.createElement(Nested, {
                className: container,
                type: data ? "primary" : void 0,
                size: e,
                disabled: flag,
                key: "enterButton",
                onMouseDown: onClick,
                onClick: blur,
                loading: loading,
                icon: awesomeIcon
            }, data);
            if (m) {
                /** @type {!Array} */
                addonAfter = [addonAfter, $(m, {
                    key: "addonAfter"
                })];
            }
            var record = require()(level, (debug(err = {}, "".concat(level, "-rtl"), "rtl" === hash), debug(err, "".concat(level, "-").concat(e), !!e), debug(err, "".concat(level, "-with-button"), !!data), err), name);
            return React.createElement(HorizontalScroller, _extends({
                ref: execute(arg, path),
                onPressEnter: function (e) {
                    if (!timestampGenerator.current) {
                        blur(e);
                    }
                }
            }, item, {
                size: e,
                onCompositionStart: function (e) {
                    /** @type {boolean} */
                    timestampGenerator.current = true;
                    if (!(null === x || void 0 === x)) {
                        x(e);
                    }
                },
                onCompositionEnd: function (e) {
                    /** @type {boolean} */
                    timestampGenerator.current = false;
                    if (!(null === trigger || void 0 === trigger)) {
                        trigger(e);
                    }
                },
                prefixCls: end_mode,
                addonAfter: addonAfter,
                suffix: suffix,
                onChange: function (event) {
                    if (event && event.target && "click" === event.type && callback) {
                        callback(event.target.value, event);
                    }
                    if (handler) {
                        handler(event);
                    }
                },
                className: record,
                disabled: flag
            }));
        });
        var Search = outFile;
        var $scope = HorizontalScroller;
        /** @type {function(!Object): ?} */
        $scope.Group = componentDidMount;
        $scope.Search = Search;
        $scope.TextArea = columnDefs;
        $scope.Password = password;
        var vm = $scope;
        var desc = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z"
                    }
                }]
            },
            name: "arrow-right",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} name
         * @return {?}
         */
        var section = function (context, name) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: name,
                icon: desc
            }));
        };
        /** @type {string} */
        section.displayName = "ArrowRightOutlined";
        var freedomContent = React.forwardRef(section);
        var getClass = helper.Header;
        var Content = helper.Content;
        var displayError = helper.Footer;
        var dsl = {
            labelCol: {
                span: 8
            },
            wrapperCol: {
                span: 16
            }
        };
        /**
         * @return {?}
         */
        var login = function () {
            var findForms = call(lambdaBody.useForm(), 1)[0];
            return (0, globs.jsxs)(helper, {
                children: [(0, globs.jsx)(getClass, {
                    style: {
                        position: "fixed",
                        zIndex: 1,
                        width: "100%"
                    },
                    children: (0, globs.jsx)(loadImage, {})
                }), (0, globs.jsxs)(Content, {
                    className: "site-layout",
                    style: {
                        padding: "0 50px",
                        marginTop: 64
                    },
                    children: [(0, globs.jsx)(andThen, {}), (0, globs.jsx)("div", {
                        className: "site-layout-background",
                        style: {
                            padding: 24,
                            minHeight: 500
                        },
                        children: (0, globs.jsx)("div", {
                            className: "login",
                            children: (0, globs.jsxs)("div", {
                                className: "login-form",
                                children: [(0, globs.jsx)("h1", {
                                    children: (0, globs.jsxs)("span", {
                                        children: [(0, globs.jsx)(freedomContent, {}), "\u7528\u6237\u767b\u5f55"]
                                    })
                                }), (0, globs.jsxs)(lambdaBody, assign(assign({
                                    form: findForms,
                                    name: "login"
                                }, dsl), {}, {
                                    initialValues: {
                                        remember: true
                                    },
                                    onFinish: function (data) {
                                        var user1 = {
                                            userName: data.username,
                                            passWord: data.password
                                        };
                                        console.log("post data:", user1);
                                        var userPromise = function (user1) {
                                            return statements.apply(this, arguments);
                                        }(user1);
                                        Promise.all([userPromise]).then(function (e) {
                                            var t = call(e, 1)[0];
                                            if (0 === (null === t || void 0 === t ? void 0 : t.code)) {
                                                openConsole(null === t || void 0 === t ? void 0 : t.data);
                                                rule.success("\u767b\u5f55\u6210\u529f");
                                                setTimeout(function () {
                                                    /** @type {string} */
                                                    window.location.href = "/";
                                                }, 500);
                                            } else {
                                                rule.error(null === t || void 0 === t ? void 0 : t.message);
                                            }
                                        }).catch(function (message) {
                                            console.log(message);
                                            rule.error(message.message);
                                        });
                                    },
                                    onFinishFailed: function (elements) {
                                        console.log("Failed:", elements);
                                        rule.error("\u767b\u5f55\u51fa\u9519\u4e86");
                                    },
                                    autoComplete: "off",
                                    children: [(0, globs.jsx)(lambdaBody.Item, {
                                        label: "\u7528\u6237\u540d",
                                        name: "username",
                                        rules: [{
                                            required: true,
                                            message: "Please input your username!"
                                        }],
                                        children: (0, globs.jsx)(vm, {})
                                    }), (0, globs.jsx)(lambdaBody.Item, {
                                        label: "\u5bc6\u7801",
                                        name: "password",
                                        rules: [{
                                            required: true,
                                            message: "Please input your password!"
                                        }],
                                        children: (0, globs.jsx)(vm.Password, {})
                                    }), (0, globs.jsx)(lambdaBody.Item, {
                                        wrapperCol: {
                                            offset: 8,
                                            span: 16
                                        },
                                        children: (0, globs.jsx)(Nested, {
                                            type: "primary",
                                            htmlType: "submit",
                                            children: "\u767b\u5f55"
                                        })
                                    })]
                                }))]
                            })
                        })
                    })]
                }), (0, globs.jsx)(displayError, {
                    style: {
                        textAlign: "center"
                    },
                    children: (0, globs.jsx)(slitscan, {})
                })]
            });
        };
        var config = {
            icon: {
                tag: "svg",
                attrs: {
                    viewBox: "64 64 896 896",
                    focusable: "false"
                },
                children: [{
                    tag: "path",
                    attrs: {
                        d: "M678.3 642.4c24.2-13 51.9-20.4 81.4-20.4h.1c3 0 4.4-3.6 2.2-5.6a371.67 371.67 0 00-103.7-65.8c-.4-.2-.8-.3-1.2-.5C719.2 505 759.6 431.7 759.6 349c0-137-110.8-248-247.5-248S264.7 212 264.7 349c0 82.7 40.4 156 102.6 201.1-.4.2-.8.3-1.2.5-44.7 18.9-84.8 46-119.3 80.6a373.42 373.42 0 00-80.4 119.5A373.6 373.6 0 00137 888.8a8 8 0 008 8.2h59.9c4.3 0 7.9-3.5 8-7.8 2-77.2 32.9-149.5 87.6-204.3C357 628.2 432.2 597 512.2 597c56.7 0 111.1 15.7 158 45.1a8.1 8.1 0 008.1.3zM512.2 521c-45.8 0-88.9-17.9-121.4-50.4A171.2 171.2 0 01340.5 349c0-45.9 17.9-89.1 50.3-121.6S466.3 177 512.2 177s88.9 17.9 121.4 50.4A171.2 171.2 0 01683.9 349c0 45.9-17.9 89.1-50.3 121.6C601.1 503.1 558 521 512.2 521zM880 759h-84v-84c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v84h-84c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h84v84c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-84h84c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z"
                    }
                }]
            },
            name: "user-add",
            theme: "outlined"
        };
        /**
         * @param {?} context
         * @param {string} frame
         * @return {?}
         */
        var maxY = function (context, frame) {
            return React.createElement(VictoryLine, assign(assign({}, context), {}, {
                ref: frame,
                icon: config
            }));
        };
        /** @type {string} */
        maxY.displayName = "UserAddOutlined";
        var boardSize = React.forwardRef(maxY);
        var ns = helper.Header;
        var monitorConnection = helper.Content;
        var org = helper.Footer;
        var oldOptions = {
            labelCol: {
                span: 8
            },
            wrapperCol: {
                span: 16
            }
        };
        /**
         * @return {?}
         */
        var configure = function () {
            var findForms = call(lambdaBody.useForm(), 1)[0];
            return (0, globs.jsxs)(helper, {
                children: [(0, globs.jsx)(ns, {
                    style: {
                        position: "fixed",
                        zIndex: 1,
                        width: "100%"
                    },
                    children: (0, globs.jsx)(loadImage, {})
                }), (0, globs.jsxs)(monitorConnection, {
                    className: "site-layout",
                    style: {
                        padding: "0 50px",
                        marginTop: 64
                    },
                    children: [(0, globs.jsx)(andThen, {}), (0, globs.jsx)("div", {
                        className: "site-layout-background",
                        style: {
                            padding: 24,
                            minHeight: 500
                        },
                        children: (0, globs.jsx)("div", {
                            className: "register",
                            children: (0, globs.jsxs)("div", {
                                className: "register-form",
                                children: [(0, globs.jsx)("h1", {
                                    children: (0, globs.jsxs)("span", {
                                        children: [(0, globs.jsx)(boardSize, {}), "\u7528\u6237\u6ce8\u518c"]
                                    })
                                }), (0, globs.jsxs)(lambdaBody, assign(assign({
                                    form: findForms,
                                    name: "register"
                                }, oldOptions), {}, {
                                    initialValues: {
                                        remember: true
                                    },
                                    onFinish: function (data) {
                                        var user1 = {
                                            userName: data.username,
                                            passWord: data.password
                                        };
                                        console.log("post data:", user1);
                                        var userPromise = function (user1) {
                                            return Connection.apply(this, arguments);
                                        }(user1);
                                        Promise.all([userPromise]).then(function (e) {
                                            var t = call(e, 1)[0];
                                            if (0 === (null === t || void 0 === t ? void 0 : t.code)) {
                                                openConsole(null === t || void 0 === t ? void 0 : t.data);
                                                rule.success("\u6ce8\u518c\u6210\u529f");
                                                setTimeout(function () {
                                                    /** @type {string} */
                                                    window.location.href = "/";
                                                }, 500);
                                            } else {
                                                rule.error(null === t || void 0 === t ? void 0 : t.message);
                                            }
                                        }).catch(function (message) {
                                            console.log(message);
                                            rule.error(message.message);
                                        });
                                    },
                                    onFinishFailed: function (elements) {
                                        console.log("Failed:", elements);
                                        rule.error("\u6ce8\u518c\u51fa\u9519\u4e86");
                                    },
                                    autoComplete: "off",
                                    children: [(0, globs.jsx)(lambdaBody.Item, {
                                        label: "\u7528\u6237\u540d",
                                        name: "username",
                                        rules: [{
                                            required: true,
                                            message: "Please input your username!"
                                        }],
                                        children: (0, globs.jsx)(vm, {})
                                    }), (0, globs.jsx)(lambdaBody.Item, {
                                        label: "\u5bc6\u7801",
                                        name: "password",
                                        rules: [{
                                            required: true,
                                            message: "Please input your password!"
                                        }],
                                        children: (0, globs.jsx)(vm.Password, {})
                                    }), (0, globs.jsx)(lambdaBody.Item, {
                                        wrapperCol: {
                                            offset: 8,
                                            span: 16
                                        },
                                        children: (0, globs.jsx)(Nested, {
                                            type: "primary",
                                            htmlType: "submit",
                                            children: "\u6ce8\u518c"
                                        })
                                    })]
                                }))]
                            })
                        })
                    })]
                }), (0, globs.jsx)(org, {
                    style: {
                        textAlign: "center"
                    },
                    children: (0, globs.jsx)(slitscan, {})
                })]
            });
        };
        core.createRoot(document.getElementById("root")).render((0, globs.jsx)(React.StrictMode, {
            children: (0, globs.jsx)(exports, {
                children: (0, globs.jsxs)(inspect, {
                    children: [(0, globs.jsx)(op, {
                        path: "/",
                        element: (0, globs.jsx)(buildProgress, {})
                    }), (0, globs.jsx)(op, {
                        path: "*",
                        element: (0, globs.jsx)(buildProgress, {})
                    }), (0, globs.jsx)(op, {
                        path: "/login",
                        element: (0, globs.jsx)(login, {})
                    }), (0, globs.jsx)(op, {
                        path: "/register",
                        element: (0, globs.jsx)(configure, {})
                    })]
                })
            })
        }));
    })();
}();
